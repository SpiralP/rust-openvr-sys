/* automatically generated by rust-bindgen 0.60.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __bool_true_false_are_defined: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __the_value: __vcrt_va_list_is_reference__bindgen_ty_1 = false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type PropertyContainerHandle_t = u64;
pub type PropertyTypeTag_t = u32;
pub type VRActionHandle_t = u64;
pub type VRActionSetHandle_t = u64;
pub type VRInputValueHandle_t = u64;
pub const k_nDriverNone: ::std::os::raw::c_uint = 4294967295;
pub const k_unMaxDriverDebugResponseSize: ::std::os::raw::c_uint = 32768;
pub const k_unTrackedDeviceIndex_Hmd: ::std::os::raw::c_uint = 0;
pub const k_unMaxTrackedDeviceCount: ::std::os::raw::c_uint = 64;
pub const k_unTrackedDeviceIndexOther: ::std::os::raw::c_uint = 4294967294;
pub const k_unTrackedDeviceIndexInvalid: ::std::os::raw::c_uint = 4294967295;
pub const k_ulInvalidPropertyContainer: ::std::os::raw::c_ulong = 0;
pub const k_unInvalidPropertyTag: ::std::os::raw::c_uint = 0;
pub const k_ulInvalidDriverHandle: ::std::os::raw::c_ulong = 0;
pub const k_unFloatPropertyTag: ::std::os::raw::c_uint = 1;
pub const k_unInt32PropertyTag: ::std::os::raw::c_uint = 2;
pub const k_unUint64PropertyTag: ::std::os::raw::c_uint = 3;
pub const k_unBoolPropertyTag: ::std::os::raw::c_uint = 4;
pub const k_unStringPropertyTag: ::std::os::raw::c_uint = 5;
pub const k_unHmdMatrix34PropertyTag: ::std::os::raw::c_uint = 20;
pub const k_unHmdMatrix44PropertyTag: ::std::os::raw::c_uint = 21;
pub const k_unHmdVector3PropertyTag: ::std::os::raw::c_uint = 22;
pub const k_unHmdVector4PropertyTag: ::std::os::raw::c_uint = 23;
pub const k_unHmdVector2PropertyTag: ::std::os::raw::c_uint = 24;
pub const k_unHmdQuadPropertyTag: ::std::os::raw::c_uint = 25;
pub const k_unHiddenAreaPropertyTag: ::std::os::raw::c_uint = 30;
pub const k_unPathHandleInfoTag: ::std::os::raw::c_uint = 31;
pub const k_unActionPropertyTag: ::std::os::raw::c_uint = 32;
pub const k_unInputValuePropertyTag: ::std::os::raw::c_uint = 33;
pub const k_unWildcardPropertyTag: ::std::os::raw::c_uint = 34;
pub const k_unHapticVibrationPropertyTag: ::std::os::raw::c_uint = 35;
pub const k_unSkeletonPropertyTag: ::std::os::raw::c_uint = 36;
pub const k_unSpatialAnchorPosePropertyTag: ::std::os::raw::c_uint = 40;
pub const k_unJsonPropertyTag: ::std::os::raw::c_uint = 41;
pub const k_unActiveActionSetPropertyTag: ::std::os::raw::c_uint = 42;
pub const k_unOpenVRInternalReserved_Start: ::std::os::raw::c_uint = 1000;
pub const k_unOpenVRInternalReserved_End: ::std::os::raw::c_uint = 10000;
pub const k_unMaxPropertyStringSize: ::std::os::raw::c_uint = 32768;
pub const k_ulInvalidActionHandle: ::std::os::raw::c_ulong = 0;
pub const k_ulInvalidActionSetHandle: ::std::os::raw::c_ulong = 0;
pub const k_ulInvalidInputValueHandle: ::std::os::raw::c_ulong = 0;
pub const k_unControllerStateAxisCount: ::std::os::raw::c_uint = 5;
pub const k_ulOverlayHandleInvalid: ::std::os::raw::c_ulong = 0;
pub const k_unMaxDistortionFunctionParameters: ::std::os::raw::c_uint = 8;
pub const k_unScreenshotHandleInvalid: ::std::os::raw::c_uint = 0;
pub const IVRSystem_Version: &[u8; 14usize] = b"IVRSystem_019\0";
pub const IVRExtendedDisplay_Version: &[u8; 23usize] = b"IVRExtendedDisplay_001\0";
pub const IVRTrackedCamera_Version: &[u8; 21usize] = b"IVRTrackedCamera_005\0";
pub const k_unMaxApplicationKeyLength: ::std::os::raw::c_uint = 128;
pub const k_pch_MimeType_HomeApp: &[u8; 8usize] = b"vr/home\0";
pub const k_pch_MimeType_GameTheater: &[u8; 16usize] = b"vr/game_theater\0";
pub const IVRApplications_Version: &[u8; 20usize] = b"IVRApplications_006\0";
pub const IVRChaperone_Version: &[u8; 17usize] = b"IVRChaperone_003\0";
pub const IVRChaperoneSetup_Version: &[u8; 22usize] = b"IVRChaperoneSetup_006\0";
pub const IVRCompositor_Version: &[u8; 18usize] = b"IVRCompositor_022\0";
pub const k_unVROverlayMaxKeyLength: ::std::os::raw::c_uint = 128;
pub const k_unVROverlayMaxNameLength: ::std::os::raw::c_uint = 128;
pub const k_unMaxOverlayCount: ::std::os::raw::c_uint = 64;
pub const k_unMaxOverlayIntersectionMaskPrimitivesCount: ::std::os::raw::c_uint = 32;
pub const IVROverlay_Version: &[u8; 15usize] = b"IVROverlay_019\0";
pub const k_pch_Controller_Component_GDC2015: &[u8; 8usize] = b"gdc2015\0";
pub const k_pch_Controller_Component_Base: &[u8; 5usize] = b"base\0";
pub const k_pch_Controller_Component_Tip: &[u8; 4usize] = b"tip\0";
pub const k_pch_Controller_Component_HandGrip: &[u8; 9usize] = b"handgrip\0";
pub const k_pch_Controller_Component_Status: &[u8; 7usize] = b"status\0";
pub const IVRRenderModels_Version: &[u8; 20usize] = b"IVRRenderModels_006\0";
pub const k_unNotificationTextMaxSize: ::std::os::raw::c_uint = 256;
pub const IVRNotifications_Version: &[u8; 21usize] = b"IVRNotifications_002\0";
pub const k_unMaxSettingsKeyLength: ::std::os::raw::c_uint = 128;
pub const IVRSettings_Version: &[u8; 16usize] = b"IVRSettings_002\0";
pub const k_pch_SteamVR_Section: &[u8; 8usize] = b"steamvr\0";
pub const k_pch_SteamVR_RequireHmd_String: &[u8; 11usize] = b"requireHmd\0";
pub const k_pch_SteamVR_ForcedDriverKey_String: &[u8; 13usize] = b"forcedDriver\0";
pub const k_pch_SteamVR_ForcedHmdKey_String: &[u8; 10usize] = b"forcedHmd\0";
pub const k_pch_SteamVR_DisplayDebug_Bool: &[u8; 13usize] = b"displayDebug\0";
pub const k_pch_SteamVR_DebugProcessPipe_String: &[u8; 17usize] = b"debugProcessPipe\0";
pub const k_pch_SteamVR_DisplayDebugX_Int32: &[u8; 14usize] = b"displayDebugX\0";
pub const k_pch_SteamVR_DisplayDebugY_Int32: &[u8; 14usize] = b"displayDebugY\0";
pub const k_pch_SteamVR_SendSystemButtonToAllApps_Bool: &[u8; 26usize] =
    b"sendSystemButtonToAllApps\0";
pub const k_pch_SteamVR_LogLevel_Int32: &[u8; 9usize] = b"loglevel\0";
pub const k_pch_SteamVR_IPD_Float: &[u8; 4usize] = b"ipd\0";
pub const k_pch_SteamVR_Background_String: &[u8; 11usize] = b"background\0";
pub const k_pch_SteamVR_BackgroundUseDomeProjection_Bool: &[u8; 28usize] =
    b"backgroundUseDomeProjection\0";
pub const k_pch_SteamVR_BackgroundCameraHeight_Float: &[u8; 23usize] = b"backgroundCameraHeight\0";
pub const k_pch_SteamVR_BackgroundDomeRadius_Float: &[u8; 21usize] = b"backgroundDomeRadius\0";
pub const k_pch_SteamVR_GridColor_String: &[u8; 10usize] = b"gridColor\0";
pub const k_pch_SteamVR_PlayAreaColor_String: &[u8; 14usize] = b"playAreaColor\0";
pub const k_pch_SteamVR_ShowStage_Bool: &[u8; 10usize] = b"showStage\0";
pub const k_pch_SteamVR_ActivateMultipleDrivers_Bool: &[u8; 24usize] = b"activateMultipleDrivers\0";
pub const k_pch_SteamVR_UsingSpeakers_Bool: &[u8; 14usize] = b"usingSpeakers\0";
pub const k_pch_SteamVR_SpeakersForwardYawOffsetDegrees_Float: &[u8; 32usize] =
    b"speakersForwardYawOffsetDegrees\0";
pub const k_pch_SteamVR_BaseStationPowerManagement_Bool: &[u8; 27usize] =
    b"basestationPowerManagement\0";
pub const k_pch_SteamVR_NeverKillProcesses_Bool: &[u8; 19usize] = b"neverKillProcesses\0";
pub const k_pch_SteamVR_SupersampleScale_Float: &[u8; 17usize] = b"supersampleScale\0";
pub const k_pch_SteamVR_MaxRecommendedResolution_Int32: &[u8; 25usize] =
    b"maxRecommendedResolution\0";
pub const k_pch_SteamVR_MotionSmoothing_Bool: &[u8; 16usize] = b"motionSmoothing\0";
pub const k_pch_SteamVR_MotionSmoothingOverride_Int32: &[u8; 24usize] =
    b"motionSmoothingOverride\0";
pub const k_pch_SteamVR_ForceFadeOnBadTracking_Bool: &[u8; 23usize] = b"forceFadeOnBadTracking\0";
pub const k_pch_SteamVR_DefaultMirrorView_Int32: &[u8; 11usize] = b"mirrorView\0";
pub const k_pch_SteamVR_ShowMirrorView_Bool: &[u8; 15usize] = b"showMirrorView\0";
pub const k_pch_SteamVR_MirrorViewGeometry_String: &[u8; 19usize] = b"mirrorViewGeometry\0";
pub const k_pch_SteamVR_MirrorViewGeometryMaximized_String: &[u8; 28usize] =
    b"mirrorViewGeometryMaximized\0";
pub const k_pch_SteamVR_StartMonitorFromAppLaunch: &[u8; 26usize] = b"startMonitorFromAppLaunch\0";
pub const k_pch_SteamVR_StartCompositorFromAppLaunch_Bool: &[u8; 29usize] =
    b"startCompositorFromAppLaunch\0";
pub const k_pch_SteamVR_StartDashboardFromAppLaunch_Bool: &[u8; 28usize] =
    b"startDashboardFromAppLaunch\0";
pub const k_pch_SteamVR_StartOverlayAppsFromDashboard_Bool: &[u8; 30usize] =
    b"startOverlayAppsFromDashboard\0";
pub const k_pch_SteamVR_EnableHomeApp: &[u8; 14usize] = b"enableHomeApp\0";
pub const k_pch_SteamVR_CycleBackgroundImageTimeSec_Int32: &[u8; 28usize] =
    b"CycleBackgroundImageTimeSec\0";
pub const k_pch_SteamVR_RetailDemo_Bool: &[u8; 11usize] = b"retailDemo\0";
pub const k_pch_SteamVR_IpdOffset_Float: &[u8; 10usize] = b"ipdOffset\0";
pub const k_pch_SteamVR_AllowSupersampleFiltering_Bool: &[u8; 26usize] =
    b"allowSupersampleFiltering\0";
pub const k_pch_SteamVR_SupersampleManualOverride_Bool: &[u8; 26usize] =
    b"supersampleManualOverride\0";
pub const k_pch_SteamVR_EnableLinuxVulkanAsync_Bool: &[u8; 23usize] = b"enableLinuxVulkanAsync\0";
pub const k_pch_SteamVR_AllowDisplayLockedMode_Bool: &[u8; 23usize] = b"allowDisplayLockedMode\0";
pub const k_pch_SteamVR_HaveStartedTutorialForNativeChaperoneDriver_Bool: &[u8; 44usize] =
    b"haveStartedTutorialForNativeChaperoneDriver\0";
pub const k_pch_SteamVR_ForceWindows32bitVRMonitor: &[u8; 27usize] =
    b"forceWindows32BitVRMonitor\0";
pub const k_pch_SteamVR_DebugInput: &[u8; 11usize] = b"debugInput\0";
pub const k_pch_SteamVR_DebugInputBinding: &[u8; 18usize] = b"debugInputBinding\0";
pub const k_pch_SteamVR_DoNotFadeToGrid: &[u8; 16usize] = b"doNotFadeToGrid\0";
pub const k_pch_SteamVR_InputBindingUIBlock: &[u8; 15usize] = b"inputBindingUI\0";
pub const k_pch_SteamVR_RenderCameraMode: &[u8; 17usize] = b"renderCameraMode\0";
pub const k_pch_SteamVR_EnableSharedResourceJournaling: &[u8; 31usize] =
    b"enableSharedResourceJournaling\0";
pub const k_pch_SteamVR_EnableSafeMode: &[u8; 15usize] = b"enableSafeMode\0";
pub const k_pch_SteamVR_PreferredRefreshRate: &[u8; 21usize] = b"preferredRefreshRate\0";
pub const k_pch_SteamVR_LastVersionNotice: &[u8; 18usize] = b"lastVersionNotice\0";
pub const k_pch_SteamVR_LastVersionNoticeDate: &[u8; 22usize] = b"lastVersionNoticeDate\0";
pub const k_pch_DirectMode_Section: &[u8; 12usize] = b"direct_mode\0";
pub const k_pch_DirectMode_Enable_Bool: &[u8; 7usize] = b"enable\0";
pub const k_pch_DirectMode_Count_Int32: &[u8; 6usize] = b"count\0";
pub const k_pch_DirectMode_EdidVid_Int32: &[u8; 8usize] = b"edidVid\0";
pub const k_pch_DirectMode_EdidPid_Int32: &[u8; 8usize] = b"edidPid\0";
pub const k_pch_Lighthouse_Section: &[u8; 18usize] = b"driver_lighthouse\0";
pub const k_pch_Lighthouse_DisableIMU_Bool: &[u8; 11usize] = b"disableimu\0";
pub const k_pch_Lighthouse_DisableIMUExceptHMD_Bool: &[u8; 20usize] = b"disableimuexcepthmd\0";
pub const k_pch_Lighthouse_UseDisambiguation_String: &[u8; 18usize] = b"usedisambiguation\0";
pub const k_pch_Lighthouse_DisambiguationDebug_Int32: &[u8; 20usize] = b"disambiguationdebug\0";
pub const k_pch_Lighthouse_PrimaryBasestation_Int32: &[u8; 19usize] = b"primarybasestation\0";
pub const k_pch_Lighthouse_DBHistory_Bool: &[u8; 10usize] = b"dbhistory\0";
pub const k_pch_Lighthouse_EnableBluetooth_Bool: &[u8; 16usize] = b"enableBluetooth\0";
pub const k_pch_Lighthouse_PowerManagedBaseStations_String: &[u8; 25usize] =
    b"PowerManagedBaseStations\0";
pub const k_pch_Lighthouse_PowerManagedBaseStations2_String: &[u8; 26usize] =
    b"PowerManagedBaseStations2\0";
pub const k_pch_Lighthouse_InactivityTimeoutForBaseStations_Int32: &[u8; 33usize] =
    b"InactivityTimeoutForBaseStations\0";
pub const k_pch_Lighthouse_EnableImuFallback_Bool: &[u8; 18usize] = b"enableImuFallback\0";
pub const k_pch_Lighthouse_NewPairing_Bool: &[u8; 11usize] = b"newPairing\0";
pub const k_pch_Null_Section: &[u8; 12usize] = b"driver_null\0";
pub const k_pch_Null_SerialNumber_String: &[u8; 13usize] = b"serialNumber\0";
pub const k_pch_Null_ModelNumber_String: &[u8; 12usize] = b"modelNumber\0";
pub const k_pch_Null_WindowX_Int32: &[u8; 8usize] = b"windowX\0";
pub const k_pch_Null_WindowY_Int32: &[u8; 8usize] = b"windowY\0";
pub const k_pch_Null_WindowWidth_Int32: &[u8; 12usize] = b"windowWidth\0";
pub const k_pch_Null_WindowHeight_Int32: &[u8; 13usize] = b"windowHeight\0";
pub const k_pch_Null_RenderWidth_Int32: &[u8; 12usize] = b"renderWidth\0";
pub const k_pch_Null_RenderHeight_Int32: &[u8; 13usize] = b"renderHeight\0";
pub const k_pch_Null_SecondsFromVsyncToPhotons_Float: &[u8; 26usize] =
    b"secondsFromVsyncToPhotons\0";
pub const k_pch_Null_DisplayFrequency_Float: &[u8; 17usize] = b"displayFrequency\0";
pub const k_pch_UserInterface_Section: &[u8; 14usize] = b"userinterface\0";
pub const k_pch_UserInterface_StatusAlwaysOnTop_Bool: &[u8; 18usize] = b"StatusAlwaysOnTop\0";
pub const k_pch_UserInterface_MinimizeToTray_Bool: &[u8; 15usize] = b"MinimizeToTray\0";
pub const k_pch_UserInterface_HidePopupsWhenStatusMinimized_Bool: &[u8; 30usize] =
    b"HidePopupsWhenStatusMinimized\0";
pub const k_pch_UserInterface_Screenshots_Bool: &[u8; 12usize] = b"screenshots\0";
pub const k_pch_UserInterface_ScreenshotType_Int: &[u8; 15usize] = b"screenshotType\0";
pub const k_pch_Notifications_Section: &[u8; 14usize] = b"notifications\0";
pub const k_pch_Notifications_DoNotDisturb_Bool: &[u8; 13usize] = b"DoNotDisturb\0";
pub const k_pch_Keyboard_Section: &[u8; 9usize] = b"keyboard\0";
pub const k_pch_Keyboard_TutorialCompletions: &[u8; 20usize] = b"TutorialCompletions\0";
pub const k_pch_Keyboard_ScaleX: &[u8; 7usize] = b"ScaleX\0";
pub const k_pch_Keyboard_ScaleY: &[u8; 7usize] = b"ScaleY\0";
pub const k_pch_Keyboard_OffsetLeftX: &[u8; 12usize] = b"OffsetLeftX\0";
pub const k_pch_Keyboard_OffsetRightX: &[u8; 13usize] = b"OffsetRightX\0";
pub const k_pch_Keyboard_OffsetY: &[u8; 8usize] = b"OffsetY\0";
pub const k_pch_Keyboard_Smoothing: &[u8; 10usize] = b"Smoothing\0";
pub const k_pch_Perf_Section: &[u8; 10usize] = b"perfcheck\0";
pub const k_pch_Perf_PerfGraphInHMD_Bool: &[u8; 15usize] = b"perfGraphInHMD\0";
pub const k_pch_Perf_AllowTimingStore_Bool: &[u8; 17usize] = b"allowTimingStore\0";
pub const k_pch_Perf_SaveTimingsOnExit_Bool: &[u8; 18usize] = b"saveTimingsOnExit\0";
pub const k_pch_Perf_TestData_Float: &[u8; 13usize] = b"perfTestData\0";
pub const k_pch_Perf_GPUProfiling_Bool: &[u8; 13usize] = b"GPUProfiling\0";
pub const k_pch_CollisionBounds_Section: &[u8; 16usize] = b"collisionBounds\0";
pub const k_pch_CollisionBounds_Style_Int32: &[u8; 21usize] = b"CollisionBoundsStyle\0";
pub const k_pch_CollisionBounds_GroundPerimeterOn_Bool: &[u8; 33usize] =
    b"CollisionBoundsGroundPerimeterOn\0";
pub const k_pch_CollisionBounds_CenterMarkerOn_Bool: &[u8; 30usize] =
    b"CollisionBoundsCenterMarkerOn\0";
pub const k_pch_CollisionBounds_PlaySpaceOn_Bool: &[u8; 27usize] = b"CollisionBoundsPlaySpaceOn\0";
pub const k_pch_CollisionBounds_FadeDistance_Float: &[u8; 28usize] =
    b"CollisionBoundsFadeDistance\0";
pub const k_pch_CollisionBounds_ColorGammaR_Int32: &[u8; 27usize] = b"CollisionBoundsColorGammaR\0";
pub const k_pch_CollisionBounds_ColorGammaG_Int32: &[u8; 27usize] = b"CollisionBoundsColorGammaG\0";
pub const k_pch_CollisionBounds_ColorGammaB_Int32: &[u8; 27usize] = b"CollisionBoundsColorGammaB\0";
pub const k_pch_CollisionBounds_ColorGammaA_Int32: &[u8; 27usize] = b"CollisionBoundsColorGammaA\0";
pub const k_pch_Camera_Section: &[u8; 7usize] = b"camera\0";
pub const k_pch_Camera_EnableCamera_Bool: &[u8; 13usize] = b"enableCamera\0";
pub const k_pch_Camera_EnableCameraInDashboard_Bool: &[u8; 24usize] = b"enableCameraInDashboard\0";
pub const k_pch_Camera_EnableCameraForCollisionBounds_Bool: &[u8; 31usize] =
    b"enableCameraForCollisionBounds\0";
pub const k_pch_Camera_EnableCameraForRoomView_Bool: &[u8; 24usize] = b"enableCameraForRoomView\0";
pub const k_pch_Camera_BoundsColorGammaR_Int32: &[u8; 24usize] = b"cameraBoundsColorGammaR\0";
pub const k_pch_Camera_BoundsColorGammaG_Int32: &[u8; 24usize] = b"cameraBoundsColorGammaG\0";
pub const k_pch_Camera_BoundsColorGammaB_Int32: &[u8; 24usize] = b"cameraBoundsColorGammaB\0";
pub const k_pch_Camera_BoundsColorGammaA_Int32: &[u8; 24usize] = b"cameraBoundsColorGammaA\0";
pub const k_pch_Camera_BoundsStrength_Int32: &[u8; 21usize] = b"cameraBoundsStrength\0";
pub const k_pch_Camera_RoomViewMode_Int32: &[u8; 19usize] = b"cameraRoomViewMode\0";
pub const k_pch_audio_Section: &[u8; 6usize] = b"audio\0";
pub const k_pch_audio_OnPlaybackDevice_String: &[u8; 17usize] = b"onPlaybackDevice\0";
pub const k_pch_audio_OnRecordDevice_String: &[u8; 15usize] = b"onRecordDevice\0";
pub const k_pch_audio_OnPlaybackMirrorDevice_String: &[u8; 23usize] = b"onPlaybackMirrorDevice\0";
pub const k_pch_audio_OffPlaybackDevice_String: &[u8; 18usize] = b"offPlaybackDevice\0";
pub const k_pch_audio_OffRecordDevice_String: &[u8; 16usize] = b"offRecordDevice\0";
pub const k_pch_audio_VIVEHDMIGain: &[u8; 13usize] = b"viveHDMIGain\0";
pub const k_pch_Power_Section: &[u8; 6usize] = b"power\0";
pub const k_pch_Power_PowerOffOnExit_Bool: &[u8; 15usize] = b"powerOffOnExit\0";
pub const k_pch_Power_TurnOffScreensTimeout_Float: &[u8; 22usize] = b"turnOffScreensTimeout\0";
pub const k_pch_Power_TurnOffControllersTimeout_Float: &[u8; 26usize] =
    b"turnOffControllersTimeout\0";
pub const k_pch_Power_ReturnToWatchdogTimeout_Float: &[u8; 24usize] = b"returnToWatchdogTimeout\0";
pub const k_pch_Power_AutoLaunchSteamVROnButtonPress: &[u8; 31usize] =
    b"autoLaunchSteamVROnButtonPress\0";
pub const k_pch_Power_PauseCompositorOnStandby_Bool: &[u8; 25usize] = b"pauseCompositorOnStandby\0";
pub const k_pch_Dashboard_Section: &[u8; 10usize] = b"dashboard\0";
pub const k_pch_Dashboard_EnableDashboard_Bool: &[u8; 16usize] = b"enableDashboard\0";
pub const k_pch_Dashboard_ArcadeMode_Bool: &[u8; 11usize] = b"arcadeMode\0";
pub const k_pch_Dashboard_UseWebDashboard: &[u8; 16usize] = b"useWebDashboard\0";
pub const k_pch_Dashboard_UseWebSettings: &[u8; 15usize] = b"useWebSettings\0";
pub const k_pch_Dashboard_UseWebIPD: &[u8; 10usize] = b"useWebIPD\0";
pub const k_pch_Dashboard_UseWebPowerMenu: &[u8; 16usize] = b"useWebPowerMenu\0";
pub const k_pch_modelskin_Section: &[u8; 11usize] = b"modelskins\0";
pub const k_pch_Driver_Enable_Bool: &[u8; 7usize] = b"enable\0";
pub const k_pch_WebInterface_Section: &[u8; 13usize] = b"WebInterface\0";
pub const k_pch_WebInterface_WebEnable_Bool: &[u8; 10usize] = b"WebEnable\0";
pub const k_pch_WebInterface_WebPort_String: &[u8; 8usize] = b"WebPort\0";
pub const k_pch_VRWebHelper_Section: &[u8; 12usize] = b"VRWebHelper\0";
pub const k_pch_VRWebHelper_DebuggerEnabled_Bool: &[u8; 16usize] = b"DebuggerEnabled\0";
pub const k_pch_VRWebHelper_DebuggerPort_Int32: &[u8; 13usize] = b"DebuggerPort\0";
pub const k_pch_TrackingOverride_Section: &[u8; 18usize] = b"TrackingOverrides\0";
pub const k_pch_App_BindingAutosaveURLSuffix_String: &[u8; 12usize] = b"AutosaveURL\0";
pub const k_pch_App_BindingCurrentURLSuffix_String: &[u8; 11usize] = b"CurrentURL\0";
pub const k_pch_App_NeedToUpdateAutosaveSuffix_Bool: &[u8; 21usize] = b"NeedToUpdateAutosave\0";
pub const k_pch_Trackers_Section: &[u8; 9usize] = b"trackers\0";
pub const k_pch_DesktopUI_Section: &[u8; 10usize] = b"DesktopUI\0";
pub const k_pch_LastKnown_Section: &[u8; 10usize] = b"LastKnown\0";
pub const k_pch_LastKnown_HMDManufacturer_String: &[u8; 16usize] = b"HMDManufacturer\0";
pub const k_pch_LastKnown_HMDModel_String: &[u8; 9usize] = b"HMDModel\0";
pub const k_pch_DismissedWarnings_Section: &[u8; 18usize] = b"DismissedWarnings\0";
pub const IVRScreenshots_Version: &[u8; 19usize] = b"IVRScreenshots_001\0";
pub const IVRResources_Version: &[u8; 17usize] = b"IVRResources_001\0";
pub const IVRDriverManager_Version: &[u8; 21usize] = b"IVRDriverManager_001\0";
pub const k_unMaxActionNameLength: ::std::os::raw::c_uint = 64;
pub const k_unMaxActionSetNameLength: ::std::os::raw::c_uint = 64;
pub const k_unMaxActionOriginCount: ::std::os::raw::c_uint = 16;
pub const k_unMaxBoneNameLength: ::std::os::raw::c_uint = 32;
pub const IVRInput_Version: &[u8; 13usize] = b"IVRInput_006\0";
pub const k_ulInvalidIOBufferHandle: ::std::os::raw::c_ulong = 0;
pub const IVRIOBuffer_Version: &[u8; 16usize] = b"IVRIOBuffer_002\0";
pub const k_ulInvalidSpatialAnchorHandle: ::std::os::raw::c_uint = 0;
pub const IVRSpatialAnchors_Version: &[u8; 22usize] = b"IVRSpatialAnchors_001\0";
pub const EVREye_Eye_Left: EVREye = 0;
pub const EVREye_Eye_Right: EVREye = 1;
pub type EVREye = ::std::os::raw::c_int;
pub const ETextureType_TextureType_Invalid: ETextureType = -1;
pub const ETextureType_TextureType_DirectX: ETextureType = 0;
pub const ETextureType_TextureType_OpenGL: ETextureType = 1;
pub const ETextureType_TextureType_Vulkan: ETextureType = 2;
pub const ETextureType_TextureType_IOSurface: ETextureType = 3;
pub const ETextureType_TextureType_DirectX12: ETextureType = 4;
pub const ETextureType_TextureType_DXGISharedHandle: ETextureType = 5;
pub const ETextureType_TextureType_Metal: ETextureType = 6;
pub type ETextureType = ::std::os::raw::c_int;
pub const EColorSpace_ColorSpace_Auto: EColorSpace = 0;
pub const EColorSpace_ColorSpace_Gamma: EColorSpace = 1;
pub const EColorSpace_ColorSpace_Linear: EColorSpace = 2;
pub type EColorSpace = ::std::os::raw::c_int;
pub const ETrackingResult_TrackingResult_Uninitialized: ETrackingResult = 1;
pub const ETrackingResult_TrackingResult_Calibrating_InProgress: ETrackingResult = 100;
pub const ETrackingResult_TrackingResult_Calibrating_OutOfRange: ETrackingResult = 101;
pub const ETrackingResult_TrackingResult_Running_OK: ETrackingResult = 200;
pub const ETrackingResult_TrackingResult_Running_OutOfRange: ETrackingResult = 201;
pub const ETrackingResult_TrackingResult_Fallback_RotationOnly: ETrackingResult = 300;
pub type ETrackingResult = ::std::os::raw::c_int;
pub const ETrackedDeviceClass_TrackedDeviceClass_Invalid: ETrackedDeviceClass = 0;
pub const ETrackedDeviceClass_TrackedDeviceClass_HMD: ETrackedDeviceClass = 1;
pub const ETrackedDeviceClass_TrackedDeviceClass_Controller: ETrackedDeviceClass = 2;
pub const ETrackedDeviceClass_TrackedDeviceClass_GenericTracker: ETrackedDeviceClass = 3;
pub const ETrackedDeviceClass_TrackedDeviceClass_TrackingReference: ETrackedDeviceClass = 4;
pub const ETrackedDeviceClass_TrackedDeviceClass_DisplayRedirect: ETrackedDeviceClass = 5;
pub const ETrackedDeviceClass_TrackedDeviceClass_Max: ETrackedDeviceClass = 6;
pub type ETrackedDeviceClass = ::std::os::raw::c_int;
pub const ETrackedControllerRole_TrackedControllerRole_Invalid: ETrackedControllerRole = 0;
pub const ETrackedControllerRole_TrackedControllerRole_LeftHand: ETrackedControllerRole = 1;
pub const ETrackedControllerRole_TrackedControllerRole_RightHand: ETrackedControllerRole = 2;
pub const ETrackedControllerRole_TrackedControllerRole_OptOut: ETrackedControllerRole = 3;
pub const ETrackedControllerRole_TrackedControllerRole_Treadmill: ETrackedControllerRole = 4;
pub const ETrackedControllerRole_TrackedControllerRole_Max: ETrackedControllerRole = 5;
pub type ETrackedControllerRole = ::std::os::raw::c_int;
pub const ETrackingUniverseOrigin_TrackingUniverseSeated: ETrackingUniverseOrigin = 0;
pub const ETrackingUniverseOrigin_TrackingUniverseStanding: ETrackingUniverseOrigin = 1;
pub const ETrackingUniverseOrigin_TrackingUniverseRawAndUncalibrated: ETrackingUniverseOrigin = 2;
pub type ETrackingUniverseOrigin = ::std::os::raw::c_int;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_None: EAdditionalRadioFeatures = 0;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_HTCLinkBox: EAdditionalRadioFeatures = 1;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_InternalDongle:
    EAdditionalRadioFeatures = 2;
pub const EAdditionalRadioFeatures_AdditionalRadioFeatures_ExternalDongle:
    EAdditionalRadioFeatures = 4;
pub type EAdditionalRadioFeatures = ::std::os::raw::c_int;
pub const ETrackedDeviceProperty_Prop_Invalid: ETrackedDeviceProperty = 0;
pub const ETrackedDeviceProperty_Prop_TrackingSystemName_String: ETrackedDeviceProperty = 1000;
pub const ETrackedDeviceProperty_Prop_ModelNumber_String: ETrackedDeviceProperty = 1001;
pub const ETrackedDeviceProperty_Prop_SerialNumber_String: ETrackedDeviceProperty = 1002;
pub const ETrackedDeviceProperty_Prop_RenderModelName_String: ETrackedDeviceProperty = 1003;
pub const ETrackedDeviceProperty_Prop_WillDriftInYaw_Bool: ETrackedDeviceProperty = 1004;
pub const ETrackedDeviceProperty_Prop_ManufacturerName_String: ETrackedDeviceProperty = 1005;
pub const ETrackedDeviceProperty_Prop_TrackingFirmwareVersion_String: ETrackedDeviceProperty = 1006;
pub const ETrackedDeviceProperty_Prop_HardwareRevision_String: ETrackedDeviceProperty = 1007;
pub const ETrackedDeviceProperty_Prop_AllWirelessDongleDescriptions_String: ETrackedDeviceProperty =
    1008;
pub const ETrackedDeviceProperty_Prop_ConnectedWirelessDongle_String: ETrackedDeviceProperty = 1009;
pub const ETrackedDeviceProperty_Prop_DeviceIsWireless_Bool: ETrackedDeviceProperty = 1010;
pub const ETrackedDeviceProperty_Prop_DeviceIsCharging_Bool: ETrackedDeviceProperty = 1011;
pub const ETrackedDeviceProperty_Prop_DeviceBatteryPercentage_Float: ETrackedDeviceProperty = 1012;
pub const ETrackedDeviceProperty_Prop_StatusDisplayTransform_Matrix34: ETrackedDeviceProperty =
    1013;
pub const ETrackedDeviceProperty_Prop_Firmware_UpdateAvailable_Bool: ETrackedDeviceProperty = 1014;
pub const ETrackedDeviceProperty_Prop_Firmware_ManualUpdate_Bool: ETrackedDeviceProperty = 1015;
pub const ETrackedDeviceProperty_Prop_Firmware_ManualUpdateURL_String: ETrackedDeviceProperty =
    1016;
pub const ETrackedDeviceProperty_Prop_HardwareRevision_Uint64: ETrackedDeviceProperty = 1017;
pub const ETrackedDeviceProperty_Prop_FirmwareVersion_Uint64: ETrackedDeviceProperty = 1018;
pub const ETrackedDeviceProperty_Prop_FPGAVersion_Uint64: ETrackedDeviceProperty = 1019;
pub const ETrackedDeviceProperty_Prop_VRCVersion_Uint64: ETrackedDeviceProperty = 1020;
pub const ETrackedDeviceProperty_Prop_RadioVersion_Uint64: ETrackedDeviceProperty = 1021;
pub const ETrackedDeviceProperty_Prop_DongleVersion_Uint64: ETrackedDeviceProperty = 1022;
pub const ETrackedDeviceProperty_Prop_BlockServerShutdown_Bool: ETrackedDeviceProperty = 1023;
pub const ETrackedDeviceProperty_Prop_CanUnifyCoordinateSystemWithHmd_Bool: ETrackedDeviceProperty =
    1024;
pub const ETrackedDeviceProperty_Prop_ContainsProximitySensor_Bool: ETrackedDeviceProperty = 1025;
pub const ETrackedDeviceProperty_Prop_DeviceProvidesBatteryStatus_Bool: ETrackedDeviceProperty =
    1026;
pub const ETrackedDeviceProperty_Prop_DeviceCanPowerOff_Bool: ETrackedDeviceProperty = 1027;
pub const ETrackedDeviceProperty_Prop_Firmware_ProgrammingTarget_String: ETrackedDeviceProperty =
    1028;
pub const ETrackedDeviceProperty_Prop_DeviceClass_Int32: ETrackedDeviceProperty = 1029;
pub const ETrackedDeviceProperty_Prop_HasCamera_Bool: ETrackedDeviceProperty = 1030;
pub const ETrackedDeviceProperty_Prop_DriverVersion_String: ETrackedDeviceProperty = 1031;
pub const ETrackedDeviceProperty_Prop_Firmware_ForceUpdateRequired_Bool: ETrackedDeviceProperty =
    1032;
pub const ETrackedDeviceProperty_Prop_ViveSystemButtonFixRequired_Bool: ETrackedDeviceProperty =
    1033;
pub const ETrackedDeviceProperty_Prop_ParentDriver_Uint64: ETrackedDeviceProperty = 1034;
pub const ETrackedDeviceProperty_Prop_ResourceRoot_String: ETrackedDeviceProperty = 1035;
pub const ETrackedDeviceProperty_Prop_RegisteredDeviceType_String: ETrackedDeviceProperty = 1036;
pub const ETrackedDeviceProperty_Prop_InputProfilePath_String: ETrackedDeviceProperty = 1037;
pub const ETrackedDeviceProperty_Prop_NeverTracked_Bool: ETrackedDeviceProperty = 1038;
pub const ETrackedDeviceProperty_Prop_NumCameras_Int32: ETrackedDeviceProperty = 1039;
pub const ETrackedDeviceProperty_Prop_CameraFrameLayout_Int32: ETrackedDeviceProperty = 1040;
pub const ETrackedDeviceProperty_Prop_CameraStreamFormat_Int32: ETrackedDeviceProperty = 1041;
pub const ETrackedDeviceProperty_Prop_AdditionalDeviceSettingsPath_String: ETrackedDeviceProperty =
    1042;
pub const ETrackedDeviceProperty_Prop_Identifiable_Bool: ETrackedDeviceProperty = 1043;
pub const ETrackedDeviceProperty_Prop_BootloaderVersion_Uint64: ETrackedDeviceProperty = 1044;
pub const ETrackedDeviceProperty_Prop_AdditionalSystemReportData_String: ETrackedDeviceProperty =
    1045;
pub const ETrackedDeviceProperty_Prop_CompositeFirmwareVersion_String: ETrackedDeviceProperty =
    1046;
pub const ETrackedDeviceProperty_Prop_ReportsTimeSinceVSync_Bool: ETrackedDeviceProperty = 2000;
pub const ETrackedDeviceProperty_Prop_SecondsFromVsyncToPhotons_Float: ETrackedDeviceProperty =
    2001;
pub const ETrackedDeviceProperty_Prop_DisplayFrequency_Float: ETrackedDeviceProperty = 2002;
pub const ETrackedDeviceProperty_Prop_UserIpdMeters_Float: ETrackedDeviceProperty = 2003;
pub const ETrackedDeviceProperty_Prop_CurrentUniverseId_Uint64: ETrackedDeviceProperty = 2004;
pub const ETrackedDeviceProperty_Prop_PreviousUniverseId_Uint64: ETrackedDeviceProperty = 2005;
pub const ETrackedDeviceProperty_Prop_DisplayFirmwareVersion_Uint64: ETrackedDeviceProperty = 2006;
pub const ETrackedDeviceProperty_Prop_IsOnDesktop_Bool: ETrackedDeviceProperty = 2007;
pub const ETrackedDeviceProperty_Prop_DisplayMCType_Int32: ETrackedDeviceProperty = 2008;
pub const ETrackedDeviceProperty_Prop_DisplayMCOffset_Float: ETrackedDeviceProperty = 2009;
pub const ETrackedDeviceProperty_Prop_DisplayMCScale_Float: ETrackedDeviceProperty = 2010;
pub const ETrackedDeviceProperty_Prop_EdidVendorID_Int32: ETrackedDeviceProperty = 2011;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageLeft_String: ETrackedDeviceProperty = 2012;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageRight_String: ETrackedDeviceProperty = 2013;
pub const ETrackedDeviceProperty_Prop_DisplayGCBlackClamp_Float: ETrackedDeviceProperty = 2014;
pub const ETrackedDeviceProperty_Prop_EdidProductID_Int32: ETrackedDeviceProperty = 2015;
pub const ETrackedDeviceProperty_Prop_CameraToHeadTransform_Matrix34: ETrackedDeviceProperty = 2016;
pub const ETrackedDeviceProperty_Prop_DisplayGCType_Int32: ETrackedDeviceProperty = 2017;
pub const ETrackedDeviceProperty_Prop_DisplayGCOffset_Float: ETrackedDeviceProperty = 2018;
pub const ETrackedDeviceProperty_Prop_DisplayGCScale_Float: ETrackedDeviceProperty = 2019;
pub const ETrackedDeviceProperty_Prop_DisplayGCPrescale_Float: ETrackedDeviceProperty = 2020;
pub const ETrackedDeviceProperty_Prop_DisplayGCImage_String: ETrackedDeviceProperty = 2021;
pub const ETrackedDeviceProperty_Prop_LensCenterLeftU_Float: ETrackedDeviceProperty = 2022;
pub const ETrackedDeviceProperty_Prop_LensCenterLeftV_Float: ETrackedDeviceProperty = 2023;
pub const ETrackedDeviceProperty_Prop_LensCenterRightU_Float: ETrackedDeviceProperty = 2024;
pub const ETrackedDeviceProperty_Prop_LensCenterRightV_Float: ETrackedDeviceProperty = 2025;
pub const ETrackedDeviceProperty_Prop_UserHeadToEyeDepthMeters_Float: ETrackedDeviceProperty = 2026;
pub const ETrackedDeviceProperty_Prop_CameraFirmwareVersion_Uint64: ETrackedDeviceProperty = 2027;
pub const ETrackedDeviceProperty_Prop_CameraFirmwareDescription_String: ETrackedDeviceProperty =
    2028;
pub const ETrackedDeviceProperty_Prop_DisplayFPGAVersion_Uint64: ETrackedDeviceProperty = 2029;
pub const ETrackedDeviceProperty_Prop_DisplayBootloaderVersion_Uint64: ETrackedDeviceProperty =
    2030;
pub const ETrackedDeviceProperty_Prop_DisplayHardwareVersion_Uint64: ETrackedDeviceProperty = 2031;
pub const ETrackedDeviceProperty_Prop_AudioFirmwareVersion_Uint64: ETrackedDeviceProperty = 2032;
pub const ETrackedDeviceProperty_Prop_CameraCompatibilityMode_Int32: ETrackedDeviceProperty = 2033;
pub const ETrackedDeviceProperty_Prop_ScreenshotHorizontalFieldOfViewDegrees_Float:
    ETrackedDeviceProperty = 2034;
pub const ETrackedDeviceProperty_Prop_ScreenshotVerticalFieldOfViewDegrees_Float:
    ETrackedDeviceProperty = 2035;
pub const ETrackedDeviceProperty_Prop_DisplaySuppressed_Bool: ETrackedDeviceProperty = 2036;
pub const ETrackedDeviceProperty_Prop_DisplayAllowNightMode_Bool: ETrackedDeviceProperty = 2037;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageWidth_Int32: ETrackedDeviceProperty = 2038;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageHeight_Int32: ETrackedDeviceProperty = 2039;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageNumChannels_Int32: ETrackedDeviceProperty =
    2040;
pub const ETrackedDeviceProperty_Prop_DisplayMCImageData_Binary: ETrackedDeviceProperty = 2041;
pub const ETrackedDeviceProperty_Prop_SecondsFromPhotonsToVblank_Float: ETrackedDeviceProperty =
    2042;
pub const ETrackedDeviceProperty_Prop_DriverDirectModeSendsVsyncEvents_Bool:
    ETrackedDeviceProperty = 2043;
pub const ETrackedDeviceProperty_Prop_DisplayDebugMode_Bool: ETrackedDeviceProperty = 2044;
pub const ETrackedDeviceProperty_Prop_GraphicsAdapterLuid_Uint64: ETrackedDeviceProperty = 2045;
pub const ETrackedDeviceProperty_Prop_DriverProvidedChaperonePath_String: ETrackedDeviceProperty =
    2048;
pub const ETrackedDeviceProperty_Prop_ExpectedTrackingReferenceCount_Int32: ETrackedDeviceProperty =
    2049;
pub const ETrackedDeviceProperty_Prop_ExpectedControllerCount_Int32: ETrackedDeviceProperty = 2050;
pub const ETrackedDeviceProperty_Prop_NamedIconPathControllerLeftDeviceOff_String:
    ETrackedDeviceProperty = 2051;
pub const ETrackedDeviceProperty_Prop_NamedIconPathControllerRightDeviceOff_String:
    ETrackedDeviceProperty = 2052;
pub const ETrackedDeviceProperty_Prop_NamedIconPathTrackingReferenceDeviceOff_String:
    ETrackedDeviceProperty = 2053;
pub const ETrackedDeviceProperty_Prop_DoNotApplyPrediction_Bool: ETrackedDeviceProperty = 2054;
pub const ETrackedDeviceProperty_Prop_CameraToHeadTransforms_Matrix34_Array:
    ETrackedDeviceProperty = 2055;
pub const ETrackedDeviceProperty_Prop_DistortionMeshResolution_Int32: ETrackedDeviceProperty = 2056;
pub const ETrackedDeviceProperty_Prop_DriverIsDrawingControllers_Bool: ETrackedDeviceProperty =
    2057;
pub const ETrackedDeviceProperty_Prop_DriverRequestsApplicationPause_Bool: ETrackedDeviceProperty =
    2058;
pub const ETrackedDeviceProperty_Prop_DriverRequestsReducedRendering_Bool: ETrackedDeviceProperty =
    2059;
pub const ETrackedDeviceProperty_Prop_MinimumIpdStepMeters_Float: ETrackedDeviceProperty = 2060;
pub const ETrackedDeviceProperty_Prop_AudioBridgeFirmwareVersion_Uint64: ETrackedDeviceProperty =
    2061;
pub const ETrackedDeviceProperty_Prop_ImageBridgeFirmwareVersion_Uint64: ETrackedDeviceProperty =
    2062;
pub const ETrackedDeviceProperty_Prop_ImuToHeadTransform_Matrix34: ETrackedDeviceProperty = 2063;
pub const ETrackedDeviceProperty_Prop_ImuFactoryGyroBias_Vector3: ETrackedDeviceProperty = 2064;
pub const ETrackedDeviceProperty_Prop_ImuFactoryGyroScale_Vector3: ETrackedDeviceProperty = 2065;
pub const ETrackedDeviceProperty_Prop_ImuFactoryAccelerometerBias_Vector3: ETrackedDeviceProperty =
    2066;
pub const ETrackedDeviceProperty_Prop_ImuFactoryAccelerometerScale_Vector3: ETrackedDeviceProperty =
    2067;
pub const ETrackedDeviceProperty_Prop_ConfigurationIncludesLighthouse20Features_Bool:
    ETrackedDeviceProperty = 2069;
pub const ETrackedDeviceProperty_Prop_AdditionalRadioFeatures_Uint64: ETrackedDeviceProperty = 2070;
pub const ETrackedDeviceProperty_Prop_CameraWhiteBalance_Vector4_Array: ETrackedDeviceProperty =
    2071;
pub const ETrackedDeviceProperty_Prop_CameraDistortionFunction_Int32_Array: ETrackedDeviceProperty =
    2072;
pub const ETrackedDeviceProperty_Prop_CameraDistortionCoefficients_Float_Array:
    ETrackedDeviceProperty = 2073;
pub const ETrackedDeviceProperty_Prop_ExpectedControllerType_String: ETrackedDeviceProperty = 2074;
pub const ETrackedDeviceProperty_Prop_DisplayAvailableFrameRates_Float_Array:
    ETrackedDeviceProperty = 2080;
pub const ETrackedDeviceProperty_Prop_DisplaySupportsMultipleFramerates_Bool:
    ETrackedDeviceProperty = 2081;
pub const ETrackedDeviceProperty_Prop_DashboardLayoutPathName_String: ETrackedDeviceProperty = 2090;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraCorrectionMode_Int32:
    ETrackedDeviceProperty = 2200;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerLeft_Int32:
    ETrackedDeviceProperty = 2201;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerRight_Int32:
    ETrackedDeviceProperty = 2202;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerTop_Int32:
    ETrackedDeviceProperty = 2203;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_InnerBottom_Int32:
    ETrackedDeviceProperty = 2204;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterLeft_Int32:
    ETrackedDeviceProperty = 2205;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterRight_Int32:
    ETrackedDeviceProperty = 2206;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterTop_Int32:
    ETrackedDeviceProperty = 2207;
pub const ETrackedDeviceProperty_Prop_DriverRequestedMuraFeather_OuterBottom_Int32:
    ETrackedDeviceProperty = 2208;
pub const ETrackedDeviceProperty_Prop_AttachedDeviceId_String: ETrackedDeviceProperty = 3000;
pub const ETrackedDeviceProperty_Prop_SupportedButtons_Uint64: ETrackedDeviceProperty = 3001;
pub const ETrackedDeviceProperty_Prop_Axis0Type_Int32: ETrackedDeviceProperty = 3002;
pub const ETrackedDeviceProperty_Prop_Axis1Type_Int32: ETrackedDeviceProperty = 3003;
pub const ETrackedDeviceProperty_Prop_Axis2Type_Int32: ETrackedDeviceProperty = 3004;
pub const ETrackedDeviceProperty_Prop_Axis3Type_Int32: ETrackedDeviceProperty = 3005;
pub const ETrackedDeviceProperty_Prop_Axis4Type_Int32: ETrackedDeviceProperty = 3006;
pub const ETrackedDeviceProperty_Prop_ControllerRoleHint_Int32: ETrackedDeviceProperty = 3007;
pub const ETrackedDeviceProperty_Prop_FieldOfViewLeftDegrees_Float: ETrackedDeviceProperty = 4000;
pub const ETrackedDeviceProperty_Prop_FieldOfViewRightDegrees_Float: ETrackedDeviceProperty = 4001;
pub const ETrackedDeviceProperty_Prop_FieldOfViewTopDegrees_Float: ETrackedDeviceProperty = 4002;
pub const ETrackedDeviceProperty_Prop_FieldOfViewBottomDegrees_Float: ETrackedDeviceProperty = 4003;
pub const ETrackedDeviceProperty_Prop_TrackingRangeMinimumMeters_Float: ETrackedDeviceProperty =
    4004;
pub const ETrackedDeviceProperty_Prop_TrackingRangeMaximumMeters_Float: ETrackedDeviceProperty =
    4005;
pub const ETrackedDeviceProperty_Prop_ModeLabel_String: ETrackedDeviceProperty = 4006;
pub const ETrackedDeviceProperty_Prop_CanWirelessIdentify_Bool: ETrackedDeviceProperty = 4007;
pub const ETrackedDeviceProperty_Prop_Nonce_Int32: ETrackedDeviceProperty = 4008;
pub const ETrackedDeviceProperty_Prop_IconPathName_String: ETrackedDeviceProperty = 5000;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceOff_String: ETrackedDeviceProperty = 5001;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceSearching_String: ETrackedDeviceProperty =
    5002;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceSearchingAlert_String:
    ETrackedDeviceProperty = 5003;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceReady_String: ETrackedDeviceProperty =
    5004;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceReadyAlert_String: ETrackedDeviceProperty =
    5005;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceNotReady_String: ETrackedDeviceProperty =
    5006;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceStandby_String: ETrackedDeviceProperty =
    5007;
pub const ETrackedDeviceProperty_Prop_NamedIconPathDeviceAlertLow_String: ETrackedDeviceProperty =
    5008;
pub const ETrackedDeviceProperty_Prop_DisplayHiddenArea_Binary_Start: ETrackedDeviceProperty = 5100;
pub const ETrackedDeviceProperty_Prop_DisplayHiddenArea_Binary_End: ETrackedDeviceProperty = 5150;
pub const ETrackedDeviceProperty_Prop_ParentContainer: ETrackedDeviceProperty = 5151;
pub const ETrackedDeviceProperty_Prop_UserConfigPath_String: ETrackedDeviceProperty = 6000;
pub const ETrackedDeviceProperty_Prop_InstallPath_String: ETrackedDeviceProperty = 6001;
pub const ETrackedDeviceProperty_Prop_HasDisplayComponent_Bool: ETrackedDeviceProperty = 6002;
pub const ETrackedDeviceProperty_Prop_HasControllerComponent_Bool: ETrackedDeviceProperty = 6003;
pub const ETrackedDeviceProperty_Prop_HasCameraComponent_Bool: ETrackedDeviceProperty = 6004;
pub const ETrackedDeviceProperty_Prop_HasDriverDirectModeComponent_Bool: ETrackedDeviceProperty =
    6005;
pub const ETrackedDeviceProperty_Prop_HasVirtualDisplayComponent_Bool: ETrackedDeviceProperty =
    6006;
pub const ETrackedDeviceProperty_Prop_HasSpatialAnchorsSupport_Bool: ETrackedDeviceProperty = 6007;
pub const ETrackedDeviceProperty_Prop_ControllerType_String: ETrackedDeviceProperty = 7000;
pub const ETrackedDeviceProperty_Prop_ControllerHandSelectionPriority_Int32:
    ETrackedDeviceProperty = 7002;
pub const ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_Start: ETrackedDeviceProperty = 10000;
pub const ETrackedDeviceProperty_Prop_VendorSpecific_Reserved_End: ETrackedDeviceProperty = 10999;
pub const ETrackedDeviceProperty_Prop_TrackedDeviceProperty_Max: ETrackedDeviceProperty = 1000000;
pub type ETrackedDeviceProperty = ::std::os::raw::c_int;
pub const ETrackedPropertyError_TrackedProp_Success: ETrackedPropertyError = 0;
pub const ETrackedPropertyError_TrackedProp_WrongDataType: ETrackedPropertyError = 1;
pub const ETrackedPropertyError_TrackedProp_WrongDeviceClass: ETrackedPropertyError = 2;
pub const ETrackedPropertyError_TrackedProp_BufferTooSmall: ETrackedPropertyError = 3;
pub const ETrackedPropertyError_TrackedProp_UnknownProperty: ETrackedPropertyError = 4;
pub const ETrackedPropertyError_TrackedProp_InvalidDevice: ETrackedPropertyError = 5;
pub const ETrackedPropertyError_TrackedProp_CouldNotContactServer: ETrackedPropertyError = 6;
pub const ETrackedPropertyError_TrackedProp_ValueNotProvidedByDevice: ETrackedPropertyError = 7;
pub const ETrackedPropertyError_TrackedProp_StringExceedsMaximumLength: ETrackedPropertyError = 8;
pub const ETrackedPropertyError_TrackedProp_NotYetAvailable: ETrackedPropertyError = 9;
pub const ETrackedPropertyError_TrackedProp_PermissionDenied: ETrackedPropertyError = 10;
pub const ETrackedPropertyError_TrackedProp_InvalidOperation: ETrackedPropertyError = 11;
pub const ETrackedPropertyError_TrackedProp_CannotWriteToWildcards: ETrackedPropertyError = 12;
pub const ETrackedPropertyError_TrackedProp_IPCReadFailure: ETrackedPropertyError = 13;
pub type ETrackedPropertyError = ::std::os::raw::c_int;
pub const EVRSubmitFlags_Submit_Default: EVRSubmitFlags = 0;
pub const EVRSubmitFlags_Submit_LensDistortionAlreadyApplied: EVRSubmitFlags = 1;
pub const EVRSubmitFlags_Submit_GlRenderBuffer: EVRSubmitFlags = 2;
pub const EVRSubmitFlags_Submit_Reserved: EVRSubmitFlags = 4;
pub const EVRSubmitFlags_Submit_TextureWithPose: EVRSubmitFlags = 8;
pub const EVRSubmitFlags_Submit_TextureWithDepth: EVRSubmitFlags = 16;
pub type EVRSubmitFlags = ::std::os::raw::c_int;
pub const EVRState_VRState_Undefined: EVRState = -1;
pub const EVRState_VRState_Off: EVRState = 0;
pub const EVRState_VRState_Searching: EVRState = 1;
pub const EVRState_VRState_Searching_Alert: EVRState = 2;
pub const EVRState_VRState_Ready: EVRState = 3;
pub const EVRState_VRState_Ready_Alert: EVRState = 4;
pub const EVRState_VRState_NotReady: EVRState = 5;
pub const EVRState_VRState_Standby: EVRState = 6;
pub const EVRState_VRState_Ready_Alert_Low: EVRState = 7;
pub type EVRState = ::std::os::raw::c_int;
pub const EVREventType_VREvent_None: EVREventType = 0;
pub const EVREventType_VREvent_TrackedDeviceActivated: EVREventType = 100;
pub const EVREventType_VREvent_TrackedDeviceDeactivated: EVREventType = 101;
pub const EVREventType_VREvent_TrackedDeviceUpdated: EVREventType = 102;
pub const EVREventType_VREvent_TrackedDeviceUserInteractionStarted: EVREventType = 103;
pub const EVREventType_VREvent_TrackedDeviceUserInteractionEnded: EVREventType = 104;
pub const EVREventType_VREvent_IpdChanged: EVREventType = 105;
pub const EVREventType_VREvent_EnterStandbyMode: EVREventType = 106;
pub const EVREventType_VREvent_LeaveStandbyMode: EVREventType = 107;
pub const EVREventType_VREvent_TrackedDeviceRoleChanged: EVREventType = 108;
pub const EVREventType_VREvent_WatchdogWakeUpRequested: EVREventType = 109;
pub const EVREventType_VREvent_LensDistortionChanged: EVREventType = 110;
pub const EVREventType_VREvent_PropertyChanged: EVREventType = 111;
pub const EVREventType_VREvent_WirelessDisconnect: EVREventType = 112;
pub const EVREventType_VREvent_WirelessReconnect: EVREventType = 113;
pub const EVREventType_VREvent_ButtonPress: EVREventType = 200;
pub const EVREventType_VREvent_ButtonUnpress: EVREventType = 201;
pub const EVREventType_VREvent_ButtonTouch: EVREventType = 202;
pub const EVREventType_VREvent_ButtonUntouch: EVREventType = 203;
pub const EVREventType_VREvent_DualAnalog_Press: EVREventType = 250;
pub const EVREventType_VREvent_DualAnalog_Unpress: EVREventType = 251;
pub const EVREventType_VREvent_DualAnalog_Touch: EVREventType = 252;
pub const EVREventType_VREvent_DualAnalog_Untouch: EVREventType = 253;
pub const EVREventType_VREvent_DualAnalog_Move: EVREventType = 254;
pub const EVREventType_VREvent_DualAnalog_ModeSwitch1: EVREventType = 255;
pub const EVREventType_VREvent_DualAnalog_ModeSwitch2: EVREventType = 256;
pub const EVREventType_VREvent_DualAnalog_Cancel: EVREventType = 257;
pub const EVREventType_VREvent_MouseMove: EVREventType = 300;
pub const EVREventType_VREvent_MouseButtonDown: EVREventType = 301;
pub const EVREventType_VREvent_MouseButtonUp: EVREventType = 302;
pub const EVREventType_VREvent_FocusEnter: EVREventType = 303;
pub const EVREventType_VREvent_FocusLeave: EVREventType = 304;
pub const EVREventType_VREvent_ScrollDiscrete: EVREventType = 305;
pub const EVREventType_VREvent_TouchPadMove: EVREventType = 306;
pub const EVREventType_VREvent_OverlayFocusChanged: EVREventType = 307;
pub const EVREventType_VREvent_ReloadOverlays: EVREventType = 308;
pub const EVREventType_VREvent_ScrollSmooth: EVREventType = 309;
pub const EVREventType_VREvent_InputFocusCaptured: EVREventType = 400;
pub const EVREventType_VREvent_InputFocusReleased: EVREventType = 401;
pub const EVREventType_VREvent_SceneFocusLost: EVREventType = 402;
pub const EVREventType_VREvent_SceneFocusGained: EVREventType = 403;
pub const EVREventType_VREvent_SceneApplicationChanged: EVREventType = 404;
pub const EVREventType_VREvent_SceneFocusChanged: EVREventType = 405;
pub const EVREventType_VREvent_InputFocusChanged: EVREventType = 406;
pub const EVREventType_VREvent_SceneApplicationSecondaryRenderingStarted: EVREventType = 407;
pub const EVREventType_VREvent_SceneApplicationUsingWrongGraphicsAdapter: EVREventType = 408;
pub const EVREventType_VREvent_ActionBindingReloaded: EVREventType = 409;
pub const EVREventType_VREvent_HideRenderModels: EVREventType = 410;
pub const EVREventType_VREvent_ShowRenderModels: EVREventType = 411;
pub const EVREventType_VREvent_ConsoleOpened: EVREventType = 420;
pub const EVREventType_VREvent_ConsoleClosed: EVREventType = 421;
pub const EVREventType_VREvent_OverlayShown: EVREventType = 500;
pub const EVREventType_VREvent_OverlayHidden: EVREventType = 501;
pub const EVREventType_VREvent_DashboardActivated: EVREventType = 502;
pub const EVREventType_VREvent_DashboardDeactivated: EVREventType = 503;
pub const EVREventType_VREvent_DashboardRequested: EVREventType = 505;
pub const EVREventType_VREvent_ResetDashboard: EVREventType = 506;
pub const EVREventType_VREvent_RenderToast: EVREventType = 507;
pub const EVREventType_VREvent_ImageLoaded: EVREventType = 508;
pub const EVREventType_VREvent_ShowKeyboard: EVREventType = 509;
pub const EVREventType_VREvent_HideKeyboard: EVREventType = 510;
pub const EVREventType_VREvent_OverlayGamepadFocusGained: EVREventType = 511;
pub const EVREventType_VREvent_OverlayGamepadFocusLost: EVREventType = 512;
pub const EVREventType_VREvent_OverlaySharedTextureChanged: EVREventType = 513;
pub const EVREventType_VREvent_ScreenshotTriggered: EVREventType = 516;
pub const EVREventType_VREvent_ImageFailed: EVREventType = 517;
pub const EVREventType_VREvent_DashboardOverlayCreated: EVREventType = 518;
pub const EVREventType_VREvent_SwitchGamepadFocus: EVREventType = 519;
pub const EVREventType_VREvent_RequestScreenshot: EVREventType = 520;
pub const EVREventType_VREvent_ScreenshotTaken: EVREventType = 521;
pub const EVREventType_VREvent_ScreenshotFailed: EVREventType = 522;
pub const EVREventType_VREvent_SubmitScreenshotToDashboard: EVREventType = 523;
pub const EVREventType_VREvent_ScreenshotProgressToDashboard: EVREventType = 524;
pub const EVREventType_VREvent_PrimaryDashboardDeviceChanged: EVREventType = 525;
pub const EVREventType_VREvent_RoomViewShown: EVREventType = 526;
pub const EVREventType_VREvent_RoomViewHidden: EVREventType = 527;
pub const EVREventType_VREvent_ShowUI: EVREventType = 528;
pub const EVREventType_VREvent_ShowDevTools: EVREventType = 529;
pub const EVREventType_VREvent_Notification_Shown: EVREventType = 600;
pub const EVREventType_VREvent_Notification_Hidden: EVREventType = 601;
pub const EVREventType_VREvent_Notification_BeginInteraction: EVREventType = 602;
pub const EVREventType_VREvent_Notification_Destroyed: EVREventType = 603;
pub const EVREventType_VREvent_Quit: EVREventType = 700;
pub const EVREventType_VREvent_ProcessQuit: EVREventType = 701;
pub const EVREventType_VREvent_QuitAborted_UserPrompt: EVREventType = 702;
pub const EVREventType_VREvent_QuitAcknowledged: EVREventType = 703;
pub const EVREventType_VREvent_DriverRequestedQuit: EVREventType = 704;
pub const EVREventType_VREvent_RestartRequested: EVREventType = 705;
pub const EVREventType_VREvent_ChaperoneDataHasChanged: EVREventType = 800;
pub const EVREventType_VREvent_ChaperoneUniverseHasChanged: EVREventType = 801;
pub const EVREventType_VREvent_ChaperoneTempDataHasChanged: EVREventType = 802;
pub const EVREventType_VREvent_ChaperoneSettingsHaveChanged: EVREventType = 803;
pub const EVREventType_VREvent_SeatedZeroPoseReset: EVREventType = 804;
pub const EVREventType_VREvent_ChaperoneFlushCache: EVREventType = 805;
pub const EVREventType_VREvent_ChaperoneRoomSetupStarting: EVREventType = 806;
pub const EVREventType_VREvent_ChaperoneRoomSetupFinished: EVREventType = 807;
pub const EVREventType_VREvent_AudioSettingsHaveChanged: EVREventType = 820;
pub const EVREventType_VREvent_BackgroundSettingHasChanged: EVREventType = 850;
pub const EVREventType_VREvent_CameraSettingsHaveChanged: EVREventType = 851;
pub const EVREventType_VREvent_ReprojectionSettingHasChanged: EVREventType = 852;
pub const EVREventType_VREvent_ModelSkinSettingsHaveChanged: EVREventType = 853;
pub const EVREventType_VREvent_EnvironmentSettingsHaveChanged: EVREventType = 854;
pub const EVREventType_VREvent_PowerSettingsHaveChanged: EVREventType = 855;
pub const EVREventType_VREvent_EnableHomeAppSettingsHaveChanged: EVREventType = 856;
pub const EVREventType_VREvent_SteamVRSectionSettingChanged: EVREventType = 857;
pub const EVREventType_VREvent_LighthouseSectionSettingChanged: EVREventType = 858;
pub const EVREventType_VREvent_NullSectionSettingChanged: EVREventType = 859;
pub const EVREventType_VREvent_UserInterfaceSectionSettingChanged: EVREventType = 860;
pub const EVREventType_VREvent_NotificationsSectionSettingChanged: EVREventType = 861;
pub const EVREventType_VREvent_KeyboardSectionSettingChanged: EVREventType = 862;
pub const EVREventType_VREvent_PerfSectionSettingChanged: EVREventType = 863;
pub const EVREventType_VREvent_DashboardSectionSettingChanged: EVREventType = 864;
pub const EVREventType_VREvent_WebInterfaceSectionSettingChanged: EVREventType = 865;
pub const EVREventType_VREvent_TrackersSectionSettingChanged: EVREventType = 866;
pub const EVREventType_VREvent_LastKnownSectionSettingChanged: EVREventType = 867;
pub const EVREventType_VREvent_DismissedWarningsSectionSettingChanged: EVREventType = 868;
pub const EVREventType_VREvent_StatusUpdate: EVREventType = 900;
pub const EVREventType_VREvent_WebInterface_InstallDriverCompleted: EVREventType = 950;
pub const EVREventType_VREvent_MCImageUpdated: EVREventType = 1000;
pub const EVREventType_VREvent_FirmwareUpdateStarted: EVREventType = 1100;
pub const EVREventType_VREvent_FirmwareUpdateFinished: EVREventType = 1101;
pub const EVREventType_VREvent_KeyboardClosed: EVREventType = 1200;
pub const EVREventType_VREvent_KeyboardCharInput: EVREventType = 1201;
pub const EVREventType_VREvent_KeyboardDone: EVREventType = 1202;
pub const EVREventType_VREvent_ApplicationTransitionStarted: EVREventType = 1300;
pub const EVREventType_VREvent_ApplicationTransitionAborted: EVREventType = 1301;
pub const EVREventType_VREvent_ApplicationTransitionNewAppStarted: EVREventType = 1302;
pub const EVREventType_VREvent_ApplicationListUpdated: EVREventType = 1303;
pub const EVREventType_VREvent_ApplicationMimeTypeLoad: EVREventType = 1304;
pub const EVREventType_VREvent_ApplicationTransitionNewAppLaunchComplete: EVREventType = 1305;
pub const EVREventType_VREvent_ProcessConnected: EVREventType = 1306;
pub const EVREventType_VREvent_ProcessDisconnected: EVREventType = 1307;
pub const EVREventType_VREvent_Compositor_MirrorWindowShown: EVREventType = 1400;
pub const EVREventType_VREvent_Compositor_MirrorWindowHidden: EVREventType = 1401;
pub const EVREventType_VREvent_Compositor_ChaperoneBoundsShown: EVREventType = 1410;
pub const EVREventType_VREvent_Compositor_ChaperoneBoundsHidden: EVREventType = 1411;
pub const EVREventType_VREvent_Compositor_DisplayDisconnected: EVREventType = 1412;
pub const EVREventType_VREvent_Compositor_DisplayReconnected: EVREventType = 1413;
pub const EVREventType_VREvent_Compositor_HDCPError: EVREventType = 1414;
pub const EVREventType_VREvent_Compositor_ApplicationNotResponding: EVREventType = 1415;
pub const EVREventType_VREvent_Compositor_ApplicationResumed: EVREventType = 1416;
pub const EVREventType_VREvent_Compositor_OutOfVideoMemory: EVREventType = 1417;
pub const EVREventType_VREvent_TrackedCamera_StartVideoStream: EVREventType = 1500;
pub const EVREventType_VREvent_TrackedCamera_StopVideoStream: EVREventType = 1501;
pub const EVREventType_VREvent_TrackedCamera_PauseVideoStream: EVREventType = 1502;
pub const EVREventType_VREvent_TrackedCamera_ResumeVideoStream: EVREventType = 1503;
pub const EVREventType_VREvent_TrackedCamera_EditingSurface: EVREventType = 1550;
pub const EVREventType_VREvent_PerformanceTest_EnableCapture: EVREventType = 1600;
pub const EVREventType_VREvent_PerformanceTest_DisableCapture: EVREventType = 1601;
pub const EVREventType_VREvent_PerformanceTest_FidelityLevel: EVREventType = 1602;
pub const EVREventType_VREvent_MessageOverlay_Closed: EVREventType = 1650;
pub const EVREventType_VREvent_MessageOverlayCloseRequested: EVREventType = 1651;
pub const EVREventType_VREvent_Input_HapticVibration: EVREventType = 1700;
pub const EVREventType_VREvent_Input_BindingLoadFailed: EVREventType = 1701;
pub const EVREventType_VREvent_Input_BindingLoadSuccessful: EVREventType = 1702;
pub const EVREventType_VREvent_Input_ActionManifestReloaded: EVREventType = 1703;
pub const EVREventType_VREvent_Input_ActionManifestLoadFailed: EVREventType = 1704;
pub const EVREventType_VREvent_Input_ProgressUpdate: EVREventType = 1705;
pub const EVREventType_VREvent_Input_TrackerActivated: EVREventType = 1706;
pub const EVREventType_VREvent_Input_BindingsUpdated: EVREventType = 1707;
pub const EVREventType_VREvent_SpatialAnchors_PoseUpdated: EVREventType = 1800;
pub const EVREventType_VREvent_SpatialAnchors_DescriptorUpdated: EVREventType = 1801;
pub const EVREventType_VREvent_SpatialAnchors_RequestPoseUpdate: EVREventType = 1802;
pub const EVREventType_VREvent_SpatialAnchors_RequestDescriptorUpdate: EVREventType = 1803;
pub const EVREventType_VREvent_SystemReport_Started: EVREventType = 1900;
pub const EVREventType_VREvent_VendorSpecific_Reserved_Start: EVREventType = 10000;
pub const EVREventType_VREvent_VendorSpecific_Reserved_End: EVREventType = 19999;
pub type EVREventType = ::std::os::raw::c_int;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Unknown: EDeviceActivityLevel = -1;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Idle: EDeviceActivityLevel = 0;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction: EDeviceActivityLevel = 1;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_UserInteraction_Timeout:
    EDeviceActivityLevel = 2;
pub const EDeviceActivityLevel_k_EDeviceActivityLevel_Standby: EDeviceActivityLevel = 3;
pub type EDeviceActivityLevel = ::std::os::raw::c_int;
pub const EVRButtonId_k_EButton_System: EVRButtonId = 0;
pub const EVRButtonId_k_EButton_ApplicationMenu: EVRButtonId = 1;
pub const EVRButtonId_k_EButton_Grip: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_DPad_Left: EVRButtonId = 3;
pub const EVRButtonId_k_EButton_DPad_Up: EVRButtonId = 4;
pub const EVRButtonId_k_EButton_DPad_Right: EVRButtonId = 5;
pub const EVRButtonId_k_EButton_DPad_Down: EVRButtonId = 6;
pub const EVRButtonId_k_EButton_A: EVRButtonId = 7;
pub const EVRButtonId_k_EButton_ProximitySensor: EVRButtonId = 31;
pub const EVRButtonId_k_EButton_Axis0: EVRButtonId = 32;
pub const EVRButtonId_k_EButton_Axis1: EVRButtonId = 33;
pub const EVRButtonId_k_EButton_Axis2: EVRButtonId = 34;
pub const EVRButtonId_k_EButton_Axis3: EVRButtonId = 35;
pub const EVRButtonId_k_EButton_Axis4: EVRButtonId = 36;
pub const EVRButtonId_k_EButton_SteamVR_Touchpad: EVRButtonId = 32;
pub const EVRButtonId_k_EButton_SteamVR_Trigger: EVRButtonId = 33;
pub const EVRButtonId_k_EButton_Dashboard_Back: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_IndexController_A: EVRButtonId = 2;
pub const EVRButtonId_k_EButton_IndexController_B: EVRButtonId = 1;
pub const EVRButtonId_k_EButton_IndexController_JoyStick: EVRButtonId = 35;
pub const EVRButtonId_k_EButton_Max: EVRButtonId = 64;
pub type EVRButtonId = ::std::os::raw::c_int;
pub const EVRMouseButton_VRMouseButton_Left: EVRMouseButton = 1;
pub const EVRMouseButton_VRMouseButton_Right: EVRMouseButton = 2;
pub const EVRMouseButton_VRMouseButton_Middle: EVRMouseButton = 4;
pub type EVRMouseButton = ::std::os::raw::c_int;
pub const EDualAnalogWhich_k_EDualAnalog_Left: EDualAnalogWhich = 0;
pub const EDualAnalogWhich_k_EDualAnalog_Right: EDualAnalogWhich = 1;
pub type EDualAnalogWhich = ::std::os::raw::c_int;
pub const EShowUIType_ShowUI_ControllerBinding: EShowUIType = 0;
pub const EShowUIType_ShowUI_ManageTrackers: EShowUIType = 1;
pub const EShowUIType_ShowUI_Pairing: EShowUIType = 3;
pub const EShowUIType_ShowUI_Settings: EShowUIType = 4;
pub type EShowUIType = ::std::os::raw::c_int;
pub const EHDCPError_HDCPError_None: EHDCPError = 0;
pub const EHDCPError_HDCPError_LinkLost: EHDCPError = 1;
pub const EHDCPError_HDCPError_Tampered: EHDCPError = 2;
pub const EHDCPError_HDCPError_DeviceRevoked: EHDCPError = 3;
pub const EHDCPError_HDCPError_Unknown: EHDCPError = 4;
pub type EHDCPError = ::std::os::raw::c_int;
pub const EVRInputError_VRInputError_None: EVRInputError = 0;
pub const EVRInputError_VRInputError_NameNotFound: EVRInputError = 1;
pub const EVRInputError_VRInputError_WrongType: EVRInputError = 2;
pub const EVRInputError_VRInputError_InvalidHandle: EVRInputError = 3;
pub const EVRInputError_VRInputError_InvalidParam: EVRInputError = 4;
pub const EVRInputError_VRInputError_NoSteam: EVRInputError = 5;
pub const EVRInputError_VRInputError_MaxCapacityReached: EVRInputError = 6;
pub const EVRInputError_VRInputError_IPCError: EVRInputError = 7;
pub const EVRInputError_VRInputError_NoActiveActionSet: EVRInputError = 8;
pub const EVRInputError_VRInputError_InvalidDevice: EVRInputError = 9;
pub const EVRInputError_VRInputError_InvalidSkeleton: EVRInputError = 10;
pub const EVRInputError_VRInputError_InvalidBoneCount: EVRInputError = 11;
pub const EVRInputError_VRInputError_InvalidCompressedData: EVRInputError = 12;
pub const EVRInputError_VRInputError_NoData: EVRInputError = 13;
pub const EVRInputError_VRInputError_BufferTooSmall: EVRInputError = 14;
pub const EVRInputError_VRInputError_MismatchedActionManifest: EVRInputError = 15;
pub const EVRInputError_VRInputError_MissingSkeletonData: EVRInputError = 16;
pub const EVRInputError_VRInputError_InvalidBoneIndex: EVRInputError = 17;
pub type EVRInputError = ::std::os::raw::c_int;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Success: EVRSpatialAnchorError = 0;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Internal: EVRSpatialAnchorError = 1;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_UnknownHandle: EVRSpatialAnchorError = 2;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_ArrayTooSmall: EVRSpatialAnchorError = 3;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_InvalidDescriptorChar: EVRSpatialAnchorError =
    4;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NotYetAvailable: EVRSpatialAnchorError = 5;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NotAvailableInThisUniverse:
    EVRSpatialAnchorError = 6;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_PermanentlyUnavailable: EVRSpatialAnchorError =
    7;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_WrongDriver: EVRSpatialAnchorError = 8;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_DescriptorTooLong: EVRSpatialAnchorError = 9;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_Unknown: EVRSpatialAnchorError = 10;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_NoRoomCalibration: EVRSpatialAnchorError = 11;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_InvalidArgument: EVRSpatialAnchorError = 12;
pub const EVRSpatialAnchorError_VRSpatialAnchorError_UnknownDriver: EVRSpatialAnchorError = 13;
pub type EVRSpatialAnchorError = ::std::os::raw::c_int;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Standard: EHiddenAreaMeshType = 0;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Inverse: EHiddenAreaMeshType = 1;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_LineLoop: EHiddenAreaMeshType = 2;
pub const EHiddenAreaMeshType_k_eHiddenAreaMesh_Max: EHiddenAreaMeshType = 3;
pub type EHiddenAreaMeshType = ::std::os::raw::c_int;
pub const EVRControllerAxisType_k_eControllerAxis_None: EVRControllerAxisType = 0;
pub const EVRControllerAxisType_k_eControllerAxis_TrackPad: EVRControllerAxisType = 1;
pub const EVRControllerAxisType_k_eControllerAxis_Joystick: EVRControllerAxisType = 2;
pub const EVRControllerAxisType_k_eControllerAxis_Trigger: EVRControllerAxisType = 3;
pub type EVRControllerAxisType = ::std::os::raw::c_int;
pub const EVRControllerEventOutputType_ControllerEventOutput_OSEvents:
    EVRControllerEventOutputType = 0;
pub const EVRControllerEventOutputType_ControllerEventOutput_VREvents:
    EVRControllerEventOutputType = 1;
pub type EVRControllerEventOutputType = ::std::os::raw::c_int;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_BEGINNER: ECollisionBoundsStyle = 0;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_INTERMEDIATE: ECollisionBoundsStyle = 1;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_SQUARES: ECollisionBoundsStyle = 2;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_ADVANCED: ECollisionBoundsStyle = 3;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_NONE: ECollisionBoundsStyle = 4;
pub const ECollisionBoundsStyle_COLLISION_BOUNDS_STYLE_COUNT: ECollisionBoundsStyle = 5;
pub type ECollisionBoundsStyle = ::std::os::raw::c_int;
pub const EVROverlayError_VROverlayError_None: EVROverlayError = 0;
pub const EVROverlayError_VROverlayError_UnknownOverlay: EVROverlayError = 10;
pub const EVROverlayError_VROverlayError_InvalidHandle: EVROverlayError = 11;
pub const EVROverlayError_VROverlayError_PermissionDenied: EVROverlayError = 12;
pub const EVROverlayError_VROverlayError_OverlayLimitExceeded: EVROverlayError = 13;
pub const EVROverlayError_VROverlayError_WrongVisibilityType: EVROverlayError = 14;
pub const EVROverlayError_VROverlayError_KeyTooLong: EVROverlayError = 15;
pub const EVROverlayError_VROverlayError_NameTooLong: EVROverlayError = 16;
pub const EVROverlayError_VROverlayError_KeyInUse: EVROverlayError = 17;
pub const EVROverlayError_VROverlayError_WrongTransformType: EVROverlayError = 18;
pub const EVROverlayError_VROverlayError_InvalidTrackedDevice: EVROverlayError = 19;
pub const EVROverlayError_VROverlayError_InvalidParameter: EVROverlayError = 20;
pub const EVROverlayError_VROverlayError_ThumbnailCantBeDestroyed: EVROverlayError = 21;
pub const EVROverlayError_VROverlayError_ArrayTooSmall: EVROverlayError = 22;
pub const EVROverlayError_VROverlayError_RequestFailed: EVROverlayError = 23;
pub const EVROverlayError_VROverlayError_InvalidTexture: EVROverlayError = 24;
pub const EVROverlayError_VROverlayError_UnableToLoadFile: EVROverlayError = 25;
pub const EVROverlayError_VROverlayError_KeyboardAlreadyInUse: EVROverlayError = 26;
pub const EVROverlayError_VROverlayError_NoNeighbor: EVROverlayError = 27;
pub const EVROverlayError_VROverlayError_TooManyMaskPrimitives: EVROverlayError = 29;
pub const EVROverlayError_VROverlayError_BadMaskPrimitive: EVROverlayError = 30;
pub const EVROverlayError_VROverlayError_TextureAlreadyLocked: EVROverlayError = 31;
pub const EVROverlayError_VROverlayError_TextureLockCapacityReached: EVROverlayError = 32;
pub const EVROverlayError_VROverlayError_TextureNotLocked: EVROverlayError = 33;
pub type EVROverlayError = ::std::os::raw::c_int;
pub const EVRApplicationType_VRApplication_Other: EVRApplicationType = 0;
pub const EVRApplicationType_VRApplication_Scene: EVRApplicationType = 1;
pub const EVRApplicationType_VRApplication_Overlay: EVRApplicationType = 2;
pub const EVRApplicationType_VRApplication_Background: EVRApplicationType = 3;
pub const EVRApplicationType_VRApplication_Utility: EVRApplicationType = 4;
pub const EVRApplicationType_VRApplication_VRMonitor: EVRApplicationType = 5;
pub const EVRApplicationType_VRApplication_SteamWatchdog: EVRApplicationType = 6;
pub const EVRApplicationType_VRApplication_Bootstrapper: EVRApplicationType = 7;
pub const EVRApplicationType_VRApplication_WebHelper: EVRApplicationType = 8;
pub const EVRApplicationType_VRApplication_Max: EVRApplicationType = 9;
pub type EVRApplicationType = ::std::os::raw::c_int;
pub const EVRFirmwareError_VRFirmwareError_None: EVRFirmwareError = 0;
pub const EVRFirmwareError_VRFirmwareError_Success: EVRFirmwareError = 1;
pub const EVRFirmwareError_VRFirmwareError_Fail: EVRFirmwareError = 2;
pub type EVRFirmwareError = ::std::os::raw::c_int;
pub const EVRNotificationError_VRNotificationError_OK: EVRNotificationError = 0;
pub const EVRNotificationError_VRNotificationError_InvalidNotificationId: EVRNotificationError =
    100;
pub const EVRNotificationError_VRNotificationError_NotificationQueueFull: EVRNotificationError =
    101;
pub const EVRNotificationError_VRNotificationError_InvalidOverlayHandle: EVRNotificationError = 102;
pub const EVRNotificationError_VRNotificationError_SystemWithUserValueAlreadyExists:
    EVRNotificationError = 103;
pub type EVRNotificationError = ::std::os::raw::c_int;
pub const EVRSkeletalMotionRange_VRSkeletalMotionRange_WithController: EVRSkeletalMotionRange = 0;
pub const EVRSkeletalMotionRange_VRSkeletalMotionRange_WithoutController: EVRSkeletalMotionRange =
    1;
pub type EVRSkeletalMotionRange = ::std::os::raw::c_int;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Estimated: EVRSkeletalTrackingLevel = 0;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Partial: EVRSkeletalTrackingLevel = 1;
pub const EVRSkeletalTrackingLevel_VRSkeletalTracking_Full: EVRSkeletalTrackingLevel = 2;
pub const EVRSkeletalTrackingLevel_VRSkeletalTrackingLevel_Count: EVRSkeletalTrackingLevel = 3;
pub const EVRSkeletalTrackingLevel_VRSkeletalTrackingLevel_Max: EVRSkeletalTrackingLevel = 2;
pub type EVRSkeletalTrackingLevel = ::std::os::raw::c_int;
pub const EVRInitError_VRInitError_None: EVRInitError = 0;
pub const EVRInitError_VRInitError_Unknown: EVRInitError = 1;
pub const EVRInitError_VRInitError_Init_InstallationNotFound: EVRInitError = 100;
pub const EVRInitError_VRInitError_Init_InstallationCorrupt: EVRInitError = 101;
pub const EVRInitError_VRInitError_Init_VRClientDLLNotFound: EVRInitError = 102;
pub const EVRInitError_VRInitError_Init_FileNotFound: EVRInitError = 103;
pub const EVRInitError_VRInitError_Init_FactoryNotFound: EVRInitError = 104;
pub const EVRInitError_VRInitError_Init_InterfaceNotFound: EVRInitError = 105;
pub const EVRInitError_VRInitError_Init_InvalidInterface: EVRInitError = 106;
pub const EVRInitError_VRInitError_Init_UserConfigDirectoryInvalid: EVRInitError = 107;
pub const EVRInitError_VRInitError_Init_HmdNotFound: EVRInitError = 108;
pub const EVRInitError_VRInitError_Init_NotInitialized: EVRInitError = 109;
pub const EVRInitError_VRInitError_Init_PathRegistryNotFound: EVRInitError = 110;
pub const EVRInitError_VRInitError_Init_NoConfigPath: EVRInitError = 111;
pub const EVRInitError_VRInitError_Init_NoLogPath: EVRInitError = 112;
pub const EVRInitError_VRInitError_Init_PathRegistryNotWritable: EVRInitError = 113;
pub const EVRInitError_VRInitError_Init_AppInfoInitFailed: EVRInitError = 114;
pub const EVRInitError_VRInitError_Init_Retry: EVRInitError = 115;
pub const EVRInitError_VRInitError_Init_InitCanceledByUser: EVRInitError = 116;
pub const EVRInitError_VRInitError_Init_AnotherAppLaunching: EVRInitError = 117;
pub const EVRInitError_VRInitError_Init_SettingsInitFailed: EVRInitError = 118;
pub const EVRInitError_VRInitError_Init_ShuttingDown: EVRInitError = 119;
pub const EVRInitError_VRInitError_Init_TooManyObjects: EVRInitError = 120;
pub const EVRInitError_VRInitError_Init_NoServerForBackgroundApp: EVRInitError = 121;
pub const EVRInitError_VRInitError_Init_NotSupportedWithCompositor: EVRInitError = 122;
pub const EVRInitError_VRInitError_Init_NotAvailableToUtilityApps: EVRInitError = 123;
pub const EVRInitError_VRInitError_Init_Internal: EVRInitError = 124;
pub const EVRInitError_VRInitError_Init_HmdDriverIdIsNone: EVRInitError = 125;
pub const EVRInitError_VRInitError_Init_HmdNotFoundPresenceFailed: EVRInitError = 126;
pub const EVRInitError_VRInitError_Init_VRMonitorNotFound: EVRInitError = 127;
pub const EVRInitError_VRInitError_Init_VRMonitorStartupFailed: EVRInitError = 128;
pub const EVRInitError_VRInitError_Init_LowPowerWatchdogNotSupported: EVRInitError = 129;
pub const EVRInitError_VRInitError_Init_InvalidApplicationType: EVRInitError = 130;
pub const EVRInitError_VRInitError_Init_NotAvailableToWatchdogApps: EVRInitError = 131;
pub const EVRInitError_VRInitError_Init_WatchdogDisabledInSettings: EVRInitError = 132;
pub const EVRInitError_VRInitError_Init_VRDashboardNotFound: EVRInitError = 133;
pub const EVRInitError_VRInitError_Init_VRDashboardStartupFailed: EVRInitError = 134;
pub const EVRInitError_VRInitError_Init_VRHomeNotFound: EVRInitError = 135;
pub const EVRInitError_VRInitError_Init_VRHomeStartupFailed: EVRInitError = 136;
pub const EVRInitError_VRInitError_Init_RebootingBusy: EVRInitError = 137;
pub const EVRInitError_VRInitError_Init_FirmwareUpdateBusy: EVRInitError = 138;
pub const EVRInitError_VRInitError_Init_FirmwareRecoveryBusy: EVRInitError = 139;
pub const EVRInitError_VRInitError_Init_USBServiceBusy: EVRInitError = 140;
pub const EVRInitError_VRInitError_Init_VRWebHelperStartupFailed: EVRInitError = 141;
pub const EVRInitError_VRInitError_Init_TrackerManagerInitFailed: EVRInitError = 142;
pub const EVRInitError_VRInitError_Init_AlreadyRunning: EVRInitError = 143;
pub const EVRInitError_VRInitError_Init_FailedForVrMonitor: EVRInitError = 144;
pub const EVRInitError_VRInitError_Driver_Failed: EVRInitError = 200;
pub const EVRInitError_VRInitError_Driver_Unknown: EVRInitError = 201;
pub const EVRInitError_VRInitError_Driver_HmdUnknown: EVRInitError = 202;
pub const EVRInitError_VRInitError_Driver_NotLoaded: EVRInitError = 203;
pub const EVRInitError_VRInitError_Driver_RuntimeOutOfDate: EVRInitError = 204;
pub const EVRInitError_VRInitError_Driver_HmdInUse: EVRInitError = 205;
pub const EVRInitError_VRInitError_Driver_NotCalibrated: EVRInitError = 206;
pub const EVRInitError_VRInitError_Driver_CalibrationInvalid: EVRInitError = 207;
pub const EVRInitError_VRInitError_Driver_HmdDisplayNotFound: EVRInitError = 208;
pub const EVRInitError_VRInitError_Driver_TrackedDeviceInterfaceUnknown: EVRInitError = 209;
pub const EVRInitError_VRInitError_Driver_HmdDriverIdOutOfBounds: EVRInitError = 211;
pub const EVRInitError_VRInitError_Driver_HmdDisplayMirrored: EVRInitError = 212;
pub const EVRInitError_VRInitError_Driver_HmdDisplayNotFoundLaptop: EVRInitError = 213;
pub const EVRInitError_VRInitError_IPC_ServerInitFailed: EVRInitError = 300;
pub const EVRInitError_VRInitError_IPC_ConnectFailed: EVRInitError = 301;
pub const EVRInitError_VRInitError_IPC_SharedStateInitFailed: EVRInitError = 302;
pub const EVRInitError_VRInitError_IPC_CompositorInitFailed: EVRInitError = 303;
pub const EVRInitError_VRInitError_IPC_MutexInitFailed: EVRInitError = 304;
pub const EVRInitError_VRInitError_IPC_Failed: EVRInitError = 305;
pub const EVRInitError_VRInitError_IPC_CompositorConnectFailed: EVRInitError = 306;
pub const EVRInitError_VRInitError_IPC_CompositorInvalidConnectResponse: EVRInitError = 307;
pub const EVRInitError_VRInitError_IPC_ConnectFailedAfterMultipleAttempts: EVRInitError = 308;
pub const EVRInitError_VRInitError_Compositor_Failed: EVRInitError = 400;
pub const EVRInitError_VRInitError_Compositor_D3D11HardwareRequired: EVRInitError = 401;
pub const EVRInitError_VRInitError_Compositor_FirmwareRequiresUpdate: EVRInitError = 402;
pub const EVRInitError_VRInitError_Compositor_OverlayInitFailed: EVRInitError = 403;
pub const EVRInitError_VRInitError_Compositor_ScreenshotsInitFailed: EVRInitError = 404;
pub const EVRInitError_VRInitError_Compositor_UnableToCreateDevice: EVRInitError = 405;
pub const EVRInitError_VRInitError_Compositor_SharedStateIsNull: EVRInitError = 406;
pub const EVRInitError_VRInitError_Compositor_NotificationManagerIsNull: EVRInitError = 407;
pub const EVRInitError_VRInitError_Compositor_ResourceManagerClientIsNull: EVRInitError = 408;
pub const EVRInitError_VRInitError_Compositor_MessageOverlaySharedStateInitFailure: EVRInitError =
    409;
pub const EVRInitError_VRInitError_Compositor_PropertiesInterfaceIsNull: EVRInitError = 410;
pub const EVRInitError_VRInitError_Compositor_CreateFullscreenWindowFailed: EVRInitError = 411;
pub const EVRInitError_VRInitError_Compositor_SettingsInterfaceIsNull: EVRInitError = 412;
pub const EVRInitError_VRInitError_Compositor_FailedToShowWindow: EVRInitError = 413;
pub const EVRInitError_VRInitError_Compositor_DistortInterfaceIsNull: EVRInitError = 414;
pub const EVRInitError_VRInitError_Compositor_DisplayFrequencyFailure: EVRInitError = 415;
pub const EVRInitError_VRInitError_Compositor_RendererInitializationFailed: EVRInitError = 416;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryInterfaceIsNull: EVRInitError = 417;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryCreateFailed: EVRInitError = 418;
pub const EVRInitError_VRInitError_Compositor_DXGIFactoryQueryFailed: EVRInitError = 419;
pub const EVRInitError_VRInitError_Compositor_InvalidAdapterDesktop: EVRInitError = 420;
pub const EVRInitError_VRInitError_Compositor_InvalidHmdAttachment: EVRInitError = 421;
pub const EVRInitError_VRInitError_Compositor_InvalidOutputDesktop: EVRInitError = 422;
pub const EVRInitError_VRInitError_Compositor_InvalidDeviceProvided: EVRInitError = 423;
pub const EVRInitError_VRInitError_Compositor_D3D11RendererInitializationFailed: EVRInitError = 424;
pub const EVRInitError_VRInitError_Compositor_FailedToFindDisplayMode: EVRInitError = 425;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateSwapChain: EVRInitError = 426;
pub const EVRInitError_VRInitError_Compositor_FailedToGetBackBuffer: EVRInitError = 427;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateRenderTarget: EVRInitError = 428;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDXGI2SwapChain: EVRInitError = 429;
pub const EVRInitError_VRInitError_Compositor_FailedtoGetDXGI2BackBuffer: EVRInitError = 430;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDXGI2RenderTarget: EVRInitError = 431;
pub const EVRInitError_VRInitError_Compositor_FailedToGetDXGIDeviceInterface: EVRInitError = 432;
pub const EVRInitError_VRInitError_Compositor_SelectDisplayMode: EVRInitError = 433;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateNvAPIRenderTargets: EVRInitError = 434;
pub const EVRInitError_VRInitError_Compositor_NvAPISetDisplayMode: EVRInitError = 435;
pub const EVRInitError_VRInitError_Compositor_FailedToCreateDirectModeDisplay: EVRInitError = 436;
pub const EVRInitError_VRInitError_Compositor_InvalidHmdPropertyContainer: EVRInitError = 437;
pub const EVRInitError_VRInitError_Compositor_UpdateDisplayFrequency: EVRInitError = 438;
pub const EVRInitError_VRInitError_Compositor_CreateRasterizerState: EVRInitError = 439;
pub const EVRInitError_VRInitError_Compositor_CreateWireframeRasterizerState: EVRInitError = 440;
pub const EVRInitError_VRInitError_Compositor_CreateSamplerState: EVRInitError = 441;
pub const EVRInitError_VRInitError_Compositor_CreateClampToBorderSamplerState: EVRInitError = 442;
pub const EVRInitError_VRInitError_Compositor_CreateAnisoSamplerState: EVRInitError = 443;
pub const EVRInitError_VRInitError_Compositor_CreateOverlaySamplerState: EVRInitError = 444;
pub const EVRInitError_VRInitError_Compositor_CreatePanoramaSamplerState: EVRInitError = 445;
pub const EVRInitError_VRInitError_Compositor_CreateFontSamplerState: EVRInitError = 446;
pub const EVRInitError_VRInitError_Compositor_CreateNoBlendState: EVRInitError = 447;
pub const EVRInitError_VRInitError_Compositor_CreateBlendState: EVRInitError = 448;
pub const EVRInitError_VRInitError_Compositor_CreateAlphaBlendState: EVRInitError = 449;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskR: EVRInitError = 450;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskG: EVRInitError = 451;
pub const EVRInitError_VRInitError_Compositor_CreateBlendStateMaskB: EVRInitError = 452;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilState: EVRInitError = 453;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilStateNoWrite: EVRInitError = 454;
pub const EVRInitError_VRInitError_Compositor_CreateDepthStencilStateNoDepth: EVRInitError = 455;
pub const EVRInitError_VRInitError_Compositor_CreateFlushTexture: EVRInitError = 456;
pub const EVRInitError_VRInitError_Compositor_CreateDistortionSurfaces: EVRInitError = 457;
pub const EVRInitError_VRInitError_Compositor_CreateConstantBuffer: EVRInitError = 458;
pub const EVRInitError_VRInitError_Compositor_CreateHmdPoseConstantBuffer: EVRInitError = 459;
pub const EVRInitError_VRInitError_Compositor_CreateHmdPoseStagingConstantBuffer: EVRInitError =
    460;
pub const EVRInitError_VRInitError_Compositor_CreateSharedFrameInfoConstantBuffer: EVRInitError =
    461;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayConstantBuffer: EVRInitError = 462;
pub const EVRInitError_VRInitError_Compositor_CreateSceneTextureIndexConstantBuffer: EVRInitError =
    463;
pub const EVRInitError_VRInitError_Compositor_CreateReadableSceneTextureIndexConstantBuffer:
    EVRInitError = 464;
pub const EVRInitError_VRInitError_Compositor_CreateLayerGraphicsTextureIndexConstantBuffer:
    EVRInitError = 465;
pub const EVRInitError_VRInitError_Compositor_CreateLayerComputeTextureIndexConstantBuffer:
    EVRInitError = 466;
pub const EVRInitError_VRInitError_Compositor_CreateLayerComputeSceneTextureIndexConstantBuffer:
    EVRInitError = 467;
pub const EVRInitError_VRInitError_Compositor_CreateComputeHmdPoseConstantBuffer: EVRInitError =
    468;
pub const EVRInitError_VRInitError_Compositor_CreateGeomConstantBuffer: EVRInitError = 469;
pub const EVRInitError_VRInitError_Compositor_CreatePanelMaskConstantBuffer: EVRInitError = 470;
pub const EVRInitError_VRInitError_Compositor_CreatePixelSimUBO: EVRInitError = 471;
pub const EVRInitError_VRInitError_Compositor_CreateMSAARenderTextures: EVRInitError = 472;
pub const EVRInitError_VRInitError_Compositor_CreateResolveRenderTextures: EVRInitError = 473;
pub const EVRInitError_VRInitError_Compositor_CreateComputeResolveRenderTextures: EVRInitError =
    474;
pub const EVRInitError_VRInitError_Compositor_CreateDriverDirectModeResolveTextures: EVRInitError =
    475;
pub const EVRInitError_VRInitError_Compositor_OpenDriverDirectModeResolveTextures: EVRInitError =
    476;
pub const EVRInitError_VRInitError_Compositor_CreateFallbackSyncTexture: EVRInitError = 477;
pub const EVRInitError_VRInitError_Compositor_ShareFallbackSyncTexture: EVRInitError = 478;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayIndexBuffer: EVRInitError = 479;
pub const EVRInitError_VRInitError_Compositor_CreateOverlayVertextBuffer: EVRInitError = 480;
pub const EVRInitError_VRInitError_Compositor_CreateTextVertexBuffer: EVRInitError = 481;
pub const EVRInitError_VRInitError_Compositor_CreateTextIndexBuffer: EVRInitError = 482;
pub const EVRInitError_VRInitError_Compositor_CreateMirrorTextures: EVRInitError = 483;
pub const EVRInitError_VRInitError_Compositor_CreateLastFrameRenderTexture: EVRInitError = 484;
pub const EVRInitError_VRInitError_VendorSpecific_UnableToConnectToOculusRuntime: EVRInitError =
    1000;
pub const EVRInitError_VRInitError_VendorSpecific_WindowsNotInDevMode: EVRInitError = 1001;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_CantOpenDevice: EVRInitError = 1101;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToRequestConfigStart:
    EVRInitError = 1102;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_NoStoredConfig: EVRInitError = 1103;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooBig: EVRInitError = 1104;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigTooSmall: EVRInitError = 1105;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToInitZLib: EVRInitError = 1106;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_CantReadFirmwareVersion: EVRInitError =
    1107;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToSendUserDataStart: EVRInitError =
    1108;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataStart: EVRInitError =
    1109;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UnableToGetUserDataNext: EVRInitError =
    1110;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataAddressRange: EVRInitError =
    1111;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_UserDataError: EVRInitError = 1112;
pub const EVRInitError_VRInitError_VendorSpecific_HmdFound_ConfigFailedSanityCheck: EVRInitError =
    1113;
pub const EVRInitError_VRInitError_Steam_SteamInstallationNotFound: EVRInitError = 2000;
pub const EVRInitError_VRInitError_LastError: EVRInitError = 2001;
pub type EVRInitError = ::std::os::raw::c_int;
pub const EVRScreenshotType_VRScreenshotType_None: EVRScreenshotType = 0;
pub const EVRScreenshotType_VRScreenshotType_Mono: EVRScreenshotType = 1;
pub const EVRScreenshotType_VRScreenshotType_Stereo: EVRScreenshotType = 2;
pub const EVRScreenshotType_VRScreenshotType_Cubemap: EVRScreenshotType = 3;
pub const EVRScreenshotType_VRScreenshotType_MonoPanorama: EVRScreenshotType = 4;
pub const EVRScreenshotType_VRScreenshotType_StereoPanorama: EVRScreenshotType = 5;
pub type EVRScreenshotType = ::std::os::raw::c_int;
pub const EVRScreenshotPropertyFilenames_VRScreenshotPropertyFilenames_Preview:
    EVRScreenshotPropertyFilenames = 0;
pub const EVRScreenshotPropertyFilenames_VRScreenshotPropertyFilenames_VR:
    EVRScreenshotPropertyFilenames = 1;
pub type EVRScreenshotPropertyFilenames = ::std::os::raw::c_int;
pub const EVRTrackedCameraError_VRTrackedCameraError_None: EVRTrackedCameraError = 0;
pub const EVRTrackedCameraError_VRTrackedCameraError_OperationFailed: EVRTrackedCameraError = 100;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidHandle: EVRTrackedCameraError = 101;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidFrameHeaderVersion:
    EVRTrackedCameraError = 102;
pub const EVRTrackedCameraError_VRTrackedCameraError_OutOfHandles: EVRTrackedCameraError = 103;
pub const EVRTrackedCameraError_VRTrackedCameraError_IPCFailure: EVRTrackedCameraError = 104;
pub const EVRTrackedCameraError_VRTrackedCameraError_NotSupportedForThisDevice:
    EVRTrackedCameraError = 105;
pub const EVRTrackedCameraError_VRTrackedCameraError_SharedMemoryFailure: EVRTrackedCameraError =
    106;
pub const EVRTrackedCameraError_VRTrackedCameraError_FrameBufferingFailure: EVRTrackedCameraError =
    107;
pub const EVRTrackedCameraError_VRTrackedCameraError_StreamSetupFailure: EVRTrackedCameraError =
    108;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidGLTextureId: EVRTrackedCameraError =
    109;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidSharedTextureHandle:
    EVRTrackedCameraError = 110;
pub const EVRTrackedCameraError_VRTrackedCameraError_FailedToGetGLTextureId: EVRTrackedCameraError =
    111;
pub const EVRTrackedCameraError_VRTrackedCameraError_SharedTextureFailure: EVRTrackedCameraError =
    112;
pub const EVRTrackedCameraError_VRTrackedCameraError_NoFrameAvailable: EVRTrackedCameraError = 113;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidArgument: EVRTrackedCameraError = 114;
pub const EVRTrackedCameraError_VRTrackedCameraError_InvalidFrameBufferSize: EVRTrackedCameraError =
    115;
pub type EVRTrackedCameraError = ::std::os::raw::c_int;
pub const EVRTrackedCameraFrameLayout_Mono: EVRTrackedCameraFrameLayout = 1;
pub const EVRTrackedCameraFrameLayout_Stereo: EVRTrackedCameraFrameLayout = 2;
pub const EVRTrackedCameraFrameLayout_VerticalLayout: EVRTrackedCameraFrameLayout = 16;
pub const EVRTrackedCameraFrameLayout_HorizontalLayout: EVRTrackedCameraFrameLayout = 32;
pub type EVRTrackedCameraFrameLayout = ::std::os::raw::c_int;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_Distorted: EVRTrackedCameraFrameType =
    0;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_Undistorted:
    EVRTrackedCameraFrameType = 1;
pub const EVRTrackedCameraFrameType_VRTrackedCameraFrameType_MaximumUndistorted:
    EVRTrackedCameraFrameType = 2;
pub const EVRTrackedCameraFrameType_MAX_CAMERA_FRAME_TYPES: EVRTrackedCameraFrameType = 3;
pub type EVRTrackedCameraFrameType = ::std::os::raw::c_int;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_None: EVRDistortionFunctionType = 0;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_FTheta: EVRDistortionFunctionType = 1;
pub const EVRDistortionFunctionType_VRDistortionFunctionType_Extended_FTheta:
    EVRDistortionFunctionType = 2;
pub const EVRDistortionFunctionType_MAX_DISTORTION_FUNCTION_TYPES: EVRDistortionFunctionType = 3;
pub type EVRDistortionFunctionType = ::std::os::raw::c_int;
pub const EVSync_VSync_None: EVSync = 0;
pub const EVSync_VSync_WaitRender: EVSync = 1;
pub const EVSync_VSync_NoWaitRender: EVSync = 2;
pub type EVSync = ::std::os::raw::c_int;
pub const EVRMuraCorrectionMode_Default: EVRMuraCorrectionMode = 0;
pub const EVRMuraCorrectionMode_NoCorrection: EVRMuraCorrectionMode = 1;
pub type EVRMuraCorrectionMode = ::std::os::raw::c_int;
pub const Imu_OffScaleFlags_OffScale_AccelX: Imu_OffScaleFlags = 1;
pub const Imu_OffScaleFlags_OffScale_AccelY: Imu_OffScaleFlags = 2;
pub const Imu_OffScaleFlags_OffScale_AccelZ: Imu_OffScaleFlags = 4;
pub const Imu_OffScaleFlags_OffScale_GyroX: Imu_OffScaleFlags = 8;
pub const Imu_OffScaleFlags_OffScale_GyroY: Imu_OffScaleFlags = 16;
pub const Imu_OffScaleFlags_OffScale_GyroZ: Imu_OffScaleFlags = 32;
pub type Imu_OffScaleFlags = ::std::os::raw::c_int;
pub const EVRApplicationError_VRApplicationError_None: EVRApplicationError = 0;
pub const EVRApplicationError_VRApplicationError_AppKeyAlreadyExists: EVRApplicationError = 100;
pub const EVRApplicationError_VRApplicationError_NoManifest: EVRApplicationError = 101;
pub const EVRApplicationError_VRApplicationError_NoApplication: EVRApplicationError = 102;
pub const EVRApplicationError_VRApplicationError_InvalidIndex: EVRApplicationError = 103;
pub const EVRApplicationError_VRApplicationError_UnknownApplication: EVRApplicationError = 104;
pub const EVRApplicationError_VRApplicationError_IPCFailed: EVRApplicationError = 105;
pub const EVRApplicationError_VRApplicationError_ApplicationAlreadyRunning: EVRApplicationError =
    106;
pub const EVRApplicationError_VRApplicationError_InvalidManifest: EVRApplicationError = 107;
pub const EVRApplicationError_VRApplicationError_InvalidApplication: EVRApplicationError = 108;
pub const EVRApplicationError_VRApplicationError_LaunchFailed: EVRApplicationError = 109;
pub const EVRApplicationError_VRApplicationError_ApplicationAlreadyStarting: EVRApplicationError =
    110;
pub const EVRApplicationError_VRApplicationError_LaunchInProgress: EVRApplicationError = 111;
pub const EVRApplicationError_VRApplicationError_OldApplicationQuitting: EVRApplicationError = 112;
pub const EVRApplicationError_VRApplicationError_TransitionAborted: EVRApplicationError = 113;
pub const EVRApplicationError_VRApplicationError_IsTemplate: EVRApplicationError = 114;
pub const EVRApplicationError_VRApplicationError_SteamVRIsExiting: EVRApplicationError = 115;
pub const EVRApplicationError_VRApplicationError_BufferTooSmall: EVRApplicationError = 200;
pub const EVRApplicationError_VRApplicationError_PropertyNotSet: EVRApplicationError = 201;
pub const EVRApplicationError_VRApplicationError_UnknownProperty: EVRApplicationError = 202;
pub const EVRApplicationError_VRApplicationError_InvalidParameter: EVRApplicationError = 203;
pub type EVRApplicationError = ::std::os::raw::c_int;
pub const EVRApplicationProperty_VRApplicationProperty_Name_String: EVRApplicationProperty = 0;
pub const EVRApplicationProperty_VRApplicationProperty_LaunchType_String: EVRApplicationProperty =
    11;
pub const EVRApplicationProperty_VRApplicationProperty_WorkingDirectory_String:
    EVRApplicationProperty = 12;
pub const EVRApplicationProperty_VRApplicationProperty_BinaryPath_String: EVRApplicationProperty =
    13;
pub const EVRApplicationProperty_VRApplicationProperty_Arguments_String: EVRApplicationProperty =
    14;
pub const EVRApplicationProperty_VRApplicationProperty_URL_String: EVRApplicationProperty = 15;
pub const EVRApplicationProperty_VRApplicationProperty_Description_String: EVRApplicationProperty =
    50;
pub const EVRApplicationProperty_VRApplicationProperty_NewsURL_String: EVRApplicationProperty = 51;
pub const EVRApplicationProperty_VRApplicationProperty_ImagePath_String: EVRApplicationProperty =
    52;
pub const EVRApplicationProperty_VRApplicationProperty_Source_String: EVRApplicationProperty = 53;
pub const EVRApplicationProperty_VRApplicationProperty_ActionManifestURL_String:
    EVRApplicationProperty = 54;
pub const EVRApplicationProperty_VRApplicationProperty_IsDashboardOverlay_Bool:
    EVRApplicationProperty = 60;
pub const EVRApplicationProperty_VRApplicationProperty_IsTemplate_Bool: EVRApplicationProperty = 61;
pub const EVRApplicationProperty_VRApplicationProperty_IsInstanced_Bool: EVRApplicationProperty =
    62;
pub const EVRApplicationProperty_VRApplicationProperty_IsInternal_Bool: EVRApplicationProperty = 63;
pub const EVRApplicationProperty_VRApplicationProperty_WantsCompositorPauseInStandby_Bool:
    EVRApplicationProperty = 64;
pub const EVRApplicationProperty_VRApplicationProperty_LastLaunchTime_Uint64:
    EVRApplicationProperty = 70;
pub type EVRApplicationProperty = ::std::os::raw::c_int;
pub const EVRApplicationTransitionState_VRApplicationTransition_None:
    EVRApplicationTransitionState = 0;
pub const EVRApplicationTransitionState_VRApplicationTransition_OldAppQuitSent:
    EVRApplicationTransitionState = 10;
pub const EVRApplicationTransitionState_VRApplicationTransition_WaitingForExternalLaunch:
    EVRApplicationTransitionState = 11;
pub const EVRApplicationTransitionState_VRApplicationTransition_NewAppLaunched:
    EVRApplicationTransitionState = 20;
pub type EVRApplicationTransitionState = ::std::os::raw::c_int;
pub const ChaperoneCalibrationState_OK: ChaperoneCalibrationState = 1;
pub const ChaperoneCalibrationState_Warning: ChaperoneCalibrationState = 100;
pub const ChaperoneCalibrationState_Warning_BaseStationMayHaveMoved: ChaperoneCalibrationState =
    101;
pub const ChaperoneCalibrationState_Warning_BaseStationRemoved: ChaperoneCalibrationState = 102;
pub const ChaperoneCalibrationState_Warning_SeatedBoundsInvalid: ChaperoneCalibrationState = 103;
pub const ChaperoneCalibrationState_Error: ChaperoneCalibrationState = 200;
pub const ChaperoneCalibrationState_Error_BaseStationUninitialized: ChaperoneCalibrationState = 201;
pub const ChaperoneCalibrationState_Error_BaseStationConflict: ChaperoneCalibrationState = 202;
pub const ChaperoneCalibrationState_Error_PlayAreaInvalid: ChaperoneCalibrationState = 203;
pub const ChaperoneCalibrationState_Error_CollisionBoundsInvalid: ChaperoneCalibrationState = 204;
pub type ChaperoneCalibrationState = ::std::os::raw::c_int;
pub const EChaperoneConfigFile_Live: EChaperoneConfigFile = 1;
pub const EChaperoneConfigFile_Temp: EChaperoneConfigFile = 2;
pub type EChaperoneConfigFile = ::std::os::raw::c_int;
pub const EChaperoneImportFlags_EChaperoneImport_BoundsOnly: EChaperoneImportFlags = 1;
pub type EChaperoneImportFlags = ::std::os::raw::c_int;
pub const EVRCompositorError_VRCompositorError_None: EVRCompositorError = 0;
pub const EVRCompositorError_VRCompositorError_RequestFailed: EVRCompositorError = 1;
pub const EVRCompositorError_VRCompositorError_IncompatibleVersion: EVRCompositorError = 100;
pub const EVRCompositorError_VRCompositorError_DoNotHaveFocus: EVRCompositorError = 101;
pub const EVRCompositorError_VRCompositorError_InvalidTexture: EVRCompositorError = 102;
pub const EVRCompositorError_VRCompositorError_IsNotSceneApplication: EVRCompositorError = 103;
pub const EVRCompositorError_VRCompositorError_TextureIsOnWrongDevice: EVRCompositorError = 104;
pub const EVRCompositorError_VRCompositorError_TextureUsesUnsupportedFormat: EVRCompositorError =
    105;
pub const EVRCompositorError_VRCompositorError_SharedTexturesNotSupported: EVRCompositorError = 106;
pub const EVRCompositorError_VRCompositorError_IndexOutOfRange: EVRCompositorError = 107;
pub const EVRCompositorError_VRCompositorError_AlreadySubmitted: EVRCompositorError = 108;
pub const EVRCompositorError_VRCompositorError_InvalidBounds: EVRCompositorError = 109;
pub type EVRCompositorError = ::std::os::raw::c_int;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Implicit: EVRCompositorTimingMode = 0;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Explicit_RuntimePerformsPostPresentHandoff : EVRCompositorTimingMode = 1 ;
pub const EVRCompositorTimingMode_VRCompositorTimingMode_Explicit_ApplicationPerformsPostPresentHandoff : EVRCompositorTimingMode = 2 ;
pub type EVRCompositorTimingMode = ::std::os::raw::c_int;
pub const VROverlayInputMethod_None: VROverlayInputMethod = 0;
pub const VROverlayInputMethod_Mouse: VROverlayInputMethod = 1;
pub const VROverlayInputMethod_DualAnalog: VROverlayInputMethod = 2;
pub type VROverlayInputMethod = ::std::os::raw::c_int;
pub const VROverlayTransformType_VROverlayTransform_Absolute: VROverlayTransformType = 0;
pub const VROverlayTransformType_VROverlayTransform_TrackedDeviceRelative: VROverlayTransformType =
    1;
pub const VROverlayTransformType_VROverlayTransform_SystemOverlay: VROverlayTransformType = 2;
pub const VROverlayTransformType_VROverlayTransform_TrackedComponent: VROverlayTransformType = 3;
pub type VROverlayTransformType = ::std::os::raw::c_int;
pub const VROverlayFlags_None: VROverlayFlags = 0;
pub const VROverlayFlags_Curved: VROverlayFlags = 1;
pub const VROverlayFlags_RGSS4X: VROverlayFlags = 2;
pub const VROverlayFlags_NoDashboardTab: VROverlayFlags = 3;
pub const VROverlayFlags_AcceptsGamepadEvents: VROverlayFlags = 4;
pub const VROverlayFlags_ShowGamepadFocus: VROverlayFlags = 5;
pub const VROverlayFlags_SendVRDiscreteScrollEvents: VROverlayFlags = 6;
pub const VROverlayFlags_SendVRTouchpadEvents: VROverlayFlags = 7;
pub const VROverlayFlags_ShowTouchPadScrollWheel: VROverlayFlags = 8;
pub const VROverlayFlags_TransferOwnershipToInternalProcess: VROverlayFlags = 9;
pub const VROverlayFlags_SideBySide_Parallel: VROverlayFlags = 10;
pub const VROverlayFlags_SideBySide_Crossed: VROverlayFlags = 11;
pub const VROverlayFlags_Panorama: VROverlayFlags = 12;
pub const VROverlayFlags_StereoPanorama: VROverlayFlags = 13;
pub const VROverlayFlags_SortWithNonSceneOverlays: VROverlayFlags = 14;
pub const VROverlayFlags_VisibleInDashboard: VROverlayFlags = 15;
pub const VROverlayFlags_MakeOverlaysInteractiveIfVisible: VROverlayFlags = 16;
pub const VROverlayFlags_SendVRSmoothScrollEvents: VROverlayFlags = 17;
pub type VROverlayFlags = ::std::os::raw::c_int;
pub const VRMessageOverlayResponse_ButtonPress_0: VRMessageOverlayResponse = 0;
pub const VRMessageOverlayResponse_ButtonPress_1: VRMessageOverlayResponse = 1;
pub const VRMessageOverlayResponse_ButtonPress_2: VRMessageOverlayResponse = 2;
pub const VRMessageOverlayResponse_ButtonPress_3: VRMessageOverlayResponse = 3;
pub const VRMessageOverlayResponse_CouldntFindSystemOverlay: VRMessageOverlayResponse = 4;
pub const VRMessageOverlayResponse_CouldntFindOrCreateClientOverlay: VRMessageOverlayResponse = 5;
pub const VRMessageOverlayResponse_ApplicationQuit: VRMessageOverlayResponse = 6;
pub type VRMessageOverlayResponse = ::std::os::raw::c_int;
pub const EGamepadTextInputMode_k_EGamepadTextInputModeNormal: EGamepadTextInputMode = 0;
pub const EGamepadTextInputMode_k_EGamepadTextInputModePassword: EGamepadTextInputMode = 1;
pub const EGamepadTextInputMode_k_EGamepadTextInputModeSubmit: EGamepadTextInputMode = 2;
pub type EGamepadTextInputMode = ::std::os::raw::c_int;
pub const EGamepadTextInputLineMode_k_EGamepadTextInputLineModeSingleLine:
    EGamepadTextInputLineMode = 0;
pub const EGamepadTextInputLineMode_k_EGamepadTextInputLineModeMultipleLines:
    EGamepadTextInputLineMode = 1;
pub type EGamepadTextInputLineMode = ::std::os::raw::c_int;
pub const EOverlayDirection_OverlayDirection_Up: EOverlayDirection = 0;
pub const EOverlayDirection_OverlayDirection_Down: EOverlayDirection = 1;
pub const EOverlayDirection_OverlayDirection_Left: EOverlayDirection = 2;
pub const EOverlayDirection_OverlayDirection_Right: EOverlayDirection = 3;
pub const EOverlayDirection_OverlayDirection_Count: EOverlayDirection = 4;
pub type EOverlayDirection = ::std::os::raw::c_int;
pub const EVROverlayIntersectionMaskPrimitiveType_OverlayIntersectionPrimitiveType_Rectangle:
    EVROverlayIntersectionMaskPrimitiveType = 0;
pub const EVROverlayIntersectionMaskPrimitiveType_OverlayIntersectionPrimitiveType_Circle:
    EVROverlayIntersectionMaskPrimitiveType = 1;
pub type EVROverlayIntersectionMaskPrimitiveType = ::std::os::raw::c_int;
pub const EVRRenderModelError_VRRenderModelError_None: EVRRenderModelError = 0;
pub const EVRRenderModelError_VRRenderModelError_Loading: EVRRenderModelError = 100;
pub const EVRRenderModelError_VRRenderModelError_NotSupported: EVRRenderModelError = 200;
pub const EVRRenderModelError_VRRenderModelError_InvalidArg: EVRRenderModelError = 300;
pub const EVRRenderModelError_VRRenderModelError_InvalidModel: EVRRenderModelError = 301;
pub const EVRRenderModelError_VRRenderModelError_NoShapes: EVRRenderModelError = 302;
pub const EVRRenderModelError_VRRenderModelError_MultipleShapes: EVRRenderModelError = 303;
pub const EVRRenderModelError_VRRenderModelError_TooManyVertices: EVRRenderModelError = 304;
pub const EVRRenderModelError_VRRenderModelError_MultipleTextures: EVRRenderModelError = 305;
pub const EVRRenderModelError_VRRenderModelError_BufferTooSmall: EVRRenderModelError = 306;
pub const EVRRenderModelError_VRRenderModelError_NotEnoughNormals: EVRRenderModelError = 307;
pub const EVRRenderModelError_VRRenderModelError_NotEnoughTexCoords: EVRRenderModelError = 308;
pub const EVRRenderModelError_VRRenderModelError_InvalidTexture: EVRRenderModelError = 400;
pub type EVRRenderModelError = ::std::os::raw::c_int;
pub const EVRComponentProperty_VRComponentProperty_IsStatic: EVRComponentProperty = 1;
pub const EVRComponentProperty_VRComponentProperty_IsVisible: EVRComponentProperty = 2;
pub const EVRComponentProperty_VRComponentProperty_IsTouched: EVRComponentProperty = 4;
pub const EVRComponentProperty_VRComponentProperty_IsPressed: EVRComponentProperty = 8;
pub const EVRComponentProperty_VRComponentProperty_IsScrolled: EVRComponentProperty = 16;
pub type EVRComponentProperty = ::std::os::raw::c_int;
pub const EVRNotificationType_Transient: EVRNotificationType = 0;
pub const EVRNotificationType_Persistent: EVRNotificationType = 1;
pub const EVRNotificationType_Transient_SystemWithUserValue: EVRNotificationType = 2;
pub type EVRNotificationType = ::std::os::raw::c_int;
pub const EVRNotificationStyle_None: EVRNotificationStyle = 0;
pub const EVRNotificationStyle_Application: EVRNotificationStyle = 100;
pub const EVRNotificationStyle_Contact_Disabled: EVRNotificationStyle = 200;
pub const EVRNotificationStyle_Contact_Enabled: EVRNotificationStyle = 201;
pub const EVRNotificationStyle_Contact_Active: EVRNotificationStyle = 202;
pub type EVRNotificationStyle = ::std::os::raw::c_int;
pub const EVRSettingsError_VRSettingsError_None: EVRSettingsError = 0;
pub const EVRSettingsError_VRSettingsError_IPCFailed: EVRSettingsError = 1;
pub const EVRSettingsError_VRSettingsError_WriteFailed: EVRSettingsError = 2;
pub const EVRSettingsError_VRSettingsError_ReadFailed: EVRSettingsError = 3;
pub const EVRSettingsError_VRSettingsError_JsonParseFailed: EVRSettingsError = 4;
pub const EVRSettingsError_VRSettingsError_UnsetSettingHasNoDefault: EVRSettingsError = 5;
pub type EVRSettingsError = ::std::os::raw::c_int;
pub const EVRScreenshotError_VRScreenshotError_None: EVRScreenshotError = 0;
pub const EVRScreenshotError_VRScreenshotError_RequestFailed: EVRScreenshotError = 1;
pub const EVRScreenshotError_VRScreenshotError_IncompatibleVersion: EVRScreenshotError = 100;
pub const EVRScreenshotError_VRScreenshotError_NotFound: EVRScreenshotError = 101;
pub const EVRScreenshotError_VRScreenshotError_BufferTooSmall: EVRScreenshotError = 102;
pub const EVRScreenshotError_VRScreenshotError_ScreenshotAlreadyInProgress: EVRScreenshotError =
    108;
pub type EVRScreenshotError = ::std::os::raw::c_int;
pub const EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Model: EVRSkeletalTransformSpace = 0;
pub const EVRSkeletalTransformSpace_VRSkeletalTransformSpace_Parent: EVRSkeletalTransformSpace = 1;
pub type EVRSkeletalTransformSpace = ::std::os::raw::c_int;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_BindPose: EVRSkeletalReferencePose = 0;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_OpenHand: EVRSkeletalReferencePose = 1;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_Fist: EVRSkeletalReferencePose = 2;
pub const EVRSkeletalReferencePose_VRSkeletalReferencePose_GripLimit: EVRSkeletalReferencePose = 3;
pub type EVRSkeletalReferencePose = ::std::os::raw::c_int;
pub const EVRFinger_VRFinger_Thumb: EVRFinger = 0;
pub const EVRFinger_VRFinger_Index: EVRFinger = 1;
pub const EVRFinger_VRFinger_Middle: EVRFinger = 2;
pub const EVRFinger_VRFinger_Ring: EVRFinger = 3;
pub const EVRFinger_VRFinger_Pinky: EVRFinger = 4;
pub const EVRFinger_VRFinger_Count: EVRFinger = 5;
pub type EVRFinger = ::std::os::raw::c_int;
pub const EVRFingerSplay_VRFingerSplay_Thumb_Index: EVRFingerSplay = 0;
pub const EVRFingerSplay_VRFingerSplay_Index_Middle: EVRFingerSplay = 1;
pub const EVRFingerSplay_VRFingerSplay_Middle_Ring: EVRFingerSplay = 2;
pub const EVRFingerSplay_VRFingerSplay_Ring_Pinky: EVRFingerSplay = 3;
pub const EVRFingerSplay_VRFingerSplay_Count: EVRFingerSplay = 4;
pub type EVRFingerSplay = ::std::os::raw::c_int;
pub const EVRSummaryType_VRSummaryType_FromAnimation: EVRSummaryType = 0;
pub const EVRSummaryType_VRSummaryType_FromDevice: EVRSummaryType = 1;
pub type EVRSummaryType = ::std::os::raw::c_int;
pub const EVRInputFilterCancelType_VRInputFilterCancel_Timers: EVRInputFilterCancelType = 0;
pub const EVRInputFilterCancelType_VRInputFilterCancel_Momentum: EVRInputFilterCancelType = 1;
pub type EVRInputFilterCancelType = ::std::os::raw::c_int;
pub const EVRInputStringBits_VRInputString_Hand: EVRInputStringBits = 1;
pub const EVRInputStringBits_VRInputString_ControllerType: EVRInputStringBits = 2;
pub const EVRInputStringBits_VRInputString_InputSource: EVRInputStringBits = 4;
pub const EVRInputStringBits_VRInputString_All: EVRInputStringBits = -1;
pub type EVRInputStringBits = ::std::os::raw::c_int;
pub const EIOBufferError_IOBuffer_Success: EIOBufferError = 0;
pub const EIOBufferError_IOBuffer_OperationFailed: EIOBufferError = 100;
pub const EIOBufferError_IOBuffer_InvalidHandle: EIOBufferError = 101;
pub const EIOBufferError_IOBuffer_InvalidArgument: EIOBufferError = 102;
pub const EIOBufferError_IOBuffer_PathExists: EIOBufferError = 103;
pub const EIOBufferError_IOBuffer_PathDoesNotExist: EIOBufferError = 104;
pub const EIOBufferError_IOBuffer_Permission: EIOBufferError = 105;
pub type EIOBufferError = ::std::os::raw::c_int;
pub const EIOBufferMode_IOBufferMode_Read: EIOBufferMode = 1;
pub const EIOBufferMode_IOBufferMode_Write: EIOBufferMode = 2;
pub const EIOBufferMode_IOBufferMode_Create: EIOBufferMode = 512;
pub type EIOBufferMode = ::std::os::raw::c_int;
pub type TrackedDeviceIndex_t = u32;
pub type VRNotificationId = u32;
pub type VROverlayHandle_t = u64;
pub type SpatialAnchorHandle_t = u32;
pub type glSharedTextureHandle_t = *mut ::std::os::raw::c_void;
pub type glInt_t = i32;
pub type glUInt_t = u32;
pub type SharedTextureHandle_t = u64;
pub type DriverId_t = u32;
pub type WebConsoleHandle_t = u64;
pub type DriverHandle_t = PropertyContainerHandle_t;
pub type BoneIndex_t = i32;
pub type TrackedCameraHandle_t = u64;
pub type ScreenshotHandle_t = u32;
pub type VRComponentProperties = u32;
pub type TextureID_t = i32;
pub type IOBufferHandle_t = u64;
pub use self::{
    ECollisionBoundsStyle as CollisionBoundsStyle_t, EColorSpace as ColorSpace,
    ETrackedDeviceClass as TrackedDeviceClass, ETrackedDeviceProperty as TrackedDeviceProperty,
    ETrackedPropertyError as TrackedPropertyError, ETrackingResult as HmdTrackingResult,
    ETrackingUniverseOrigin as TrackingUniverseOrigin, EVRCompositorError as VRCompositorError,
    EVREye as Hmd_Eye, EVRFirmwareError as VRFirmwareError, EVRInitError as HmdError,
    EVROverlayError as VROverlayError, EVRScreenshotError as VRScreenshotsError,
    EVRState as VRState_t, EVRSubmitFlags as VRSubmitFlags_t,
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix34_t {
    pub m: [[f32; 4usize]; 3usize],
}
#[test]
fn bindgen_test_layout_HmdMatrix34_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdMatrix34_t>(),
        48usize,
        concat!("Size of: ", stringify!(HmdMatrix34_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdMatrix34_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdMatrix34_t))
    );
    fn test_field_m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdMatrix34_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdMatrix34_t),
                "::",
                stringify!(m)
            )
        );
    }
    test_field_m();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix33_t {
    pub m: [[f32; 3usize]; 3usize],
}
#[test]
fn bindgen_test_layout_HmdMatrix33_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdMatrix33_t>(),
        36usize,
        concat!("Size of: ", stringify!(HmdMatrix33_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdMatrix33_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdMatrix33_t))
    );
    fn test_field_m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdMatrix33_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdMatrix33_t),
                "::",
                stringify!(m)
            )
        );
    }
    test_field_m();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdMatrix44_t {
    pub m: [[f32; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_HmdMatrix44_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdMatrix44_t>(),
        64usize,
        concat!("Size of: ", stringify!(HmdMatrix44_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdMatrix44_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdMatrix44_t))
    );
    fn test_field_m() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdMatrix44_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdMatrix44_t),
                "::",
                stringify!(m)
            )
        );
    }
    test_field_m();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector3_t {
    pub v: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_HmdVector3_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdVector3_t>(),
        12usize,
        concat!("Size of: ", stringify!(HmdVector3_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdVector3_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdVector3_t))
    );
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdVector3_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdVector3_t),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector4_t {
    pub v: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_HmdVector4_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdVector4_t>(),
        16usize,
        concat!("Size of: ", stringify!(HmdVector4_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdVector4_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdVector4_t))
    );
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdVector4_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdVector4_t),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector3d_t {
    pub v: [f64; 3usize],
}
#[test]
fn bindgen_test_layout_HmdVector3d_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdVector3d_t>(),
        24usize,
        concat!("Size of: ", stringify!(HmdVector3d_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdVector3d_t>(),
        8usize,
        concat!("Alignment of ", stringify!(HmdVector3d_t))
    );
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdVector3d_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdVector3d_t),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdVector2_t {
    pub v: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_HmdVector2_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdVector2_t>(),
        8usize,
        concat!("Size of: ", stringify!(HmdVector2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdVector2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdVector2_t))
    );
    fn test_field_v() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdVector2_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdVector2_t),
                "::",
                stringify!(v)
            )
        );
    }
    test_field_v();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuaternion_t {
    pub w: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_HmdQuaternion_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdQuaternion_t>(),
        32usize,
        concat!("Size of: ", stringify!(HmdQuaternion_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdQuaternion_t>(),
        8usize,
        concat!("Alignment of ", stringify!(HmdQuaternion_t))
    );
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuaternion_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuaternion_t),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuaternion_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuaternion_t),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuaternion_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuaternion_t),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuaternion_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuaternion_t),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuaternionf_t {
    pub w: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
}
#[test]
fn bindgen_test_layout_HmdQuaternionf_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdQuaternionf_t>(),
        16usize,
        concat!("Size of: ", stringify!(HmdQuaternionf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdQuaternionf_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdQuaternionf_t))
    );
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuaternionf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuaternionf_t),
                "::",
                stringify!(w)
            )
        );
    }
    test_field_w();
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuaternionf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuaternionf_t),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuaternionf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuaternionf_t),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuaternionf_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuaternionf_t),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdColor_t {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_HmdColor_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdColor_t>(),
        16usize,
        concat!("Size of: ", stringify!(HmdColor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdColor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdColor_t))
    );
    fn test_field_r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdColor_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdColor_t),
                "::",
                stringify!(r)
            )
        );
    }
    test_field_r();
    fn test_field_g() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdColor_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdColor_t),
                "::",
                stringify!(g)
            )
        );
    }
    test_field_g();
    fn test_field_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdColor_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdColor_t),
                "::",
                stringify!(b)
            )
        );
    }
    test_field_b();
    fn test_field_a() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdColor_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdColor_t),
                "::",
                stringify!(a)
            )
        );
    }
    test_field_a();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdQuad_t {
    pub vCorners: [HmdVector3_t; 4usize],
}
#[test]
fn bindgen_test_layout_HmdQuad_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdQuad_t>(),
        48usize,
        concat!("Size of: ", stringify!(HmdQuad_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdQuad_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdQuad_t))
    );
    fn test_field_vCorners() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdQuad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vCorners) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdQuad_t),
                "::",
                stringify!(vCorners)
            )
        );
    }
    test_field_vCorners();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HmdRect2_t {
    pub vTopLeft: HmdVector2_t,
    pub vBottomRight: HmdVector2_t,
}
#[test]
fn bindgen_test_layout_HmdRect2_t() {
    assert_eq!(
        ::std::mem::size_of::<HmdRect2_t>(),
        16usize,
        concat!("Size of: ", stringify!(HmdRect2_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HmdRect2_t>(),
        4usize,
        concat!("Alignment of ", stringify!(HmdRect2_t))
    );
    fn test_field_vTopLeft() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdRect2_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vTopLeft) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdRect2_t),
                "::",
                stringify!(vTopLeft)
            )
        );
    }
    test_field_vTopLeft();
    fn test_field_vBottomRight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HmdRect2_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vBottomRight) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HmdRect2_t),
                "::",
                stringify!(vBottomRight)
            )
        );
    }
    test_field_vBottomRight();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DistortionCoordinates_t {
    pub rfRed: [f32; 2usize],
    pub rfGreen: [f32; 2usize],
    pub rfBlue: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_DistortionCoordinates_t() {
    assert_eq!(
        ::std::mem::size_of::<DistortionCoordinates_t>(),
        24usize,
        concat!("Size of: ", stringify!(DistortionCoordinates_t))
    );
    assert_eq!(
        ::std::mem::align_of::<DistortionCoordinates_t>(),
        4usize,
        concat!("Alignment of ", stringify!(DistortionCoordinates_t))
    );
    fn test_field_rfRed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DistortionCoordinates_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rfRed) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(DistortionCoordinates_t),
                "::",
                stringify!(rfRed)
            )
        );
    }
    test_field_rfRed();
    fn test_field_rfGreen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DistortionCoordinates_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rfGreen) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(DistortionCoordinates_t),
                "::",
                stringify!(rfGreen)
            )
        );
    }
    test_field_rfGreen();
    fn test_field_rfBlue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DistortionCoordinates_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rfBlue) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(DistortionCoordinates_t),
                "::",
                stringify!(rfBlue)
            )
        );
    }
    test_field_rfBlue();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
}
#[test]
fn bindgen_test_layout_Texture_t() {
    assert_eq!(
        ::std::mem::size_of::<Texture_t>(),
        16usize,
        concat!("Size of: ", stringify!(Texture_t))
    );
    assert_eq!(
        ::std::mem::align_of::<Texture_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Texture_t))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Texture_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Texture_t),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_eType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Texture_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eType) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Texture_t),
                "::",
                stringify!(eType)
            )
        );
    }
    test_field_eType();
    fn test_field_eColorSpace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Texture_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eColorSpace) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(Texture_t),
                "::",
                stringify!(eColorSpace)
            )
        );
    }
    test_field_eColorSpace();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TrackedDevicePose_t {
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
    pub vVelocity: HmdVector3_t,
    pub vAngularVelocity: HmdVector3_t,
    pub eTrackingResult: ETrackingResult,
    pub bPoseIsValid: bool,
    pub bDeviceIsConnected: bool,
}
#[test]
fn bindgen_test_layout_TrackedDevicePose_t() {
    assert_eq!(
        ::std::mem::size_of::<TrackedDevicePose_t>(),
        80usize,
        concat!("Size of: ", stringify!(TrackedDevicePose_t))
    );
    assert_eq!(
        ::std::mem::align_of::<TrackedDevicePose_t>(),
        4usize,
        concat!("Alignment of ", stringify!(TrackedDevicePose_t))
    );
    fn test_field_mDeviceToAbsoluteTracking() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TrackedDevicePose_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mDeviceToAbsoluteTracking) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TrackedDevicePose_t),
                "::",
                stringify!(mDeviceToAbsoluteTracking)
            )
        );
    }
    test_field_mDeviceToAbsoluteTracking();
    fn test_field_vVelocity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TrackedDevicePose_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vVelocity) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(TrackedDevicePose_t),
                "::",
                stringify!(vVelocity)
            )
        );
    }
    test_field_vVelocity();
    fn test_field_vAngularVelocity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TrackedDevicePose_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vAngularVelocity) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(TrackedDevicePose_t),
                "::",
                stringify!(vAngularVelocity)
            )
        );
    }
    test_field_vAngularVelocity();
    fn test_field_eTrackingResult() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TrackedDevicePose_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eTrackingResult) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(TrackedDevicePose_t),
                "::",
                stringify!(eTrackingResult)
            )
        );
    }
    test_field_eTrackingResult();
    fn test_field_bPoseIsValid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TrackedDevicePose_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bPoseIsValid) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(TrackedDevicePose_t),
                "::",
                stringify!(bPoseIsValid)
            )
        );
    }
    test_field_bPoseIsValid();
    fn test_field_bDeviceIsConnected() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TrackedDevicePose_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bDeviceIsConnected) as usize - ptr as usize
            },
            77usize,
            concat!(
                "Offset of field: ",
                stringify!(TrackedDevicePose_t),
                "::",
                stringify!(bDeviceIsConnected)
            )
        );
    }
    test_field_bDeviceIsConnected();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureBounds_t {
    pub uMin: f32,
    pub vMin: f32,
    pub uMax: f32,
    pub vMax: f32,
}
#[test]
fn bindgen_test_layout_VRTextureBounds_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureBounds_t>(),
        16usize,
        concat!("Size of: ", stringify!(VRTextureBounds_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureBounds_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRTextureBounds_t))
    );
    fn test_field_uMin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureBounds_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uMin) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureBounds_t),
                "::",
                stringify!(uMin)
            )
        );
    }
    test_field_uMin();
    fn test_field_vMin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureBounds_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vMin) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureBounds_t),
                "::",
                stringify!(vMin)
            )
        );
    }
    test_field_vMin();
    fn test_field_uMax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureBounds_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uMax) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureBounds_t),
                "::",
                stringify!(uMax)
            )
        );
    }
    test_field_uMax();
    fn test_field_vMax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureBounds_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vMax) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureBounds_t),
                "::",
                stringify!(vMax)
            )
        );
    }
    test_field_vMax();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithPose_t {
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
}
#[test]
fn bindgen_test_layout_VRTextureWithPose_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureWithPose_t>(),
        48usize,
        concat!("Size of: ", stringify!(VRTextureWithPose_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureWithPose_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRTextureWithPose_t))
    );
    fn test_field_mDeviceToAbsoluteTracking() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureWithPose_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mDeviceToAbsoluteTracking) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureWithPose_t),
                "::",
                stringify!(mDeviceToAbsoluteTracking)
            )
        );
    }
    test_field_mDeviceToAbsoluteTracking();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureDepthInfo_t {
    pub handle: *mut ::std::os::raw::c_void,
    pub mProjection: HmdMatrix44_t,
    pub vRange: HmdVector2_t,
}
#[test]
fn bindgen_test_layout_VRTextureDepthInfo_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureDepthInfo_t>(),
        80usize,
        concat!("Size of: ", stringify!(VRTextureDepthInfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureDepthInfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRTextureDepthInfo_t))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureDepthInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureDepthInfo_t),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_mProjection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureDepthInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mProjection) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureDepthInfo_t),
                "::",
                stringify!(mProjection)
            )
        );
    }
    test_field_mProjection();
    fn test_field_vRange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureDepthInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vRange) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureDepthInfo_t),
                "::",
                stringify!(vRange)
            )
        );
    }
    test_field_vRange();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithDepth_t {
    pub depth: VRTextureDepthInfo_t,
}
#[test]
fn bindgen_test_layout_VRTextureWithDepth_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureWithDepth_t>(),
        80usize,
        concat!("Size of: ", stringify!(VRTextureWithDepth_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureWithDepth_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRTextureWithDepth_t))
    );
    fn test_field_depth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureWithDepth_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureWithDepth_t),
                "::",
                stringify!(depth)
            )
        );
    }
    test_field_depth();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithPoseAndDepth_t {
    pub depth: VRTextureDepthInfo_t,
}
#[test]
fn bindgen_test_layout_VRTextureWithPoseAndDepth_t() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureWithPoseAndDepth_t>(),
        80usize,
        concat!("Size of: ", stringify!(VRTextureWithPoseAndDepth_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureWithPoseAndDepth_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRTextureWithPoseAndDepth_t))
    );
    fn test_field_depth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureWithPoseAndDepth_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureWithPoseAndDepth_t),
                "::",
                stringify!(depth)
            )
        );
    }
    test_field_depth();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRVulkanTextureData_t {
    pub m_nImage: u64,
    pub m_pDevice: *mut VkDevice_T,
    pub m_pPhysicalDevice: *mut VkPhysicalDevice_T,
    pub m_pInstance: *mut VkInstance_T,
    pub m_pQueue: *mut VkQueue_T,
    pub m_nQueueFamilyIndex: u32,
    pub m_nWidth: u32,
    pub m_nHeight: u32,
    pub m_nFormat: u32,
    pub m_nSampleCount: u32,
}
#[test]
fn bindgen_test_layout_VRVulkanTextureData_t() {
    assert_eq!(
        ::std::mem::size_of::<VRVulkanTextureData_t>(),
        64usize,
        concat!("Size of: ", stringify!(VRVulkanTextureData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRVulkanTextureData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRVulkanTextureData_t))
    );
    fn test_field_m_nImage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nImage) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_nImage)
            )
        );
    }
    test_field_m_nImage();
    fn test_field_m_pDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pDevice) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_pDevice)
            )
        );
    }
    test_field_m_pDevice();
    fn test_field_m_pPhysicalDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pPhysicalDevice) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_pPhysicalDevice)
            )
        );
    }
    test_field_m_pPhysicalDevice();
    fn test_field_m_pInstance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pInstance) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_pInstance)
            )
        );
    }
    test_field_m_pInstance();
    fn test_field_m_pQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pQueue) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_pQueue)
            )
        );
    }
    test_field_m_pQueue();
    fn test_field_m_nQueueFamilyIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nQueueFamilyIndex) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_nQueueFamilyIndex)
            )
        );
    }
    test_field_m_nQueueFamilyIndex();
    fn test_field_m_nWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nWidth) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_nWidth)
            )
        );
    }
    test_field_m_nWidth();
    fn test_field_m_nHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nHeight) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_nHeight)
            )
        );
    }
    test_field_m_nHeight();
    fn test_field_m_nFormat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nFormat) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_nFormat)
            )
        );
    }
    test_field_m_nFormat();
    fn test_field_m_nSampleCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRVulkanTextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nSampleCount) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VRVulkanTextureData_t),
                "::",
                stringify!(m_nSampleCount)
            )
        );
    }
    test_field_m_nSampleCount();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct D3D12TextureData_t {
    pub m_pResource: *mut ID3D12Resource,
    pub m_pCommandQueue: *mut ID3D12CommandQueue,
    pub m_nNodeMask: u32,
}
#[test]
fn bindgen_test_layout_D3D12TextureData_t() {
    assert_eq!(
        ::std::mem::size_of::<D3D12TextureData_t>(),
        24usize,
        concat!("Size of: ", stringify!(D3D12TextureData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<D3D12TextureData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(D3D12TextureData_t))
    );
    fn test_field_m_pResource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12TextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pResource) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12TextureData_t),
                "::",
                stringify!(m_pResource)
            )
        );
    }
    test_field_m_pResource();
    fn test_field_m_pCommandQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12TextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pCommandQueue) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12TextureData_t),
                "::",
                stringify!(m_pCommandQueue)
            )
        );
    }
    test_field_m_pCommandQueue();
    fn test_field_m_nNodeMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<D3D12TextureData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNodeMask) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(D3D12TextureData_t),
                "::",
                stringify!(m_nNodeMask)
            )
        );
    }
    test_field_m_nNodeMask();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Controller_t {
    pub button: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Controller_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Controller_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_Controller_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Controller_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Controller_t))
    );
    fn test_field_button() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Controller_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Controller_t),
                "::",
                stringify!(button)
            )
        );
    }
    test_field_button();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Mouse_t {
    pub x: f32,
    pub y: f32,
    pub button: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Mouse_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Mouse_t>(),
        12usize,
        concat!("Size of: ", stringify!(VREvent_Mouse_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Mouse_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Mouse_t))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Mouse_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Mouse_t),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Mouse_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Mouse_t),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_button() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Mouse_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Mouse_t),
                "::",
                stringify!(button)
            )
        );
    }
    test_field_button();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Scroll_t {
    pub xdelta: f32,
    pub ydelta: f32,
    pub unused: u32,
    pub viewportscale: f32,
}
#[test]
fn bindgen_test_layout_VREvent_Scroll_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Scroll_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Scroll_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Scroll_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Scroll_t))
    );
    fn test_field_xdelta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Scroll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xdelta) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Scroll_t),
                "::",
                stringify!(xdelta)
            )
        );
    }
    test_field_xdelta();
    fn test_field_ydelta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Scroll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ydelta) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Scroll_t),
                "::",
                stringify!(ydelta)
            )
        );
    }
    test_field_ydelta();
    fn test_field_unused() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Scroll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unused) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Scroll_t),
                "::",
                stringify!(unused)
            )
        );
    }
    test_field_unused();
    fn test_field_viewportscale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Scroll_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).viewportscale) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Scroll_t),
                "::",
                stringify!(viewportscale)
            )
        );
    }
    test_field_viewportscale();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_TouchPadMove_t {
    pub bFingerDown: bool,
    pub flSecondsFingerDown: f32,
    pub fValueXFirst: f32,
    pub fValueYFirst: f32,
    pub fValueXRaw: f32,
    pub fValueYRaw: f32,
}
#[test]
fn bindgen_test_layout_VREvent_TouchPadMove_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_TouchPadMove_t>(),
        24usize,
        concat!("Size of: ", stringify!(VREvent_TouchPadMove_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_TouchPadMove_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_TouchPadMove_t))
    );
    fn test_field_bFingerDown() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_TouchPadMove_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bFingerDown) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_TouchPadMove_t),
                "::",
                stringify!(bFingerDown)
            )
        );
    }
    test_field_bFingerDown();
    fn test_field_flSecondsFingerDown() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_TouchPadMove_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flSecondsFingerDown) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_TouchPadMove_t),
                "::",
                stringify!(flSecondsFingerDown)
            )
        );
    }
    test_field_flSecondsFingerDown();
    fn test_field_fValueXFirst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_TouchPadMove_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fValueXFirst) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_TouchPadMove_t),
                "::",
                stringify!(fValueXFirst)
            )
        );
    }
    test_field_fValueXFirst();
    fn test_field_fValueYFirst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_TouchPadMove_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fValueYFirst) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_TouchPadMove_t),
                "::",
                stringify!(fValueYFirst)
            )
        );
    }
    test_field_fValueYFirst();
    fn test_field_fValueXRaw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_TouchPadMove_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fValueXRaw) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_TouchPadMove_t),
                "::",
                stringify!(fValueXRaw)
            )
        );
    }
    test_field_fValueXRaw();
    fn test_field_fValueYRaw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_TouchPadMove_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fValueYRaw) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_TouchPadMove_t),
                "::",
                stringify!(fValueYRaw)
            )
        );
    }
    test_field_fValueYRaw();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Notification_t {
    pub ulUserValue: u64,
    pub notificationId: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Notification_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Notification_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Notification_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Notification_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Notification_t))
    );
    fn test_field_ulUserValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Notification_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulUserValue) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Notification_t),
                "::",
                stringify!(ulUserValue)
            )
        );
    }
    test_field_ulUserValue();
    fn test_field_notificationId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Notification_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).notificationId) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Notification_t),
                "::",
                stringify!(notificationId)
            )
        );
    }
    test_field_notificationId();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Process_t {
    pub pid: u32,
    pub oldPid: u32,
    pub bForced: bool,
    pub bConnectionLost: bool,
}
#[test]
fn bindgen_test_layout_VREvent_Process_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Process_t>(),
        12usize,
        concat!("Size of: ", stringify!(VREvent_Process_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Process_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Process_t))
    );
    fn test_field_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Process_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Process_t),
                "::",
                stringify!(pid)
            )
        );
    }
    test_field_pid();
    fn test_field_oldPid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Process_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).oldPid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Process_t),
                "::",
                stringify!(oldPid)
            )
        );
    }
    test_field_oldPid();
    fn test_field_bForced() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Process_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bForced) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Process_t),
                "::",
                stringify!(bForced)
            )
        );
    }
    test_field_bForced();
    fn test_field_bConnectionLost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Process_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bConnectionLost) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Process_t),
                "::",
                stringify!(bConnectionLost)
            )
        );
    }
    test_field_bConnectionLost();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Overlay_t {
    pub overlayHandle: u64,
    pub devicePath: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Overlay_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Overlay_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Overlay_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Overlay_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Overlay_t))
    );
    fn test_field_overlayHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Overlay_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overlayHandle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Overlay_t),
                "::",
                stringify!(overlayHandle)
            )
        );
    }
    test_field_overlayHandle();
    fn test_field_devicePath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Overlay_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devicePath) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Overlay_t),
                "::",
                stringify!(devicePath)
            )
        );
    }
    test_field_devicePath();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Status_t {
    pub statusState: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Status_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Status_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_Status_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Status_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Status_t))
    );
    fn test_field_statusState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Status_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).statusState) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Status_t),
                "::",
                stringify!(statusState)
            )
        );
    }
    test_field_statusState();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Keyboard_t {
    pub cNewInput: [::std::os::raw::c_char; 8usize],
    pub uUserValue: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Keyboard_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Keyboard_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Keyboard_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Keyboard_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Keyboard_t))
    );
    fn test_field_cNewInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Keyboard_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cNewInput) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Keyboard_t),
                "::",
                stringify!(cNewInput)
            )
        );
    }
    test_field_cNewInput();
    fn test_field_uUserValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Keyboard_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uUserValue) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Keyboard_t),
                "::",
                stringify!(uUserValue)
            )
        );
    }
    test_field_uUserValue();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Ipd_t {
    pub ipdMeters: f32,
}
#[test]
fn bindgen_test_layout_VREvent_Ipd_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Ipd_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_Ipd_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Ipd_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Ipd_t))
    );
    fn test_field_ipdMeters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Ipd_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ipdMeters) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Ipd_t),
                "::",
                stringify!(ipdMeters)
            )
        );
    }
    test_field_ipdMeters();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Chaperone_t {
    pub m_nPreviousUniverse: u64,
    pub m_nCurrentUniverse: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Chaperone_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Chaperone_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Chaperone_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Chaperone_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Chaperone_t))
    );
    fn test_field_m_nPreviousUniverse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Chaperone_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nPreviousUniverse) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Chaperone_t),
                "::",
                stringify!(m_nPreviousUniverse)
            )
        );
    }
    test_field_m_nPreviousUniverse();
    fn test_field_m_nCurrentUniverse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Chaperone_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nCurrentUniverse) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Chaperone_t),
                "::",
                stringify!(m_nCurrentUniverse)
            )
        );
    }
    test_field_m_nCurrentUniverse();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Reserved_t {
    pub reserved0: u64,
    pub reserved1: u64,
    pub reserved2: u64,
    pub reserved3: u64,
    pub reserved4: u64,
    pub reserved5: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Reserved_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Reserved_t>(),
        48usize,
        concat!("Size of: ", stringify!(VREvent_Reserved_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Reserved_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Reserved_t))
    );
    fn test_field_reserved0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Reserved_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Reserved_t),
                "::",
                stringify!(reserved0)
            )
        );
    }
    test_field_reserved0();
    fn test_field_reserved1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Reserved_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Reserved_t),
                "::",
                stringify!(reserved1)
            )
        );
    }
    test_field_reserved1();
    fn test_field_reserved2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Reserved_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Reserved_t),
                "::",
                stringify!(reserved2)
            )
        );
    }
    test_field_reserved2();
    fn test_field_reserved3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Reserved_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Reserved_t),
                "::",
                stringify!(reserved3)
            )
        );
    }
    test_field_reserved3();
    fn test_field_reserved4() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Reserved_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved4) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Reserved_t),
                "::",
                stringify!(reserved4)
            )
        );
    }
    test_field_reserved4();
    fn test_field_reserved5() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Reserved_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved5) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Reserved_t),
                "::",
                stringify!(reserved5)
            )
        );
    }
    test_field_reserved5();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_PerformanceTest_t {
    pub m_nFidelityLevel: u32,
}
#[test]
fn bindgen_test_layout_VREvent_PerformanceTest_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_PerformanceTest_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_PerformanceTest_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_PerformanceTest_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_PerformanceTest_t))
    );
    fn test_field_m_nFidelityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_PerformanceTest_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nFidelityLevel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_PerformanceTest_t),
                "::",
                stringify!(m_nFidelityLevel)
            )
        );
    }
    test_field_m_nFidelityLevel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_SeatedZeroPoseReset_t {
    pub bResetBySystemMenu: bool,
}
#[test]
fn bindgen_test_layout_VREvent_SeatedZeroPoseReset_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_SeatedZeroPoseReset_t>(),
        1usize,
        concat!("Size of: ", stringify!(VREvent_SeatedZeroPoseReset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_SeatedZeroPoseReset_t>(),
        1usize,
        concat!("Alignment of ", stringify!(VREvent_SeatedZeroPoseReset_t))
    );
    fn test_field_bResetBySystemMenu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_SeatedZeroPoseReset_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bResetBySystemMenu) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_SeatedZeroPoseReset_t),
                "::",
                stringify!(bResetBySystemMenu)
            )
        );
    }
    test_field_bResetBySystemMenu();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Screenshot_t {
    pub handle: u32,
    pub type_: u32,
}
#[test]
fn bindgen_test_layout_VREvent_Screenshot_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Screenshot_t>(),
        8usize,
        concat!("Size of: ", stringify!(VREvent_Screenshot_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Screenshot_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_Screenshot_t))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Screenshot_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Screenshot_t),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Screenshot_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Screenshot_t),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ScreenshotProgress_t {
    pub progress: f32,
}
#[test]
fn bindgen_test_layout_VREvent_ScreenshotProgress_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ScreenshotProgress_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_ScreenshotProgress_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ScreenshotProgress_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_ScreenshotProgress_t))
    );
    fn test_field_progress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ScreenshotProgress_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).progress) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ScreenshotProgress_t),
                "::",
                stringify!(progress)
            )
        );
    }
    test_field_progress();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ApplicationLaunch_t {
    pub pid: u32,
    pub unArgsHandle: u32,
}
#[test]
fn bindgen_test_layout_VREvent_ApplicationLaunch_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ApplicationLaunch_t>(),
        8usize,
        concat!("Size of: ", stringify!(VREvent_ApplicationLaunch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ApplicationLaunch_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_ApplicationLaunch_t))
    );
    fn test_field_pid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ApplicationLaunch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ApplicationLaunch_t),
                "::",
                stringify!(pid)
            )
        );
    }
    test_field_pid();
    fn test_field_unArgsHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ApplicationLaunch_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unArgsHandle) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ApplicationLaunch_t),
                "::",
                stringify!(unArgsHandle)
            )
        );
    }
    test_field_unArgsHandle();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_EditingCameraSurface_t {
    pub overlayHandle: u64,
    pub nVisualMode: u32,
}
#[test]
fn bindgen_test_layout_VREvent_EditingCameraSurface_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_EditingCameraSurface_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_EditingCameraSurface_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_EditingCameraSurface_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_EditingCameraSurface_t))
    );
    fn test_field_overlayHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_EditingCameraSurface_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overlayHandle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_EditingCameraSurface_t),
                "::",
                stringify!(overlayHandle)
            )
        );
    }
    test_field_overlayHandle();
    fn test_field_nVisualMode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_EditingCameraSurface_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nVisualMode) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_EditingCameraSurface_t),
                "::",
                stringify!(nVisualMode)
            )
        );
    }
    test_field_nVisualMode();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_MessageOverlay_t {
    pub unVRMessageOverlayResponse: u32,
}
#[test]
fn bindgen_test_layout_VREvent_MessageOverlay_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_MessageOverlay_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_MessageOverlay_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_MessageOverlay_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_MessageOverlay_t))
    );
    fn test_field_unVRMessageOverlayResponse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_MessageOverlay_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unVRMessageOverlayResponse) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_MessageOverlay_t),
                "::",
                stringify!(unVRMessageOverlayResponse)
            )
        );
    }
    test_field_unVRMessageOverlayResponse();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Property_t {
    pub container: PropertyContainerHandle_t,
    pub prop: ETrackedDeviceProperty,
}
#[test]
fn bindgen_test_layout_VREvent_Property_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Property_t>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Property_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Property_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Property_t))
    );
    fn test_field_container() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Property_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).container) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Property_t),
                "::",
                stringify!(container)
            )
        );
    }
    test_field_container();
    fn test_field_prop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Property_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prop) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Property_t),
                "::",
                stringify!(prop)
            )
        );
    }
    test_field_prop();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_DualAnalog_t {
    pub x: f32,
    pub y: f32,
    pub transformedX: f32,
    pub transformedY: f32,
    pub which: EDualAnalogWhich,
}
#[test]
fn bindgen_test_layout_VREvent_DualAnalog_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_DualAnalog_t>(),
        20usize,
        concat!("Size of: ", stringify!(VREvent_DualAnalog_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_DualAnalog_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_DualAnalog_t))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_DualAnalog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_DualAnalog_t),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_DualAnalog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_DualAnalog_t),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_transformedX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_DualAnalog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transformedX) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_DualAnalog_t),
                "::",
                stringify!(transformedX)
            )
        );
    }
    test_field_transformedX();
    fn test_field_transformedY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_DualAnalog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transformedY) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_DualAnalog_t),
                "::",
                stringify!(transformedY)
            )
        );
    }
    test_field_transformedY();
    fn test_field_which() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_DualAnalog_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).which) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_DualAnalog_t),
                "::",
                stringify!(which)
            )
        );
    }
    test_field_which();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_HapticVibration_t {
    pub containerHandle: u64,
    pub componentHandle: u64,
    pub fDurationSeconds: f32,
    pub fFrequency: f32,
    pub fAmplitude: f32,
}
#[test]
fn bindgen_test_layout_VREvent_HapticVibration_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_HapticVibration_t>(),
        32usize,
        concat!("Size of: ", stringify!(VREvent_HapticVibration_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_HapticVibration_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_HapticVibration_t))
    );
    fn test_field_containerHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_HapticVibration_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).containerHandle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_HapticVibration_t),
                "::",
                stringify!(containerHandle)
            )
        );
    }
    test_field_containerHandle();
    fn test_field_componentHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_HapticVibration_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).componentHandle) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_HapticVibration_t),
                "::",
                stringify!(componentHandle)
            )
        );
    }
    test_field_componentHandle();
    fn test_field_fDurationSeconds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_HapticVibration_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fDurationSeconds) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_HapticVibration_t),
                "::",
                stringify!(fDurationSeconds)
            )
        );
    }
    test_field_fDurationSeconds();
    fn test_field_fFrequency() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_HapticVibration_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fFrequency) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_HapticVibration_t),
                "::",
                stringify!(fFrequency)
            )
        );
    }
    test_field_fFrequency();
    fn test_field_fAmplitude() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_HapticVibration_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fAmplitude) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_HapticVibration_t),
                "::",
                stringify!(fAmplitude)
            )
        );
    }
    test_field_fAmplitude();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_WebConsole_t {
    pub webConsoleHandle: WebConsoleHandle_t,
}
#[test]
fn bindgen_test_layout_VREvent_WebConsole_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_WebConsole_t>(),
        8usize,
        concat!("Size of: ", stringify!(VREvent_WebConsole_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_WebConsole_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_WebConsole_t))
    );
    fn test_field_webConsoleHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_WebConsole_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).webConsoleHandle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_WebConsole_t),
                "::",
                stringify!(webConsoleHandle)
            )
        );
    }
    test_field_webConsoleHandle();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_InputBindingLoad_t {
    pub ulAppContainer: PropertyContainerHandle_t,
    pub pathMessage: u64,
    pub pathUrl: u64,
    pub pathControllerType: u64,
}
#[test]
fn bindgen_test_layout_VREvent_InputBindingLoad_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_InputBindingLoad_t>(),
        32usize,
        concat!("Size of: ", stringify!(VREvent_InputBindingLoad_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_InputBindingLoad_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_InputBindingLoad_t))
    );
    fn test_field_ulAppContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_InputBindingLoad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulAppContainer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_InputBindingLoad_t),
                "::",
                stringify!(ulAppContainer)
            )
        );
    }
    test_field_ulAppContainer();
    fn test_field_pathMessage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_InputBindingLoad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathMessage) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_InputBindingLoad_t),
                "::",
                stringify!(pathMessage)
            )
        );
    }
    test_field_pathMessage();
    fn test_field_pathUrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_InputBindingLoad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathUrl) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_InputBindingLoad_t),
                "::",
                stringify!(pathUrl)
            )
        );
    }
    test_field_pathUrl();
    fn test_field_pathControllerType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_InputBindingLoad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathControllerType) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_InputBindingLoad_t),
                "::",
                stringify!(pathControllerType)
            )
        );
    }
    test_field_pathControllerType();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_InputActionManifestLoad_t {
    pub pathAppKey: u64,
    pub pathMessage: u64,
    pub pathMessageParam: u64,
    pub pathManifestPath: u64,
}
#[test]
fn bindgen_test_layout_VREvent_InputActionManifestLoad_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_InputActionManifestLoad_t>(),
        32usize,
        concat!("Size of: ", stringify!(VREvent_InputActionManifestLoad_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_InputActionManifestLoad_t>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(VREvent_InputActionManifestLoad_t)
        )
    );
    fn test_field_pathAppKey() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_InputActionManifestLoad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathAppKey) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_InputActionManifestLoad_t),
                "::",
                stringify!(pathAppKey)
            )
        );
    }
    test_field_pathAppKey();
    fn test_field_pathMessage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_InputActionManifestLoad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathMessage) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_InputActionManifestLoad_t),
                "::",
                stringify!(pathMessage)
            )
        );
    }
    test_field_pathMessage();
    fn test_field_pathMessageParam() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_InputActionManifestLoad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathMessageParam) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_InputActionManifestLoad_t),
                "::",
                stringify!(pathMessageParam)
            )
        );
    }
    test_field_pathMessageParam();
    fn test_field_pathManifestPath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_InputActionManifestLoad_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathManifestPath) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_InputActionManifestLoad_t),
                "::",
                stringify!(pathManifestPath)
            )
        );
    }
    test_field_pathManifestPath();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_SpatialAnchor_t {
    pub unHandle: SpatialAnchorHandle_t,
}
#[test]
fn bindgen_test_layout_VREvent_SpatialAnchor_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_SpatialAnchor_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_SpatialAnchor_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_SpatialAnchor_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_SpatialAnchor_t))
    );
    fn test_field_unHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_SpatialAnchor_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unHandle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_SpatialAnchor_t),
                "::",
                stringify!(unHandle)
            )
        );
    }
    test_field_unHandle();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ProgressUpdate_t {
    pub ulApplicationPropertyContainer: u64,
    pub pathDevice: u64,
    pub pathInputSource: u64,
    pub pathProgressAction: u64,
    pub pathIcon: u64,
    pub fProgress: f32,
}
#[test]
fn bindgen_test_layout_VREvent_ProgressUpdate_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ProgressUpdate_t>(),
        48usize,
        concat!("Size of: ", stringify!(VREvent_ProgressUpdate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ProgressUpdate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_ProgressUpdate_t))
    );
    fn test_field_ulApplicationPropertyContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ProgressUpdate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulApplicationPropertyContainer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ProgressUpdate_t),
                "::",
                stringify!(ulApplicationPropertyContainer)
            )
        );
    }
    test_field_ulApplicationPropertyContainer();
    fn test_field_pathDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ProgressUpdate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathDevice) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ProgressUpdate_t),
                "::",
                stringify!(pathDevice)
            )
        );
    }
    test_field_pathDevice();
    fn test_field_pathInputSource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ProgressUpdate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathInputSource) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ProgressUpdate_t),
                "::",
                stringify!(pathInputSource)
            )
        );
    }
    test_field_pathInputSource();
    fn test_field_pathProgressAction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ProgressUpdate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathProgressAction) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ProgressUpdate_t),
                "::",
                stringify!(pathProgressAction)
            )
        );
    }
    test_field_pathProgressAction();
    fn test_field_pathIcon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ProgressUpdate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pathIcon) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ProgressUpdate_t),
                "::",
                stringify!(pathIcon)
            )
        );
    }
    test_field_pathIcon();
    fn test_field_fProgress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ProgressUpdate_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fProgress) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ProgressUpdate_t),
                "::",
                stringify!(fProgress)
            )
        );
    }
    test_field_fProgress();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ShowUI_t {
    pub eType: EShowUIType,
}
#[test]
fn bindgen_test_layout_VREvent_ShowUI_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ShowUI_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_ShowUI_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ShowUI_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_ShowUI_t))
    );
    fn test_field_eType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ShowUI_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eType) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ShowUI_t),
                "::",
                stringify!(eType)
            )
        );
    }
    test_field_eType();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_ShowDevTools_t {
    pub nBrowserIdentifier: i32,
}
#[test]
fn bindgen_test_layout_VREvent_ShowDevTools_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_ShowDevTools_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_ShowDevTools_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_ShowDevTools_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_ShowDevTools_t))
    );
    fn test_field_nBrowserIdentifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_ShowDevTools_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nBrowserIdentifier) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_ShowDevTools_t),
                "::",
                stringify!(nBrowserIdentifier)
            )
        );
    }
    test_field_nBrowserIdentifier();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_HDCPError_t {
    pub eCode: EHDCPError,
}
#[test]
fn bindgen_test_layout_VREvent_HDCPError_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_HDCPError_t>(),
        4usize,
        concat!("Size of: ", stringify!(VREvent_HDCPError_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_HDCPError_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VREvent_HDCPError_t))
    );
    fn test_field_eCode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_HDCPError_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eCode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_HDCPError_t),
                "::",
                stringify!(eCode)
            )
        );
    }
    test_field_eCode();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HiddenAreaMesh_t {
    pub pVertexData: *mut HmdVector2_t,
    pub unTriangleCount: u32,
}
#[test]
fn bindgen_test_layout_HiddenAreaMesh_t() {
    assert_eq!(
        ::std::mem::size_of::<HiddenAreaMesh_t>(),
        16usize,
        concat!("Size of: ", stringify!(HiddenAreaMesh_t))
    );
    assert_eq!(
        ::std::mem::align_of::<HiddenAreaMesh_t>(),
        8usize,
        concat!("Alignment of ", stringify!(HiddenAreaMesh_t))
    );
    fn test_field_pVertexData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HiddenAreaMesh_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pVertexData) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(HiddenAreaMesh_t),
                "::",
                stringify!(pVertexData)
            )
        );
    }
    test_field_pVertexData();
    fn test_field_unTriangleCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<HiddenAreaMesh_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unTriangleCount) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(HiddenAreaMesh_t),
                "::",
                stringify!(unTriangleCount)
            )
        );
    }
    test_field_unTriangleCount();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRControllerAxis_t {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_VRControllerAxis_t() {
    assert_eq!(
        ::std::mem::size_of::<VRControllerAxis_t>(),
        8usize,
        concat!("Size of: ", stringify!(VRControllerAxis_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRControllerAxis_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRControllerAxis_t))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRControllerAxis_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRControllerAxis_t),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRControllerAxis_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VRControllerAxis_t),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRControllerState_t {
    pub unPacketNum: u32,
    pub ulButtonPressed: u64,
    pub ulButtonTouched: u64,
    pub rAxis: [VRControllerAxis_t; 5usize],
}
#[test]
fn bindgen_test_layout_VRControllerState_t() {
    assert_eq!(
        ::std::mem::size_of::<VRControllerState_t>(),
        64usize,
        concat!("Size of: ", stringify!(VRControllerState_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRControllerState_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRControllerState_t))
    );
    fn test_field_unPacketNum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRControllerState_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unPacketNum) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRControllerState_t),
                "::",
                stringify!(unPacketNum)
            )
        );
    }
    test_field_unPacketNum();
    fn test_field_ulButtonPressed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRControllerState_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulButtonPressed) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VRControllerState_t),
                "::",
                stringify!(ulButtonPressed)
            )
        );
    }
    test_field_ulButtonPressed();
    fn test_field_ulButtonTouched() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRControllerState_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulButtonTouched) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VRControllerState_t),
                "::",
                stringify!(ulButtonTouched)
            )
        );
    }
    test_field_ulButtonTouched();
    fn test_field_rAxis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRControllerState_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rAxis) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VRControllerState_t),
                "::",
                stringify!(rAxis)
            )
        );
    }
    test_field_rAxis();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_OverlaySettings {
    pub size: u32,
    pub curved: bool,
    pub antialias: bool,
    pub scale: f32,
    pub distance: f32,
    pub alpha: f32,
    pub uOffset: f32,
    pub vOffset: f32,
    pub uScale: f32,
    pub vScale: f32,
    pub gridDivs: f32,
    pub gridWidth: f32,
    pub gridScale: f32,
    pub transform: HmdMatrix44_t,
}
#[test]
fn bindgen_test_layout_Compositor_OverlaySettings() {
    assert_eq!(
        ::std::mem::size_of::<Compositor_OverlaySettings>(),
        112usize,
        concat!("Size of: ", stringify!(Compositor_OverlaySettings))
    );
    assert_eq!(
        ::std::mem::align_of::<Compositor_OverlaySettings>(),
        4usize,
        concat!("Alignment of ", stringify!(Compositor_OverlaySettings))
    );
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_curved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).curved) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(curved)
            )
        );
    }
    test_field_curved();
    fn test_field_antialias() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).antialias) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(antialias)
            )
        );
    }
    test_field_antialias();
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
    fn test_field_distance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(distance)
            )
        );
    }
    test_field_distance();
    fn test_field_alpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(alpha)
            )
        );
    }
    test_field_alpha();
    fn test_field_uOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uOffset) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(uOffset)
            )
        );
    }
    test_field_uOffset();
    fn test_field_vOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vOffset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(vOffset)
            )
        );
    }
    test_field_vOffset();
    fn test_field_uScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uScale) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(uScale)
            )
        );
    }
    test_field_uScale();
    fn test_field_vScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vScale) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(vScale)
            )
        );
    }
    test_field_vScale();
    fn test_field_gridDivs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gridDivs) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(gridDivs)
            )
        );
    }
    test_field_gridDivs();
    fn test_field_gridWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gridWidth) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(gridWidth)
            )
        );
    }
    test_field_gridWidth();
    fn test_field_gridScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gridScale) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(gridScale)
            )
        );
    }
    test_field_gridScale();
    fn test_field_transform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_OverlaySettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transform) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_OverlaySettings),
                "::",
                stringify!(transform)
            )
        );
    }
    test_field_transform();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRBoneTransform_t {
    pub position: HmdVector4_t,
    pub orientation: HmdQuaternionf_t,
}
#[test]
fn bindgen_test_layout_VRBoneTransform_t() {
    assert_eq!(
        ::std::mem::size_of::<VRBoneTransform_t>(),
        32usize,
        concat!("Size of: ", stringify!(VRBoneTransform_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRBoneTransform_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRBoneTransform_t))
    );
    fn test_field_position() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRBoneTransform_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRBoneTransform_t),
                "::",
                stringify!(position)
            )
        );
    }
    test_field_position();
    fn test_field_orientation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRBoneTransform_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).orientation) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VRBoneTransform_t),
                "::",
                stringify!(orientation)
            )
        );
    }
    test_field_orientation();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CameraVideoStreamFrameHeader_t {
    pub eFrameType: EVRTrackedCameraFrameType,
    pub nWidth: u32,
    pub nHeight: u32,
    pub nBytesPerPixel: u32,
    pub nFrameSequence: u32,
    pub standingTrackedDevicePose: TrackedDevicePose_t,
    pub ulFrameExposureTime: u64,
}
#[test]
fn bindgen_test_layout_CameraVideoStreamFrameHeader_t() {
    assert_eq!(
        ::std::mem::size_of::<CameraVideoStreamFrameHeader_t>(),
        112usize,
        concat!("Size of: ", stringify!(CameraVideoStreamFrameHeader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<CameraVideoStreamFrameHeader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(CameraVideoStreamFrameHeader_t))
    );
    fn test_field_eFrameType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CameraVideoStreamFrameHeader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eFrameType) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CameraVideoStreamFrameHeader_t),
                "::",
                stringify!(eFrameType)
            )
        );
    }
    test_field_eFrameType();
    fn test_field_nWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CameraVideoStreamFrameHeader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nWidth) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(CameraVideoStreamFrameHeader_t),
                "::",
                stringify!(nWidth)
            )
        );
    }
    test_field_nWidth();
    fn test_field_nHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CameraVideoStreamFrameHeader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nHeight) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(CameraVideoStreamFrameHeader_t),
                "::",
                stringify!(nHeight)
            )
        );
    }
    test_field_nHeight();
    fn test_field_nBytesPerPixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CameraVideoStreamFrameHeader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nBytesPerPixel) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(CameraVideoStreamFrameHeader_t),
                "::",
                stringify!(nBytesPerPixel)
            )
        );
    }
    test_field_nBytesPerPixel();
    fn test_field_nFrameSequence() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CameraVideoStreamFrameHeader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nFrameSequence) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(CameraVideoStreamFrameHeader_t),
                "::",
                stringify!(nFrameSequence)
            )
        );
    }
    test_field_nFrameSequence();
    fn test_field_standingTrackedDevicePose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CameraVideoStreamFrameHeader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).standingTrackedDevicePose) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(CameraVideoStreamFrameHeader_t),
                "::",
                stringify!(standingTrackedDevicePose)
            )
        );
    }
    test_field_standingTrackedDevicePose();
    fn test_field_ulFrameExposureTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CameraVideoStreamFrameHeader_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulFrameExposureTime) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(CameraVideoStreamFrameHeader_t),
                "::",
                stringify!(ulFrameExposureTime)
            )
        );
    }
    test_field_ulFrameExposureTime();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DriverDirectMode_FrameTiming {
    pub m_nSize: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumMisPresented: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nReprojectionFlags: u32,
}
#[test]
fn bindgen_test_layout_DriverDirectMode_FrameTiming() {
    assert_eq!(
        ::std::mem::size_of::<DriverDirectMode_FrameTiming>(),
        20usize,
        concat!("Size of: ", stringify!(DriverDirectMode_FrameTiming))
    );
    assert_eq!(
        ::std::mem::align_of::<DriverDirectMode_FrameTiming>(),
        4usize,
        concat!("Alignment of ", stringify!(DriverDirectMode_FrameTiming))
    );
    fn test_field_m_nSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DriverDirectMode_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nSize) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(DriverDirectMode_FrameTiming),
                "::",
                stringify!(m_nSize)
            )
        );
    }
    test_field_m_nSize();
    fn test_field_m_nNumFramePresents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DriverDirectMode_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumFramePresents) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(DriverDirectMode_FrameTiming),
                "::",
                stringify!(m_nNumFramePresents)
            )
        );
    }
    test_field_m_nNumFramePresents();
    fn test_field_m_nNumMisPresented() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DriverDirectMode_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumMisPresented) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(DriverDirectMode_FrameTiming),
                "::",
                stringify!(m_nNumMisPresented)
            )
        );
    }
    test_field_m_nNumMisPresented();
    fn test_field_m_nNumDroppedFrames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DriverDirectMode_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumDroppedFrames) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(DriverDirectMode_FrameTiming),
                "::",
                stringify!(m_nNumDroppedFrames)
            )
        );
    }
    test_field_m_nNumDroppedFrames();
    fn test_field_m_nReprojectionFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<DriverDirectMode_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nReprojectionFlags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(DriverDirectMode_FrameTiming),
                "::",
                stringify!(m_nReprojectionFlags)
            )
        );
    }
    test_field_m_nReprojectionFlags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImuSample_t {
    pub fSampleTime: f64,
    pub vAccel: HmdVector3d_t,
    pub vGyro: HmdVector3d_t,
    pub unOffScaleFlags: u32,
}
#[test]
fn bindgen_test_layout_ImuSample_t() {
    assert_eq!(
        ::std::mem::size_of::<ImuSample_t>(),
        64usize,
        concat!("Size of: ", stringify!(ImuSample_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ImuSample_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ImuSample_t))
    );
    fn test_field_fSampleTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImuSample_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fSampleTime) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImuSample_t),
                "::",
                stringify!(fSampleTime)
            )
        );
    }
    test_field_fSampleTime();
    fn test_field_vAccel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImuSample_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vAccel) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImuSample_t),
                "::",
                stringify!(vAccel)
            )
        );
    }
    test_field_vAccel();
    fn test_field_vGyro() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImuSample_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vGyro) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImuSample_t),
                "::",
                stringify!(vGyro)
            )
        );
    }
    test_field_vGyro();
    fn test_field_unOffScaleFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImuSample_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unOffScaleFlags) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImuSample_t),
                "::",
                stringify!(unOffScaleFlags)
            )
        );
    }
    test_field_unOffScaleFlags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AppOverrideKeys_t {
    pub pchKey: *mut ::std::os::raw::c_char,
    pub pchValue: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_AppOverrideKeys_t() {
    assert_eq!(
        ::std::mem::size_of::<AppOverrideKeys_t>(),
        16usize,
        concat!("Size of: ", stringify!(AppOverrideKeys_t))
    );
    assert_eq!(
        ::std::mem::align_of::<AppOverrideKeys_t>(),
        8usize,
        concat!("Alignment of ", stringify!(AppOverrideKeys_t))
    );
    fn test_field_pchKey() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<AppOverrideKeys_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pchKey) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(AppOverrideKeys_t),
                "::",
                stringify!(pchKey)
            )
        );
    }
    test_field_pchKey();
    fn test_field_pchValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<AppOverrideKeys_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pchValue) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(AppOverrideKeys_t),
                "::",
                stringify!(pchValue)
            )
        );
    }
    test_field_pchValue();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_FrameTiming {
    pub m_nSize: u32,
    pub m_nFrameIndex: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumMisPresented: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nReprojectionFlags: u32,
    pub m_flSystemTimeInSeconds: f64,
    pub m_flPreSubmitGpuMs: f32,
    pub m_flPostSubmitGpuMs: f32,
    pub m_flTotalRenderGpuMs: f32,
    pub m_flCompositorRenderGpuMs: f32,
    pub m_flCompositorRenderCpuMs: f32,
    pub m_flCompositorIdleCpuMs: f32,
    pub m_flClientFrameIntervalMs: f32,
    pub m_flPresentCallCpuMs: f32,
    pub m_flWaitForPresentCpuMs: f32,
    pub m_flSubmitFrameMs: f32,
    pub m_flWaitGetPosesCalledMs: f32,
    pub m_flNewPosesReadyMs: f32,
    pub m_flNewFrameReadyMs: f32,
    pub m_flCompositorUpdateStartMs: f32,
    pub m_flCompositorUpdateEndMs: f32,
    pub m_flCompositorRenderStartMs: f32,
    pub m_HmdPose: TrackedDevicePose_t,
    pub m_nNumVSyncsReadyForUse: u32,
    pub m_nNumVSyncsToFirstView: u32,
}
#[test]
fn bindgen_test_layout_Compositor_FrameTiming() {
    assert_eq!(
        ::std::mem::size_of::<Compositor_FrameTiming>(),
        184usize,
        concat!("Size of: ", stringify!(Compositor_FrameTiming))
    );
    assert_eq!(
        ::std::mem::align_of::<Compositor_FrameTiming>(),
        8usize,
        concat!("Alignment of ", stringify!(Compositor_FrameTiming))
    );
    fn test_field_m_nSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nSize) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_nSize)
            )
        );
    }
    test_field_m_nSize();
    fn test_field_m_nFrameIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nFrameIndex) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_nFrameIndex)
            )
        );
    }
    test_field_m_nFrameIndex();
    fn test_field_m_nNumFramePresents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumFramePresents) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_nNumFramePresents)
            )
        );
    }
    test_field_m_nNumFramePresents();
    fn test_field_m_nNumMisPresented() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumMisPresented) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_nNumMisPresented)
            )
        );
    }
    test_field_m_nNumMisPresented();
    fn test_field_m_nNumDroppedFrames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumDroppedFrames) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_nNumDroppedFrames)
            )
        );
    }
    test_field_m_nNumDroppedFrames();
    fn test_field_m_nReprojectionFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nReprojectionFlags) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_nReprojectionFlags)
            )
        );
    }
    test_field_m_nReprojectionFlags();
    fn test_field_m_flSystemTimeInSeconds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flSystemTimeInSeconds) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flSystemTimeInSeconds)
            )
        );
    }
    test_field_m_flSystemTimeInSeconds();
    fn test_field_m_flPreSubmitGpuMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flPreSubmitGpuMs) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flPreSubmitGpuMs)
            )
        );
    }
    test_field_m_flPreSubmitGpuMs();
    fn test_field_m_flPostSubmitGpuMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flPostSubmitGpuMs) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flPostSubmitGpuMs)
            )
        );
    }
    test_field_m_flPostSubmitGpuMs();
    fn test_field_m_flTotalRenderGpuMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flTotalRenderGpuMs) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flTotalRenderGpuMs)
            )
        );
    }
    test_field_m_flTotalRenderGpuMs();
    fn test_field_m_flCompositorRenderGpuMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flCompositorRenderGpuMs) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flCompositorRenderGpuMs)
            )
        );
    }
    test_field_m_flCompositorRenderGpuMs();
    fn test_field_m_flCompositorRenderCpuMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flCompositorRenderCpuMs) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flCompositorRenderCpuMs)
            )
        );
    }
    test_field_m_flCompositorRenderCpuMs();
    fn test_field_m_flCompositorIdleCpuMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flCompositorIdleCpuMs) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flCompositorIdleCpuMs)
            )
        );
    }
    test_field_m_flCompositorIdleCpuMs();
    fn test_field_m_flClientFrameIntervalMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flClientFrameIntervalMs) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flClientFrameIntervalMs)
            )
        );
    }
    test_field_m_flClientFrameIntervalMs();
    fn test_field_m_flPresentCallCpuMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flPresentCallCpuMs) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flPresentCallCpuMs)
            )
        );
    }
    test_field_m_flPresentCallCpuMs();
    fn test_field_m_flWaitForPresentCpuMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flWaitForPresentCpuMs) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flWaitForPresentCpuMs)
            )
        );
    }
    test_field_m_flWaitForPresentCpuMs();
    fn test_field_m_flSubmitFrameMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flSubmitFrameMs) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flSubmitFrameMs)
            )
        );
    }
    test_field_m_flSubmitFrameMs();
    fn test_field_m_flWaitGetPosesCalledMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flWaitGetPosesCalledMs) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flWaitGetPosesCalledMs)
            )
        );
    }
    test_field_m_flWaitGetPosesCalledMs();
    fn test_field_m_flNewPosesReadyMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flNewPosesReadyMs) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flNewPosesReadyMs)
            )
        );
    }
    test_field_m_flNewPosesReadyMs();
    fn test_field_m_flNewFrameReadyMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flNewFrameReadyMs) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flNewFrameReadyMs)
            )
        );
    }
    test_field_m_flNewFrameReadyMs();
    fn test_field_m_flCompositorUpdateStartMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flCompositorUpdateStartMs) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flCompositorUpdateStartMs)
            )
        );
    }
    test_field_m_flCompositorUpdateStartMs();
    fn test_field_m_flCompositorUpdateEndMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flCompositorUpdateEndMs) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flCompositorUpdateEndMs)
            )
        );
    }
    test_field_m_flCompositorUpdateEndMs();
    fn test_field_m_flCompositorRenderStartMs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flCompositorRenderStartMs) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_flCompositorRenderStartMs)
            )
        );
    }
    test_field_m_flCompositorRenderStartMs();
    fn test_field_m_HmdPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_HmdPose) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_HmdPose)
            )
        );
    }
    test_field_m_HmdPose();
    fn test_field_m_nNumVSyncsReadyForUse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumVSyncsReadyForUse) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_nNumVSyncsReadyForUse)
            )
        );
    }
    test_field_m_nNumVSyncsReadyForUse();
    fn test_field_m_nNumVSyncsToFirstView() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_FrameTiming>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumVSyncsToFirstView) as usize - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_FrameTiming),
                "::",
                stringify!(m_nNumVSyncsToFirstView)
            )
        );
    }
    test_field_m_nNumVSyncsToFirstView();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Compositor_CumulativeStats {
    pub m_nPid: u32,
    pub m_nNumFramePresents: u32,
    pub m_nNumDroppedFrames: u32,
    pub m_nNumReprojectedFrames: u32,
    pub m_nNumFramePresentsOnStartup: u32,
    pub m_nNumDroppedFramesOnStartup: u32,
    pub m_nNumReprojectedFramesOnStartup: u32,
    pub m_nNumLoading: u32,
    pub m_nNumFramePresentsLoading: u32,
    pub m_nNumDroppedFramesLoading: u32,
    pub m_nNumReprojectedFramesLoading: u32,
    pub m_nNumTimedOut: u32,
    pub m_nNumFramePresentsTimedOut: u32,
    pub m_nNumDroppedFramesTimedOut: u32,
    pub m_nNumReprojectedFramesTimedOut: u32,
}
#[test]
fn bindgen_test_layout_Compositor_CumulativeStats() {
    assert_eq!(
        ::std::mem::size_of::<Compositor_CumulativeStats>(),
        60usize,
        concat!("Size of: ", stringify!(Compositor_CumulativeStats))
    );
    assert_eq!(
        ::std::mem::align_of::<Compositor_CumulativeStats>(),
        4usize,
        concat!("Alignment of ", stringify!(Compositor_CumulativeStats))
    );
    fn test_field_m_nPid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nPid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nPid)
            )
        );
    }
    test_field_m_nPid();
    fn test_field_m_nNumFramePresents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumFramePresents) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumFramePresents)
            )
        );
    }
    test_field_m_nNumFramePresents();
    fn test_field_m_nNumDroppedFrames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumDroppedFrames) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumDroppedFrames)
            )
        );
    }
    test_field_m_nNumDroppedFrames();
    fn test_field_m_nNumReprojectedFrames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumReprojectedFrames) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumReprojectedFrames)
            )
        );
    }
    test_field_m_nNumReprojectedFrames();
    fn test_field_m_nNumFramePresentsOnStartup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumFramePresentsOnStartup) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumFramePresentsOnStartup)
            )
        );
    }
    test_field_m_nNumFramePresentsOnStartup();
    fn test_field_m_nNumDroppedFramesOnStartup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumDroppedFramesOnStartup) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumDroppedFramesOnStartup)
            )
        );
    }
    test_field_m_nNumDroppedFramesOnStartup();
    fn test_field_m_nNumReprojectedFramesOnStartup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumReprojectedFramesOnStartup) as usize
                    - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumReprojectedFramesOnStartup)
            )
        );
    }
    test_field_m_nNumReprojectedFramesOnStartup();
    fn test_field_m_nNumLoading() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumLoading) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumLoading)
            )
        );
    }
    test_field_m_nNumLoading();
    fn test_field_m_nNumFramePresentsLoading() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumFramePresentsLoading) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumFramePresentsLoading)
            )
        );
    }
    test_field_m_nNumFramePresentsLoading();
    fn test_field_m_nNumDroppedFramesLoading() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumDroppedFramesLoading) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumDroppedFramesLoading)
            )
        );
    }
    test_field_m_nNumDroppedFramesLoading();
    fn test_field_m_nNumReprojectedFramesLoading() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumReprojectedFramesLoading) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumReprojectedFramesLoading)
            )
        );
    }
    test_field_m_nNumReprojectedFramesLoading();
    fn test_field_m_nNumTimedOut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumTimedOut) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumTimedOut)
            )
        );
    }
    test_field_m_nNumTimedOut();
    fn test_field_m_nNumFramePresentsTimedOut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumFramePresentsTimedOut) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumFramePresentsTimedOut)
            )
        );
    }
    test_field_m_nNumFramePresentsTimedOut();
    fn test_field_m_nNumDroppedFramesTimedOut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumDroppedFramesTimedOut) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumDroppedFramesTimedOut)
            )
        );
    }
    test_field_m_nNumDroppedFramesTimedOut();
    fn test_field_m_nNumReprojectedFramesTimedOut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<Compositor_CumulativeStats>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nNumReprojectedFramesTimedOut) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(Compositor_CumulativeStats),
                "::",
                stringify!(m_nNumReprojectedFramesTimedOut)
            )
        );
    }
    test_field_m_nNumReprojectedFramesTimedOut();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayIntersectionParams_t {
    pub vSource: HmdVector3_t,
    pub vDirection: HmdVector3_t,
    pub eOrigin: ETrackingUniverseOrigin,
}
#[test]
fn bindgen_test_layout_VROverlayIntersectionParams_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayIntersectionParams_t>(),
        28usize,
        concat!("Size of: ", stringify!(VROverlayIntersectionParams_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayIntersectionParams_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VROverlayIntersectionParams_t))
    );
    fn test_field_vSource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VROverlayIntersectionParams_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vSource) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionParams_t),
                "::",
                stringify!(vSource)
            )
        );
    }
    test_field_vSource();
    fn test_field_vDirection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VROverlayIntersectionParams_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vDirection) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionParams_t),
                "::",
                stringify!(vDirection)
            )
        );
    }
    test_field_vDirection();
    fn test_field_eOrigin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VROverlayIntersectionParams_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eOrigin) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionParams_t),
                "::",
                stringify!(eOrigin)
            )
        );
    }
    test_field_eOrigin();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VROverlayIntersectionResults_t {
    pub vPoint: HmdVector3_t,
    pub vNormal: HmdVector3_t,
    pub vUVs: HmdVector2_t,
    pub fDistance: f32,
}
#[test]
fn bindgen_test_layout_VROverlayIntersectionResults_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayIntersectionResults_t>(),
        36usize,
        concat!("Size of: ", stringify!(VROverlayIntersectionResults_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayIntersectionResults_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VROverlayIntersectionResults_t))
    );
    fn test_field_vPoint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VROverlayIntersectionResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vPoint) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionResults_t),
                "::",
                stringify!(vPoint)
            )
        );
    }
    test_field_vPoint();
    fn test_field_vNormal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VROverlayIntersectionResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vNormal) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionResults_t),
                "::",
                stringify!(vNormal)
            )
        );
    }
    test_field_vNormal();
    fn test_field_vUVs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VROverlayIntersectionResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vUVs) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionResults_t),
                "::",
                stringify!(vUVs)
            )
        );
    }
    test_field_vUVs();
    fn test_field_fDistance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VROverlayIntersectionResults_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fDistance) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionResults_t),
                "::",
                stringify!(fDistance)
            )
        );
    }
    test_field_fDistance();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntersectionMaskRectangle_t {
    pub m_flTopLeftX: f32,
    pub m_flTopLeftY: f32,
    pub m_flWidth: f32,
    pub m_flHeight: f32,
}
#[test]
fn bindgen_test_layout_IntersectionMaskRectangle_t() {
    assert_eq!(
        ::std::mem::size_of::<IntersectionMaskRectangle_t>(),
        16usize,
        concat!("Size of: ", stringify!(IntersectionMaskRectangle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<IntersectionMaskRectangle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(IntersectionMaskRectangle_t))
    );
    fn test_field_m_flTopLeftX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IntersectionMaskRectangle_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flTopLeftX) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(IntersectionMaskRectangle_t),
                "::",
                stringify!(m_flTopLeftX)
            )
        );
    }
    test_field_m_flTopLeftX();
    fn test_field_m_flTopLeftY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IntersectionMaskRectangle_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flTopLeftY) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(IntersectionMaskRectangle_t),
                "::",
                stringify!(m_flTopLeftY)
            )
        );
    }
    test_field_m_flTopLeftY();
    fn test_field_m_flWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IntersectionMaskRectangle_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flWidth) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(IntersectionMaskRectangle_t),
                "::",
                stringify!(m_flWidth)
            )
        );
    }
    test_field_m_flWidth();
    fn test_field_m_flHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IntersectionMaskRectangle_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flHeight) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(IntersectionMaskRectangle_t),
                "::",
                stringify!(m_flHeight)
            )
        );
    }
    test_field_m_flHeight();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntersectionMaskCircle_t {
    pub m_flCenterX: f32,
    pub m_flCenterY: f32,
    pub m_flRadius: f32,
}
#[test]
fn bindgen_test_layout_IntersectionMaskCircle_t() {
    assert_eq!(
        ::std::mem::size_of::<IntersectionMaskCircle_t>(),
        12usize,
        concat!("Size of: ", stringify!(IntersectionMaskCircle_t))
    );
    assert_eq!(
        ::std::mem::align_of::<IntersectionMaskCircle_t>(),
        4usize,
        concat!("Alignment of ", stringify!(IntersectionMaskCircle_t))
    );
    fn test_field_m_flCenterX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IntersectionMaskCircle_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flCenterX) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(IntersectionMaskCircle_t),
                "::",
                stringify!(m_flCenterX)
            )
        );
    }
    test_field_m_flCenterX();
    fn test_field_m_flCenterY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IntersectionMaskCircle_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flCenterY) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(IntersectionMaskCircle_t),
                "::",
                stringify!(m_flCenterY)
            )
        );
    }
    test_field_m_flCenterY();
    fn test_field_m_flRadius() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<IntersectionMaskCircle_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_flRadius) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(IntersectionMaskCircle_t),
                "::",
                stringify!(m_flRadius)
            )
        );
    }
    test_field_m_flRadius();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_ComponentState_t {
    pub mTrackingToComponentRenderModel: HmdMatrix34_t,
    pub mTrackingToComponentLocal: HmdMatrix34_t,
    pub uProperties: VRComponentProperties,
}
#[test]
fn bindgen_test_layout_RenderModel_ComponentState_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_ComponentState_t>(),
        100usize,
        concat!("Size of: ", stringify!(RenderModel_ComponentState_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_ComponentState_t>(),
        4usize,
        concat!("Alignment of ", stringify!(RenderModel_ComponentState_t))
    );
    fn test_field_mTrackingToComponentRenderModel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_ComponentState_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mTrackingToComponentRenderModel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_ComponentState_t),
                "::",
                stringify!(mTrackingToComponentRenderModel)
            )
        );
    }
    test_field_mTrackingToComponentRenderModel();
    fn test_field_mTrackingToComponentLocal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_ComponentState_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mTrackingToComponentLocal) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_ComponentState_t),
                "::",
                stringify!(mTrackingToComponentLocal)
            )
        );
    }
    test_field_mTrackingToComponentLocal();
    fn test_field_uProperties() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_ComponentState_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uProperties) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_ComponentState_t),
                "::",
                stringify!(uProperties)
            )
        );
    }
    test_field_uProperties();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_Vertex_t {
    pub vPosition: HmdVector3_t,
    pub vNormal: HmdVector3_t,
    pub rfTextureCoord: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_RenderModel_Vertex_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_Vertex_t>(),
        32usize,
        concat!("Size of: ", stringify!(RenderModel_Vertex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_Vertex_t>(),
        4usize,
        concat!("Alignment of ", stringify!(RenderModel_Vertex_t))
    );
    fn test_field_vPosition() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_Vertex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vPosition) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_Vertex_t),
                "::",
                stringify!(vPosition)
            )
        );
    }
    test_field_vPosition();
    fn test_field_vNormal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_Vertex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vNormal) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_Vertex_t),
                "::",
                stringify!(vNormal)
            )
        );
    }
    test_field_vNormal();
    fn test_field_rfTextureCoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_Vertex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rfTextureCoord) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_Vertex_t),
                "::",
                stringify!(rfTextureCoord)
            )
        );
    }
    test_field_rfTextureCoord();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_TextureMap_t {
    pub unWidth: u16,
    pub unHeight: u16,
    pub rubTextureMapData: *mut u8,
}
#[test]
fn bindgen_test_layout_RenderModel_TextureMap_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_TextureMap_t>(),
        16usize,
        concat!("Size of: ", stringify!(RenderModel_TextureMap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_TextureMap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(RenderModel_TextureMap_t))
    );
    fn test_field_unWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_TextureMap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unWidth) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_TextureMap_t),
                "::",
                stringify!(unWidth)
            )
        );
    }
    test_field_unWidth();
    fn test_field_unHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_TextureMap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unHeight) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_TextureMap_t),
                "::",
                stringify!(unHeight)
            )
        );
    }
    test_field_unHeight();
    fn test_field_rubTextureMapData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_TextureMap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rubTextureMapData) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_TextureMap_t),
                "::",
                stringify!(rubTextureMapData)
            )
        );
    }
    test_field_rubTextureMapData();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_t {
    pub rVertexData: *mut RenderModel_Vertex_t,
    pub unVertexCount: u32,
    pub rIndexData: *mut u16,
    pub unTriangleCount: u32,
    pub diffuseTextureId: TextureID_t,
}
#[test]
fn bindgen_test_layout_RenderModel_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_t>(),
        32usize,
        concat!("Size of: ", stringify!(RenderModel_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_t>(),
        8usize,
        concat!("Alignment of ", stringify!(RenderModel_t))
    );
    fn test_field_rVertexData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rVertexData) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_t),
                "::",
                stringify!(rVertexData)
            )
        );
    }
    test_field_rVertexData();
    fn test_field_unVertexCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unVertexCount) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_t),
                "::",
                stringify!(unVertexCount)
            )
        );
    }
    test_field_unVertexCount();
    fn test_field_rIndexData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rIndexData) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_t),
                "::",
                stringify!(rIndexData)
            )
        );
    }
    test_field_rIndexData();
    fn test_field_unTriangleCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unTriangleCount) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_t),
                "::",
                stringify!(unTriangleCount)
            )
        );
    }
    test_field_unTriangleCount();
    fn test_field_diffuseTextureId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RenderModel_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).diffuseTextureId) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_t),
                "::",
                stringify!(diffuseTextureId)
            )
        );
    }
    test_field_diffuseTextureId();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RenderModel_ControllerMode_State_t {
    pub bScrollWheelVisible: bool,
}
#[test]
fn bindgen_test_layout_RenderModel_ControllerMode_State_t() {
    assert_eq!(
        ::std::mem::size_of::<RenderModel_ControllerMode_State_t>(),
        1usize,
        concat!("Size of: ", stringify!(RenderModel_ControllerMode_State_t))
    );
    assert_eq!(
        ::std::mem::align_of::<RenderModel_ControllerMode_State_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(RenderModel_ControllerMode_State_t)
        )
    );
    fn test_field_bScrollWheelVisible() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<RenderModel_ControllerMode_State_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bScrollWheelVisible) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RenderModel_ControllerMode_State_t),
                "::",
                stringify!(bScrollWheelVisible)
            )
        );
    }
    test_field_bScrollWheelVisible();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NotificationBitmap_t {
    pub m_pImageData: *mut ::std::os::raw::c_void,
    pub m_nWidth: i32,
    pub m_nHeight: i32,
    pub m_nBytesPerPixel: i32,
}
#[test]
fn bindgen_test_layout_NotificationBitmap_t() {
    assert_eq!(
        ::std::mem::size_of::<NotificationBitmap_t>(),
        24usize,
        concat!("Size of: ", stringify!(NotificationBitmap_t))
    );
    assert_eq!(
        ::std::mem::align_of::<NotificationBitmap_t>(),
        8usize,
        concat!("Alignment of ", stringify!(NotificationBitmap_t))
    );
    fn test_field_m_pImageData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<NotificationBitmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pImageData) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(NotificationBitmap_t),
                "::",
                stringify!(m_pImageData)
            )
        );
    }
    test_field_m_pImageData();
    fn test_field_m_nWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<NotificationBitmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nWidth) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(NotificationBitmap_t),
                "::",
                stringify!(m_nWidth)
            )
        );
    }
    test_field_m_nWidth();
    fn test_field_m_nHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<NotificationBitmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nHeight) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(NotificationBitmap_t),
                "::",
                stringify!(m_nHeight)
            )
        );
    }
    test_field_m_nHeight();
    fn test_field_m_nBytesPerPixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<NotificationBitmap_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nBytesPerPixel) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(NotificationBitmap_t),
                "::",
                stringify!(m_nBytesPerPixel)
            )
        );
    }
    test_field_m_nBytesPerPixel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CVRSettingHelper {
    pub m_pSettings: isize,
}
#[test]
fn bindgen_test_layout_CVRSettingHelper() {
    assert_eq!(
        ::std::mem::size_of::<CVRSettingHelper>(),
        8usize,
        concat!("Size of: ", stringify!(CVRSettingHelper))
    );
    assert_eq!(
        ::std::mem::align_of::<CVRSettingHelper>(),
        8usize,
        concat!("Alignment of ", stringify!(CVRSettingHelper))
    );
    fn test_field_m_pSettings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<CVRSettingHelper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pSettings) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(CVRSettingHelper),
                "::",
                stringify!(m_pSettings)
            )
        );
    }
    test_field_m_pSettings();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputAnalogActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub deltaX: f32,
    pub deltaY: f32,
    pub deltaZ: f32,
    pub fUpdateTime: f32,
}
#[test]
fn bindgen_test_layout_InputAnalogActionData_t() {
    assert_eq!(
        ::std::mem::size_of::<InputAnalogActionData_t>(),
        48usize,
        concat!("Size of: ", stringify!(InputAnalogActionData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputAnalogActionData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputAnalogActionData_t))
    );
    fn test_field_bActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bActive) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(bActive)
            )
        );
    }
    test_field_bActive();
    fn test_field_activeOrigin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).activeOrigin) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(activeOrigin)
            )
        );
    }
    test_field_activeOrigin();
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(z)
            )
        );
    }
    test_field_z();
    fn test_field_deltaX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).deltaX) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(deltaX)
            )
        );
    }
    test_field_deltaX();
    fn test_field_deltaY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).deltaY) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(deltaY)
            )
        );
    }
    test_field_deltaY();
    fn test_field_deltaZ() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).deltaZ) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(deltaZ)
            )
        );
    }
    test_field_deltaZ();
    fn test_field_fUpdateTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputAnalogActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fUpdateTime) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(InputAnalogActionData_t),
                "::",
                stringify!(fUpdateTime)
            )
        );
    }
    test_field_fUpdateTime();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputDigitalActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub bState: bool,
    pub bChanged: bool,
    pub fUpdateTime: f32,
}
#[test]
fn bindgen_test_layout_InputDigitalActionData_t() {
    assert_eq!(
        ::std::mem::size_of::<InputDigitalActionData_t>(),
        24usize,
        concat!("Size of: ", stringify!(InputDigitalActionData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputDigitalActionData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputDigitalActionData_t))
    );
    fn test_field_bActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputDigitalActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bActive) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(InputDigitalActionData_t),
                "::",
                stringify!(bActive)
            )
        );
    }
    test_field_bActive();
    fn test_field_activeOrigin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputDigitalActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).activeOrigin) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(InputDigitalActionData_t),
                "::",
                stringify!(activeOrigin)
            )
        );
    }
    test_field_activeOrigin();
    fn test_field_bState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputDigitalActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bState) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(InputDigitalActionData_t),
                "::",
                stringify!(bState)
            )
        );
    }
    test_field_bState();
    fn test_field_bChanged() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputDigitalActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bChanged) as usize - ptr as usize
            },
            17usize,
            concat!(
                "Offset of field: ",
                stringify!(InputDigitalActionData_t),
                "::",
                stringify!(bChanged)
            )
        );
    }
    test_field_bChanged();
    fn test_field_fUpdateTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputDigitalActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fUpdateTime) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(InputDigitalActionData_t),
                "::",
                stringify!(fUpdateTime)
            )
        );
    }
    test_field_fUpdateTime();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputPoseActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
    pub pose: TrackedDevicePose_t,
}
#[test]
fn bindgen_test_layout_InputPoseActionData_t() {
    assert_eq!(
        ::std::mem::size_of::<InputPoseActionData_t>(),
        96usize,
        concat!("Size of: ", stringify!(InputPoseActionData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputPoseActionData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputPoseActionData_t))
    );
    fn test_field_bActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputPoseActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bActive) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(InputPoseActionData_t),
                "::",
                stringify!(bActive)
            )
        );
    }
    test_field_bActive();
    fn test_field_activeOrigin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputPoseActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).activeOrigin) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(InputPoseActionData_t),
                "::",
                stringify!(activeOrigin)
            )
        );
    }
    test_field_activeOrigin();
    fn test_field_pose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputPoseActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pose) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(InputPoseActionData_t),
                "::",
                stringify!(pose)
            )
        );
    }
    test_field_pose();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputSkeletalActionData_t {
    pub bActive: bool,
    pub activeOrigin: VRInputValueHandle_t,
}
#[test]
fn bindgen_test_layout_InputSkeletalActionData_t() {
    assert_eq!(
        ::std::mem::size_of::<InputSkeletalActionData_t>(),
        16usize,
        concat!("Size of: ", stringify!(InputSkeletalActionData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputSkeletalActionData_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputSkeletalActionData_t))
    );
    fn test_field_bActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputSkeletalActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bActive) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(InputSkeletalActionData_t),
                "::",
                stringify!(bActive)
            )
        );
    }
    test_field_bActive();
    fn test_field_activeOrigin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputSkeletalActionData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).activeOrigin) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(InputSkeletalActionData_t),
                "::",
                stringify!(activeOrigin)
            )
        );
    }
    test_field_activeOrigin();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InputOriginInfo_t {
    pub devicePath: VRInputValueHandle_t,
    pub trackedDeviceIndex: TrackedDeviceIndex_t,
    pub rchRenderModelComponentName: [::std::os::raw::c_char; 128usize],
}
#[test]
fn bindgen_test_layout_InputOriginInfo_t() {
    assert_eq!(
        ::std::mem::size_of::<InputOriginInfo_t>(),
        144usize,
        concat!("Size of: ", stringify!(InputOriginInfo_t))
    );
    assert_eq!(
        ::std::mem::align_of::<InputOriginInfo_t>(),
        8usize,
        concat!("Alignment of ", stringify!(InputOriginInfo_t))
    );
    fn test_field_devicePath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputOriginInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).devicePath) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(InputOriginInfo_t),
                "::",
                stringify!(devicePath)
            )
        );
    }
    test_field_devicePath();
    fn test_field_trackedDeviceIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputOriginInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trackedDeviceIndex) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(InputOriginInfo_t),
                "::",
                stringify!(trackedDeviceIndex)
            )
        );
    }
    test_field_trackedDeviceIndex();
    fn test_field_rchRenderModelComponentName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<InputOriginInfo_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rchRenderModelComponentName) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(InputOriginInfo_t),
                "::",
                stringify!(rchRenderModelComponentName)
            )
        );
    }
    test_field_rchRenderModelComponentName();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRActiveActionSet_t {
    pub ulActionSet: VRActionSetHandle_t,
    pub ulRestrictedToDevice: VRInputValueHandle_t,
    pub ulSecondaryActionSet: VRActionSetHandle_t,
    pub unPadding: u32,
    pub nPriority: i32,
}
#[test]
fn bindgen_test_layout_VRActiveActionSet_t() {
    assert_eq!(
        ::std::mem::size_of::<VRActiveActionSet_t>(),
        32usize,
        concat!("Size of: ", stringify!(VRActiveActionSet_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRActiveActionSet_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VRActiveActionSet_t))
    );
    fn test_field_ulActionSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRActiveActionSet_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulActionSet) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRActiveActionSet_t),
                "::",
                stringify!(ulActionSet)
            )
        );
    }
    test_field_ulActionSet();
    fn test_field_ulRestrictedToDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRActiveActionSet_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulRestrictedToDevice) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VRActiveActionSet_t),
                "::",
                stringify!(ulRestrictedToDevice)
            )
        );
    }
    test_field_ulRestrictedToDevice();
    fn test_field_ulSecondaryActionSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRActiveActionSet_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ulSecondaryActionSet) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VRActiveActionSet_t),
                "::",
                stringify!(ulSecondaryActionSet)
            )
        );
    }
    test_field_ulSecondaryActionSet();
    fn test_field_unPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRActiveActionSet_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unPadding) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VRActiveActionSet_t),
                "::",
                stringify!(unPadding)
            )
        );
    }
    test_field_unPadding();
    fn test_field_nPriority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRActiveActionSet_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nPriority) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(VRActiveActionSet_t),
                "::",
                stringify!(nPriority)
            )
        );
    }
    test_field_nPriority();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRSkeletalSummaryData_t {
    pub flFingerCurl: [f32; 5usize],
    pub flFingerSplay: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_VRSkeletalSummaryData_t() {
    assert_eq!(
        ::std::mem::size_of::<VRSkeletalSummaryData_t>(),
        36usize,
        concat!("Size of: ", stringify!(VRSkeletalSummaryData_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VRSkeletalSummaryData_t>(),
        4usize,
        concat!("Alignment of ", stringify!(VRSkeletalSummaryData_t))
    );
    fn test_field_flFingerCurl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRSkeletalSummaryData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flFingerCurl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRSkeletalSummaryData_t),
                "::",
                stringify!(flFingerCurl)
            )
        );
    }
    test_field_flFingerCurl();
    fn test_field_flFingerSplay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRSkeletalSummaryData_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flFingerSplay) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(VRSkeletalSummaryData_t),
                "::",
                stringify!(flFingerSplay)
            )
        );
    }
    test_field_flFingerSplay();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SpatialAnchorPose_t {
    pub mAnchorToAbsoluteTracking: HmdMatrix34_t,
}
#[test]
fn bindgen_test_layout_SpatialAnchorPose_t() {
    assert_eq!(
        ::std::mem::size_of::<SpatialAnchorPose_t>(),
        48usize,
        concat!("Size of: ", stringify!(SpatialAnchorPose_t))
    );
    assert_eq!(
        ::std::mem::align_of::<SpatialAnchorPose_t>(),
        4usize,
        concat!("Alignment of ", stringify!(SpatialAnchorPose_t))
    );
    fn test_field_mAnchorToAbsoluteTracking() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<SpatialAnchorPose_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mAnchorToAbsoluteTracking) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(SpatialAnchorPose_t),
                "::",
                stringify!(mAnchorToAbsoluteTracking)
            )
        );
    }
    test_field_mAnchorToAbsoluteTracking();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COpenVRContext {
    pub m_pVRSystem: isize,
    pub m_pVRChaperone: isize,
    pub m_pVRChaperoneSetup: isize,
    pub m_pVRCompositor: isize,
    pub m_pVROverlay: isize,
    pub m_pVRResources: isize,
    pub m_pVRRenderModels: isize,
    pub m_pVRExtendedDisplay: isize,
    pub m_pVRSettings: isize,
    pub m_pVRApplications: isize,
    pub m_pVRTrackedCamera: isize,
    pub m_pVRScreenshots: isize,
    pub m_pVRDriverManager: isize,
    pub m_pVRInput: isize,
    pub m_pVRIOBuffer: isize,
    pub m_pVRSpatialAnchors: isize,
    pub m_pVRNotifications: isize,
}
#[test]
fn bindgen_test_layout_COpenVRContext() {
    assert_eq!(
        ::std::mem::size_of::<COpenVRContext>(),
        136usize,
        concat!("Size of: ", stringify!(COpenVRContext))
    );
    assert_eq!(
        ::std::mem::align_of::<COpenVRContext>(),
        8usize,
        concat!("Alignment of ", stringify!(COpenVRContext))
    );
    fn test_field_m_pVRSystem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRSystem) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRSystem)
            )
        );
    }
    test_field_m_pVRSystem();
    fn test_field_m_pVRChaperone() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRChaperone) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRChaperone)
            )
        );
    }
    test_field_m_pVRChaperone();
    fn test_field_m_pVRChaperoneSetup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRChaperoneSetup) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRChaperoneSetup)
            )
        );
    }
    test_field_m_pVRChaperoneSetup();
    fn test_field_m_pVRCompositor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRCompositor) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRCompositor)
            )
        );
    }
    test_field_m_pVRCompositor();
    fn test_field_m_pVROverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVROverlay) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVROverlay)
            )
        );
    }
    test_field_m_pVROverlay();
    fn test_field_m_pVRResources() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRResources) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRResources)
            )
        );
    }
    test_field_m_pVRResources();
    fn test_field_m_pVRRenderModels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRRenderModels) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRRenderModels)
            )
        );
    }
    test_field_m_pVRRenderModels();
    fn test_field_m_pVRExtendedDisplay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRExtendedDisplay) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRExtendedDisplay)
            )
        );
    }
    test_field_m_pVRExtendedDisplay();
    fn test_field_m_pVRSettings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRSettings) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRSettings)
            )
        );
    }
    test_field_m_pVRSettings();
    fn test_field_m_pVRApplications() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRApplications) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRApplications)
            )
        );
    }
    test_field_m_pVRApplications();
    fn test_field_m_pVRTrackedCamera() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRTrackedCamera) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRTrackedCamera)
            )
        );
    }
    test_field_m_pVRTrackedCamera();
    fn test_field_m_pVRScreenshots() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRScreenshots) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRScreenshots)
            )
        );
    }
    test_field_m_pVRScreenshots();
    fn test_field_m_pVRDriverManager() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRDriverManager) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRDriverManager)
            )
        );
    }
    test_field_m_pVRDriverManager();
    fn test_field_m_pVRInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRInput) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRInput)
            )
        );
    }
    test_field_m_pVRInput();
    fn test_field_m_pVRIOBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRIOBuffer) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRIOBuffer)
            )
        );
    }
    test_field_m_pVRIOBuffer();
    fn test_field_m_pVRSpatialAnchors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRSpatialAnchors) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRSpatialAnchors)
            )
        );
    }
    test_field_m_pVRSpatialAnchors();
    fn test_field_m_pVRNotifications() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<COpenVRContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_pVRNotifications) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(COpenVRContext),
                "::",
                stringify!(m_pVRNotifications)
            )
        );
    }
    test_field_m_pVRNotifications();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VREvent_Data_t {
    pub reserved: VREvent_Reserved_t,
    pub controller: VREvent_Controller_t,
    pub mouse: VREvent_Mouse_t,
    pub scroll: VREvent_Scroll_t,
    pub process: VREvent_Process_t,
    pub notification: VREvent_Notification_t,
    pub overlay: VREvent_Overlay_t,
    pub status: VREvent_Status_t,
    pub keyboard: VREvent_Keyboard_t,
    pub ipd: VREvent_Ipd_t,
    pub chaperone: VREvent_Chaperone_t,
    pub performanceTest: VREvent_PerformanceTest_t,
    pub touchPadMove: VREvent_TouchPadMove_t,
    pub seatedZeroPoseReset: VREvent_SeatedZeroPoseReset_t,
    pub screenshot: VREvent_Screenshot_t,
    pub screenshotProgress: VREvent_ScreenshotProgress_t,
    pub applicationLaunch: VREvent_ApplicationLaunch_t,
    pub cameraSurface: VREvent_EditingCameraSurface_t,
    pub messageOverlay: VREvent_MessageOverlay_t,
    pub property: VREvent_Property_t,
    pub dualAnalog: VREvent_DualAnalog_t,
    pub hapticVibration: VREvent_HapticVibration_t,
    pub webConsole: VREvent_WebConsole_t,
    pub inputBinding: VREvent_InputBindingLoad_t,
    pub actionManifest: VREvent_InputActionManifestLoad_t,
    pub spatialAnchor: VREvent_SpatialAnchor_t,
}
#[test]
fn bindgen_test_layout_VREvent_Data_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Data_t>(),
        48usize,
        concat!("Size of: ", stringify!(VREvent_Data_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Data_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Data_t))
    );
    fn test_field_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(reserved)
            )
        );
    }
    test_field_reserved();
    fn test_field_controller() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).controller) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(controller)
            )
        );
    }
    test_field_controller();
    fn test_field_mouse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mouse) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(mouse)
            )
        );
    }
    test_field_mouse();
    fn test_field_scroll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scroll) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(scroll)
            )
        );
    }
    test_field_scroll();
    fn test_field_process() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).process) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(process)
            )
        );
    }
    test_field_process();
    fn test_field_notification() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).notification) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(notification)
            )
        );
    }
    test_field_notification();
    fn test_field_overlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).overlay) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(overlay)
            )
        );
    }
    test_field_overlay();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_keyboard() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).keyboard) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(keyboard)
            )
        );
    }
    test_field_keyboard();
    fn test_field_ipd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ipd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(ipd)
            )
        );
    }
    test_field_ipd();
    fn test_field_chaperone() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).chaperone) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(chaperone)
            )
        );
    }
    test_field_chaperone();
    fn test_field_performanceTest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).performanceTest) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(performanceTest)
            )
        );
    }
    test_field_performanceTest();
    fn test_field_touchPadMove() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).touchPadMove) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(touchPadMove)
            )
        );
    }
    test_field_touchPadMove();
    fn test_field_seatedZeroPoseReset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).seatedZeroPoseReset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(seatedZeroPoseReset)
            )
        );
    }
    test_field_seatedZeroPoseReset();
    fn test_field_screenshot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).screenshot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(screenshot)
            )
        );
    }
    test_field_screenshot();
    fn test_field_screenshotProgress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).screenshotProgress) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(screenshotProgress)
            )
        );
    }
    test_field_screenshotProgress();
    fn test_field_applicationLaunch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).applicationLaunch) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(applicationLaunch)
            )
        );
    }
    test_field_applicationLaunch();
    fn test_field_cameraSurface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cameraSurface) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(cameraSurface)
            )
        );
    }
    test_field_cameraSurface();
    fn test_field_messageOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).messageOverlay) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(messageOverlay)
            )
        );
    }
    test_field_messageOverlay();
    fn test_field_property() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).property) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(property)
            )
        );
    }
    test_field_property();
    fn test_field_dualAnalog() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dualAnalog) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(dualAnalog)
            )
        );
    }
    test_field_dualAnalog();
    fn test_field_hapticVibration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hapticVibration) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(hapticVibration)
            )
        );
    }
    test_field_hapticVibration();
    fn test_field_webConsole() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).webConsole) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(webConsole)
            )
        );
    }
    test_field_webConsole();
    fn test_field_inputBinding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inputBinding) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(inputBinding)
            )
        );
    }
    test_field_inputBinding();
    fn test_field_actionManifest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actionManifest) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(actionManifest)
            )
        );
    }
    test_field_actionManifest();
    fn test_field_spatialAnchor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spatialAnchor) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Data_t),
                "::",
                stringify!(spatialAnchor)
            )
        );
    }
    test_field_spatialAnchor();
}
#[doc = " An event posted by the server to all running applications"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VREvent_t {
    pub eventType: u32,
    pub trackedDeviceIndex: TrackedDeviceIndex_t,
    pub eventAgeSeconds: f32,
    pub data: VREvent_Data_t,
}
#[test]
fn bindgen_test_layout_VREvent_t() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_t>(),
        64usize,
        concat!("Size of: ", stringify!(VREvent_t))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_t>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_t))
    );
    fn test_field_eventType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eventType) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_t),
                "::",
                stringify!(eventType)
            )
        );
    }
    test_field_eventType();
    fn test_field_trackedDeviceIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trackedDeviceIndex) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_t),
                "::",
                stringify!(trackedDeviceIndex)
            )
        );
    }
    test_field_trackedDeviceIndex();
    fn test_field_eventAgeSeconds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eventAgeSeconds) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_t),
                "::",
                stringify!(eventAgeSeconds)
            )
        );
    }
    test_field_eventAgeSeconds();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_t),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union VROverlayIntersectionMaskPrimitive_Data_t {
    pub m_Rectangle: IntersectionMaskRectangle_t,
    pub m_Circle: IntersectionMaskCircle_t,
}
#[test]
fn bindgen_test_layout_VROverlayIntersectionMaskPrimitive_Data_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayIntersectionMaskPrimitive_Data_t>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(VROverlayIntersectionMaskPrimitive_Data_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayIntersectionMaskPrimitive_Data_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VROverlayIntersectionMaskPrimitive_Data_t)
        )
    );
    fn test_field_m_Rectangle() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VROverlayIntersectionMaskPrimitive_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_Rectangle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionMaskPrimitive_Data_t),
                "::",
                stringify!(m_Rectangle)
            )
        );
    }
    test_field_m_Rectangle();
    fn test_field_m_Circle() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VROverlayIntersectionMaskPrimitive_Data_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_Circle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionMaskPrimitive_Data_t),
                "::",
                stringify!(m_Circle)
            )
        );
    }
    test_field_m_Circle();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct VROverlayIntersectionMaskPrimitive_t {
    pub m_nPrimitiveType: EVROverlayIntersectionMaskPrimitiveType,
    pub m_Primitive: VROverlayIntersectionMaskPrimitive_Data_t,
}
#[test]
fn bindgen_test_layout_VROverlayIntersectionMaskPrimitive_t() {
    assert_eq!(
        ::std::mem::size_of::<VROverlayIntersectionMaskPrimitive_t>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(VROverlayIntersectionMaskPrimitive_t)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<VROverlayIntersectionMaskPrimitive_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(VROverlayIntersectionMaskPrimitive_t)
        )
    );
    fn test_field_m_nPrimitiveType() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VROverlayIntersectionMaskPrimitive_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_nPrimitiveType) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionMaskPrimitive_t),
                "::",
                stringify!(m_nPrimitiveType)
            )
        );
    }
    test_field_m_nPrimitiveType();
    fn test_field_m_Primitive() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<VROverlayIntersectionMaskPrimitive_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).m_Primitive) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(VROverlayIntersectionMaskPrimitive_t),
                "::",
                stringify!(m_Primitive)
            )
        );
    }
    test_field_m_Primitive();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSystem_FnTable {
    pub GetRecommendedRenderTargetSize:
        ::std::option::Option<unsafe extern "C" fn(pnWidth: *mut u32, pnHeight: *mut u32)>,
    pub GetProjectionMatrix: ::std::option::Option<
        unsafe extern "C" fn(eEye: EVREye, fNearZ: f32, fFarZ: f32) -> HmdMatrix44_t,
    >,
    pub GetProjectionRaw: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pfLeft: *mut f32,
            pfRight: *mut f32,
            pfTop: *mut f32,
            pfBottom: *mut f32,
        ),
    >,
    pub ComputeDistortion: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            fU: f32,
            fV: f32,
            pDistortionCoordinates: *mut DistortionCoordinates_t,
        ) -> bool,
    >,
    pub GetEyeToHeadTransform:
        ::std::option::Option<unsafe extern "C" fn(eEye: EVREye) -> HmdMatrix34_t>,
    pub GetTimeSinceLastVsync: ::std::option::Option<
        unsafe extern "C" fn(pfSecondsSinceLastVsync: *mut f32, pulFrameCounter: *mut u64) -> bool,
    >,
    pub GetD3D9AdapterIndex: ::std::option::Option<unsafe extern "C" fn() -> i32>,
    pub GetDXGIOutputInfo: ::std::option::Option<unsafe extern "C" fn(pnAdapterIndex: *mut i32)>,
    pub GetOutputDevice: ::std::option::Option<
        unsafe extern "C" fn(
            pnDevice: *mut u64,
            textureType: ETextureType,
            pInstance: *mut VkInstance_T,
        ),
    >,
    pub IsDisplayOnDesktop: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub SetDisplayVisibility:
        ::std::option::Option<unsafe extern "C" fn(bIsVisibleOnDesktop: bool) -> bool>,
    pub GetDeviceToAbsoluteTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            fPredictedSecondsToPhotonsFromNow: f32,
            pTrackedDevicePoseArray: *mut TrackedDevicePose_t,
            unTrackedDevicePoseArrayCount: u32,
        ),
    >,
    pub ResetSeatedZeroPose: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetSeatedZeroPoseToStandingAbsoluteTrackingPose:
        ::std::option::Option<unsafe extern "C" fn() -> HmdMatrix34_t>,
    pub GetRawZeroPoseToStandingAbsoluteTrackingPose:
        ::std::option::Option<unsafe extern "C" fn() -> HmdMatrix34_t>,
    pub GetSortedTrackedDeviceIndicesOfClass: ::std::option::Option<
        unsafe extern "C" fn(
            eTrackedDeviceClass: ETrackedDeviceClass,
            punTrackedDeviceIndexArray: *mut TrackedDeviceIndex_t,
            unTrackedDeviceIndexArrayCount: u32,
            unRelativeToTrackedDeviceIndex: TrackedDeviceIndex_t,
        ) -> u32,
    >,
    pub GetTrackedDeviceActivityLevel: ::std::option::Option<
        unsafe extern "C" fn(unDeviceId: TrackedDeviceIndex_t) -> EDeviceActivityLevel,
    >,
    pub ApplyTransform: ::std::option::Option<
        unsafe extern "C" fn(
            pOutputPose: *mut TrackedDevicePose_t,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
            pTransform: *mut HmdMatrix34_t,
        ),
    >,
    pub GetTrackedDeviceIndexForControllerRole: ::std::option::Option<
        unsafe extern "C" fn(unDeviceType: ETrackedControllerRole) -> TrackedDeviceIndex_t,
    >,
    pub GetControllerRoleForTrackedDeviceIndex: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> ETrackedControllerRole,
    >,
    pub GetTrackedDeviceClass: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> ETrackedDeviceClass,
    >,
    pub IsTrackedDeviceConnected:
        ::std::option::Option<unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> bool>,
    pub GetBoolTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> bool,
    >,
    pub GetFloatTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> f32,
    >,
    pub GetInt32TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> i32,
    >,
    pub GetUint64TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> u64,
    >,
    pub GetMatrix34TrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pError: *mut ETrackedPropertyError,
        ) -> HmdMatrix34_t,
    >,
    pub GetArrayTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            propType: PropertyTypeTag_t,
            pBuffer: *mut ::std::os::raw::c_void,
            unBufferSize: u32,
            pError: *mut ETrackedPropertyError,
        ) -> u32,
    >,
    pub GetStringTrackedDeviceProperty: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            prop: ETrackedDeviceProperty,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut ETrackedPropertyError,
        ) -> u32,
    >,
    pub GetPropErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: ETrackedPropertyError) -> *mut ::std::os::raw::c_char,
    >,
    pub PollNextEvent: ::std::option::Option<
        unsafe extern "C" fn(pEvent: *mut VREvent_t, uncbVREvent: u32) -> bool,
    >,
    pub PollNextEventWithPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            pEvent: *mut VREvent_t,
            uncbVREvent: u32,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
        ) -> bool,
    >,
    pub GetEventTypeNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eType: EVREventType) -> *mut ::std::os::raw::c_char,
    >,
    pub GetHiddenAreaMesh: ::std::option::Option<
        unsafe extern "C" fn(eEye: EVREye, type_: EHiddenAreaMeshType) -> HiddenAreaMesh_t,
    >,
    pub GetControllerState: ::std::option::Option<
        unsafe extern "C" fn(
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            pControllerState: *mut VRControllerState_t,
            unControllerStateSize: u32,
        ) -> bool,
    >,
    pub GetControllerStateWithPose: ::std::option::Option<
        unsafe extern "C" fn(
            eOrigin: ETrackingUniverseOrigin,
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            pControllerState: *mut VRControllerState_t,
            unControllerStateSize: u32,
            pTrackedDevicePose: *mut TrackedDevicePose_t,
        ) -> bool,
    >,
    pub TriggerHapticPulse: ::std::option::Option<
        unsafe extern "C" fn(
            unControllerDeviceIndex: TrackedDeviceIndex_t,
            unAxisId: u32,
            usDurationMicroSec: ::std::os::raw::c_ushort,
        ),
    >,
    pub GetButtonIdNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eButtonId: EVRButtonId) -> *mut ::std::os::raw::c_char,
    >,
    pub GetControllerAxisTypeNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eAxisType: EVRControllerAxisType) -> *mut ::std::os::raw::c_char,
    >,
    pub IsInputAvailable: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsSteamVRDrawingControllers: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShouldApplicationPause: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShouldApplicationReduceRenderingWork: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub DriverDebugRequest: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            pchRequest: *mut ::std::os::raw::c_char,
            pchResponseBuffer: *mut ::std::os::raw::c_char,
            unResponseBufferSize: u32,
        ) -> u32,
    >,
    pub PerformFirmwareUpdate: ::std::option::Option<
        unsafe extern "C" fn(unDeviceIndex: TrackedDeviceIndex_t) -> EVRFirmwareError,
    >,
    pub AcknowledgeQuit_Exiting: ::std::option::Option<unsafe extern "C" fn()>,
    pub AcknowledgeQuit_UserPrompt: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_VR_IVRSystem_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRSystem_FnTable>(),
        376usize,
        concat!("Size of: ", stringify!(VR_IVRSystem_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRSystem_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRSystem_FnTable))
    );
    fn test_field_GetRecommendedRenderTargetSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetRecommendedRenderTargetSize) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetRecommendedRenderTargetSize)
            )
        );
    }
    test_field_GetRecommendedRenderTargetSize();
    fn test_field_GetProjectionMatrix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetProjectionMatrix) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetProjectionMatrix)
            )
        );
    }
    test_field_GetProjectionMatrix();
    fn test_field_GetProjectionRaw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetProjectionRaw) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetProjectionRaw)
            )
        );
    }
    test_field_GetProjectionRaw();
    fn test_field_ComputeDistortion() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ComputeDistortion) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(ComputeDistortion)
            )
        );
    }
    test_field_ComputeDistortion();
    fn test_field_GetEyeToHeadTransform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetEyeToHeadTransform) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetEyeToHeadTransform)
            )
        );
    }
    test_field_GetEyeToHeadTransform();
    fn test_field_GetTimeSinceLastVsync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTimeSinceLastVsync) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetTimeSinceLastVsync)
            )
        );
    }
    test_field_GetTimeSinceLastVsync();
    fn test_field_GetD3D9AdapterIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetD3D9AdapterIndex) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetD3D9AdapterIndex)
            )
        );
    }
    test_field_GetD3D9AdapterIndex();
    fn test_field_GetDXGIOutputInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDXGIOutputInfo) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetDXGIOutputInfo)
            )
        );
    }
    test_field_GetDXGIOutputInfo();
    fn test_field_GetOutputDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOutputDevice) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetOutputDevice)
            )
        );
    }
    test_field_GetOutputDevice();
    fn test_field_IsDisplayOnDesktop() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsDisplayOnDesktop) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(IsDisplayOnDesktop)
            )
        );
    }
    test_field_IsDisplayOnDesktop();
    fn test_field_SetDisplayVisibility() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetDisplayVisibility) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(SetDisplayVisibility)
            )
        );
    }
    test_field_SetDisplayVisibility();
    fn test_field_GetDeviceToAbsoluteTrackingPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDeviceToAbsoluteTrackingPose) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetDeviceToAbsoluteTrackingPose)
            )
        );
    }
    test_field_GetDeviceToAbsoluteTrackingPose();
    fn test_field_ResetSeatedZeroPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResetSeatedZeroPose) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(ResetSeatedZeroPose)
            )
        );
    }
    test_field_ResetSeatedZeroPose();
    fn test_field_GetSeatedZeroPoseToStandingAbsoluteTrackingPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSeatedZeroPoseToStandingAbsoluteTrackingPose)
                    as usize
                    - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetSeatedZeroPoseToStandingAbsoluteTrackingPose)
            )
        );
    }
    test_field_GetSeatedZeroPoseToStandingAbsoluteTrackingPose();
    fn test_field_GetRawZeroPoseToStandingAbsoluteTrackingPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetRawZeroPoseToStandingAbsoluteTrackingPose) as usize
                    - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetRawZeroPoseToStandingAbsoluteTrackingPose)
            )
        );
    }
    test_field_GetRawZeroPoseToStandingAbsoluteTrackingPose();
    fn test_field_GetSortedTrackedDeviceIndicesOfClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSortedTrackedDeviceIndicesOfClass) as usize
                    - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetSortedTrackedDeviceIndicesOfClass)
            )
        );
    }
    test_field_GetSortedTrackedDeviceIndicesOfClass();
    fn test_field_GetTrackedDeviceActivityLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTrackedDeviceActivityLevel) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetTrackedDeviceActivityLevel)
            )
        );
    }
    test_field_GetTrackedDeviceActivityLevel();
    fn test_field_ApplyTransform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ApplyTransform) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(ApplyTransform)
            )
        );
    }
    test_field_ApplyTransform();
    fn test_field_GetTrackedDeviceIndexForControllerRole() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTrackedDeviceIndexForControllerRole) as usize
                    - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetTrackedDeviceIndexForControllerRole)
            )
        );
    }
    test_field_GetTrackedDeviceIndexForControllerRole();
    fn test_field_GetControllerRoleForTrackedDeviceIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetControllerRoleForTrackedDeviceIndex) as usize
                    - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetControllerRoleForTrackedDeviceIndex)
            )
        );
    }
    test_field_GetControllerRoleForTrackedDeviceIndex();
    fn test_field_GetTrackedDeviceClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTrackedDeviceClass) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetTrackedDeviceClass)
            )
        );
    }
    test_field_GetTrackedDeviceClass();
    fn test_field_IsTrackedDeviceConnected() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsTrackedDeviceConnected) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(IsTrackedDeviceConnected)
            )
        );
    }
    test_field_IsTrackedDeviceConnected();
    fn test_field_GetBoolTrackedDeviceProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoolTrackedDeviceProperty) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetBoolTrackedDeviceProperty)
            )
        );
    }
    test_field_GetBoolTrackedDeviceProperty();
    fn test_field_GetFloatTrackedDeviceProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFloatTrackedDeviceProperty) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetFloatTrackedDeviceProperty)
            )
        );
    }
    test_field_GetFloatTrackedDeviceProperty();
    fn test_field_GetInt32TrackedDeviceProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInt32TrackedDeviceProperty) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetInt32TrackedDeviceProperty)
            )
        );
    }
    test_field_GetInt32TrackedDeviceProperty();
    fn test_field_GetUint64TrackedDeviceProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetUint64TrackedDeviceProperty) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetUint64TrackedDeviceProperty)
            )
        );
    }
    test_field_GetUint64TrackedDeviceProperty();
    fn test_field_GetMatrix34TrackedDeviceProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMatrix34TrackedDeviceProperty) as usize
                    - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetMatrix34TrackedDeviceProperty)
            )
        );
    }
    test_field_GetMatrix34TrackedDeviceProperty();
    fn test_field_GetArrayTrackedDeviceProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetArrayTrackedDeviceProperty) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetArrayTrackedDeviceProperty)
            )
        );
    }
    test_field_GetArrayTrackedDeviceProperty();
    fn test_field_GetStringTrackedDeviceProperty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStringTrackedDeviceProperty) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetStringTrackedDeviceProperty)
            )
        );
    }
    test_field_GetStringTrackedDeviceProperty();
    fn test_field_GetPropErrorNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPropErrorNameFromEnum) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetPropErrorNameFromEnum)
            )
        );
    }
    test_field_GetPropErrorNameFromEnum();
    fn test_field_PollNextEvent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PollNextEvent) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(PollNextEvent)
            )
        );
    }
    test_field_PollNextEvent();
    fn test_field_PollNextEventWithPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PollNextEventWithPose) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(PollNextEventWithPose)
            )
        );
    }
    test_field_PollNextEventWithPose();
    fn test_field_GetEventTypeNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetEventTypeNameFromEnum) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetEventTypeNameFromEnum)
            )
        );
    }
    test_field_GetEventTypeNameFromEnum();
    fn test_field_GetHiddenAreaMesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetHiddenAreaMesh) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetHiddenAreaMesh)
            )
        );
    }
    test_field_GetHiddenAreaMesh();
    fn test_field_GetControllerState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetControllerState) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetControllerState)
            )
        );
    }
    test_field_GetControllerState();
    fn test_field_GetControllerStateWithPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetControllerStateWithPose) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetControllerStateWithPose)
            )
        );
    }
    test_field_GetControllerStateWithPose();
    fn test_field_TriggerHapticPulse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TriggerHapticPulse) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(TriggerHapticPulse)
            )
        );
    }
    test_field_TriggerHapticPulse();
    fn test_field_GetButtonIdNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetButtonIdNameFromEnum) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetButtonIdNameFromEnum)
            )
        );
    }
    test_field_GetButtonIdNameFromEnum();
    fn test_field_GetControllerAxisTypeNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetControllerAxisTypeNameFromEnum) as usize
                    - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(GetControllerAxisTypeNameFromEnum)
            )
        );
    }
    test_field_GetControllerAxisTypeNameFromEnum();
    fn test_field_IsInputAvailable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsInputAvailable) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(IsInputAvailable)
            )
        );
    }
    test_field_IsInputAvailable();
    fn test_field_IsSteamVRDrawingControllers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSteamVRDrawingControllers) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(IsSteamVRDrawingControllers)
            )
        );
    }
    test_field_IsSteamVRDrawingControllers();
    fn test_field_ShouldApplicationPause() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShouldApplicationPause) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(ShouldApplicationPause)
            )
        );
    }
    test_field_ShouldApplicationPause();
    fn test_field_ShouldApplicationReduceRenderingWork() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShouldApplicationReduceRenderingWork) as usize
                    - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(ShouldApplicationReduceRenderingWork)
            )
        );
    }
    test_field_ShouldApplicationReduceRenderingWork();
    fn test_field_DriverDebugRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DriverDebugRequest) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(DriverDebugRequest)
            )
        );
    }
    test_field_DriverDebugRequest();
    fn test_field_PerformFirmwareUpdate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PerformFirmwareUpdate) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(PerformFirmwareUpdate)
            )
        );
    }
    test_field_PerformFirmwareUpdate();
    fn test_field_AcknowledgeQuit_Exiting() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AcknowledgeQuit_Exiting) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(AcknowledgeQuit_Exiting)
            )
        );
    }
    test_field_AcknowledgeQuit_Exiting();
    fn test_field_AcknowledgeQuit_UserPrompt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSystem_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AcknowledgeQuit_UserPrompt) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSystem_FnTable),
                "::",
                stringify!(AcknowledgeQuit_UserPrompt)
            )
        );
    }
    test_field_AcknowledgeQuit_UserPrompt();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRExtendedDisplay_FnTable {
    pub GetWindowBounds: ::std::option::Option<
        unsafe extern "C" fn(pnX: *mut i32, pnY: *mut i32, pnWidth: *mut u32, pnHeight: *mut u32),
    >,
    pub GetEyeOutputViewport: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pnX: *mut u32,
            pnY: *mut u32,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
        ),
    >,
    pub GetDXGIOutputInfo: ::std::option::Option<
        unsafe extern "C" fn(pnAdapterIndex: *mut i32, pnAdapterOutputIndex: *mut i32),
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRExtendedDisplay_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRExtendedDisplay_FnTable>(),
        24usize,
        concat!("Size of: ", stringify!(VR_IVRExtendedDisplay_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRExtendedDisplay_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRExtendedDisplay_FnTable))
    );
    fn test_field_GetWindowBounds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRExtendedDisplay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetWindowBounds) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRExtendedDisplay_FnTable),
                "::",
                stringify!(GetWindowBounds)
            )
        );
    }
    test_field_GetWindowBounds();
    fn test_field_GetEyeOutputViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRExtendedDisplay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetEyeOutputViewport) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRExtendedDisplay_FnTable),
                "::",
                stringify!(GetEyeOutputViewport)
            )
        );
    }
    test_field_GetEyeOutputViewport();
    fn test_field_GetDXGIOutputInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRExtendedDisplay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDXGIOutputInfo) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRExtendedDisplay_FnTable),
                "::",
                stringify!(GetDXGIOutputInfo)
            )
        );
    }
    test_field_GetDXGIOutputInfo();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRTrackedCamera_FnTable {
    pub GetCameraErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eCameraError: EVRTrackedCameraError) -> *mut ::std::os::raw::c_char,
    >,
    pub HasCamera: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            pHasCamera: *mut bool,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraFrameSize: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            eFrameType: EVRTrackedCameraFrameType,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
            pnFrameBufferSize: *mut u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraIntrinsics: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            nCameraIndex: u32,
            eFrameType: EVRTrackedCameraFrameType,
            pFocalLength: *mut HmdVector2_t,
            pCenter: *mut HmdVector2_t,
        ) -> EVRTrackedCameraError,
    >,
    pub GetCameraProjection: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            nCameraIndex: u32,
            eFrameType: EVRTrackedCameraFrameType,
            flZNear: f32,
            flZFar: f32,
            pProjection: *mut HmdMatrix44_t,
        ) -> EVRTrackedCameraError,
    >,
    pub AcquireVideoStreamingService: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            pHandle: *mut TrackedCameraHandle_t,
        ) -> EVRTrackedCameraError,
    >,
    pub ReleaseVideoStreamingService: ::std::option::Option<
        unsafe extern "C" fn(hTrackedCamera: TrackedCameraHandle_t) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamFrameBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pFrameBuffer: *mut ::std::os::raw::c_void,
            nFrameBufferSize: u32,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureSize: ::std::option::Option<
        unsafe extern "C" fn(
            nDeviceIndex: TrackedDeviceIndex_t,
            eFrameType: EVRTrackedCameraFrameType,
            pTextureBounds: *mut VRTextureBounds_t,
            pnWidth: *mut u32,
            pnHeight: *mut u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pD3D11DeviceOrResource: *mut ::std::os::raw::c_void,
            ppD3D11ShaderResourceView: *mut *mut ::std::os::raw::c_void,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub GetVideoStreamTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            eFrameType: EVRTrackedCameraFrameType,
            pglTextureId: *mut glUInt_t,
            pFrameHeader: *mut CameraVideoStreamFrameHeader_t,
            nFrameHeaderSize: u32,
        ) -> EVRTrackedCameraError,
    >,
    pub ReleaseVideoStreamTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            hTrackedCamera: TrackedCameraHandle_t,
            glTextureId: glUInt_t,
        ) -> EVRTrackedCameraError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRTrackedCamera_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRTrackedCamera_FnTable>(),
        96usize,
        concat!("Size of: ", stringify!(VR_IVRTrackedCamera_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRTrackedCamera_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRTrackedCamera_FnTable))
    );
    fn test_field_GetCameraErrorNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCameraErrorNameFromEnum) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(GetCameraErrorNameFromEnum)
            )
        );
    }
    test_field_GetCameraErrorNameFromEnum();
    fn test_field_HasCamera() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HasCamera) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(HasCamera)
            )
        );
    }
    test_field_HasCamera();
    fn test_field_GetCameraFrameSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCameraFrameSize) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(GetCameraFrameSize)
            )
        );
    }
    test_field_GetCameraFrameSize();
    fn test_field_GetCameraIntrinsics() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCameraIntrinsics) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(GetCameraIntrinsics)
            )
        );
    }
    test_field_GetCameraIntrinsics();
    fn test_field_GetCameraProjection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCameraProjection) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(GetCameraProjection)
            )
        );
    }
    test_field_GetCameraProjection();
    fn test_field_AcquireVideoStreamingService() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AcquireVideoStreamingService) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(AcquireVideoStreamingService)
            )
        );
    }
    test_field_AcquireVideoStreamingService();
    fn test_field_ReleaseVideoStreamingService() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseVideoStreamingService) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(ReleaseVideoStreamingService)
            )
        );
    }
    test_field_ReleaseVideoStreamingService();
    fn test_field_GetVideoStreamFrameBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVideoStreamFrameBuffer) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(GetVideoStreamFrameBuffer)
            )
        );
    }
    test_field_GetVideoStreamFrameBuffer();
    fn test_field_GetVideoStreamTextureSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVideoStreamTextureSize) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(GetVideoStreamTextureSize)
            )
        );
    }
    test_field_GetVideoStreamTextureSize();
    fn test_field_GetVideoStreamTextureD3D11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVideoStreamTextureD3D11) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(GetVideoStreamTextureD3D11)
            )
        );
    }
    test_field_GetVideoStreamTextureD3D11();
    fn test_field_GetVideoStreamTextureGL() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVideoStreamTextureGL) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(GetVideoStreamTextureGL)
            )
        );
    }
    test_field_GetVideoStreamTextureGL();
    fn test_field_ReleaseVideoStreamTextureGL() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRTrackedCamera_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseVideoStreamTextureGL) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRTrackedCamera_FnTable),
                "::",
                stringify!(ReleaseVideoStreamTextureGL)
            )
        );
    }
    test_field_ReleaseVideoStreamTextureGL();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRApplications_FnTable {
    pub AddApplicationManifest: ::std::option::Option<
        unsafe extern "C" fn(
            pchApplicationManifestFullPath: *mut ::std::os::raw::c_char,
            bTemporary: bool,
        ) -> EVRApplicationError,
    >,
    pub RemoveApplicationManifest: ::std::option::Option<
        unsafe extern "C" fn(
            pchApplicationManifestFullPath: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub IsApplicationInstalled:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub GetApplicationCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetApplicationKeyByIndex: ::std::option::Option<
        unsafe extern "C" fn(
            unApplicationIndex: u32,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationKeyByProcessId: ::std::option::Option<
        unsafe extern "C" fn(
            unProcessId: u32,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub LaunchApplication: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub LaunchTemplateApplication: ::std::option::Option<
        unsafe extern "C" fn(
            pchTemplateAppKey: *mut ::std::os::raw::c_char,
            pchNewAppKey: *mut ::std::os::raw::c_char,
            pKeys: *mut AppOverrideKeys_t,
            unKeys: u32,
        ) -> EVRApplicationError,
    >,
    pub LaunchApplicationFromMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchArgs: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub LaunchDashboardOverlay: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub CancelApplicationLaunch:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub IdentifyApplication: ::std::option::Option<
        unsafe extern "C" fn(
            unProcessId: u32,
            pchAppKey: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationProcessId:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> u32>,
    pub GetApplicationsErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVRApplicationError) -> *mut ::std::os::raw::c_char,
    >,
    pub GetApplicationPropertyString: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            pchPropertyValueBuffer: *mut ::std::os::raw::c_char,
            unPropertyValueBufferLen: u32,
            peError: *mut EVRApplicationError,
        ) -> u32,
    >,
    pub GetApplicationPropertyBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            peError: *mut EVRApplicationError,
        ) -> bool,
    >,
    pub GetApplicationPropertyUint64: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            eProperty: EVRApplicationProperty,
            peError: *mut EVRApplicationError,
        ) -> u64,
    >,
    pub SetApplicationAutoLaunch: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            bAutoLaunch: bool,
        ) -> EVRApplicationError,
    >,
    pub GetApplicationAutoLaunch:
        ::std::option::Option<unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> bool>,
    pub SetDefaultApplicationForMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            pchMimeType: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetDefaultApplicationForMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> bool,
    >,
    pub GetApplicationSupportedMimeTypes: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKey: *mut ::std::os::raw::c_char,
            pchMimeTypesBuffer: *mut ::std::os::raw::c_char,
            unMimeTypesBuffer: u32,
        ) -> bool,
    >,
    pub GetApplicationsThatSupportMimeType: ::std::option::Option<
        unsafe extern "C" fn(
            pchMimeType: *mut ::std::os::raw::c_char,
            pchAppKeysThatSupportBuffer: *mut ::std::os::raw::c_char,
            unAppKeysThatSupportBuffer: u32,
        ) -> u32,
    >,
    pub GetApplicationLaunchArguments: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: u32,
            pchArgs: *mut ::std::os::raw::c_char,
            unArgs: u32,
        ) -> u32,
    >,
    pub GetStartingApplication: ::std::option::Option<
        unsafe extern "C" fn(
            pchAppKeyBuffer: *mut ::std::os::raw::c_char,
            unAppKeyBufferLen: u32,
        ) -> EVRApplicationError,
    >,
    pub GetTransitionState:
        ::std::option::Option<unsafe extern "C" fn() -> EVRApplicationTransitionState>,
    pub PerformApplicationPrelaunchCheck: ::std::option::Option<
        unsafe extern "C" fn(pchAppKey: *mut ::std::os::raw::c_char) -> EVRApplicationError,
    >,
    pub GetApplicationsTransitionStateNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(state: EVRApplicationTransitionState) -> *mut ::std::os::raw::c_char,
    >,
    pub IsQuitUserPromptRequested: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub LaunchInternalProcess: ::std::option::Option<
        unsafe extern "C" fn(
            pchBinaryPath: *mut ::std::os::raw::c_char,
            pchArguments: *mut ::std::os::raw::c_char,
            pchWorkingDirectory: *mut ::std::os::raw::c_char,
        ) -> EVRApplicationError,
    >,
    pub GetCurrentSceneProcessId: ::std::option::Option<unsafe extern "C" fn() -> u32>,
}
#[test]
fn bindgen_test_layout_VR_IVRApplications_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRApplications_FnTable>(),
        248usize,
        concat!("Size of: ", stringify!(VR_IVRApplications_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRApplications_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRApplications_FnTable))
    );
    fn test_field_AddApplicationManifest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddApplicationManifest) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(AddApplicationManifest)
            )
        );
    }
    test_field_AddApplicationManifest();
    fn test_field_RemoveApplicationManifest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RemoveApplicationManifest) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(RemoveApplicationManifest)
            )
        );
    }
    test_field_RemoveApplicationManifest();
    fn test_field_IsApplicationInstalled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsApplicationInstalled) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(IsApplicationInstalled)
            )
        );
    }
    test_field_IsApplicationInstalled();
    fn test_field_GetApplicationCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationCount) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationCount)
            )
        );
    }
    test_field_GetApplicationCount();
    fn test_field_GetApplicationKeyByIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationKeyByIndex) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationKeyByIndex)
            )
        );
    }
    test_field_GetApplicationKeyByIndex();
    fn test_field_GetApplicationKeyByProcessId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationKeyByProcessId) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationKeyByProcessId)
            )
        );
    }
    test_field_GetApplicationKeyByProcessId();
    fn test_field_LaunchApplication() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LaunchApplication) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(LaunchApplication)
            )
        );
    }
    test_field_LaunchApplication();
    fn test_field_LaunchTemplateApplication() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LaunchTemplateApplication) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(LaunchTemplateApplication)
            )
        );
    }
    test_field_LaunchTemplateApplication();
    fn test_field_LaunchApplicationFromMimeType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LaunchApplicationFromMimeType) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(LaunchApplicationFromMimeType)
            )
        );
    }
    test_field_LaunchApplicationFromMimeType();
    fn test_field_LaunchDashboardOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LaunchDashboardOverlay) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(LaunchDashboardOverlay)
            )
        );
    }
    test_field_LaunchDashboardOverlay();
    fn test_field_CancelApplicationLaunch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CancelApplicationLaunch) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(CancelApplicationLaunch)
            )
        );
    }
    test_field_CancelApplicationLaunch();
    fn test_field_IdentifyApplication() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IdentifyApplication) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(IdentifyApplication)
            )
        );
    }
    test_field_IdentifyApplication();
    fn test_field_GetApplicationProcessId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationProcessId) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationProcessId)
            )
        );
    }
    test_field_GetApplicationProcessId();
    fn test_field_GetApplicationsErrorNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationsErrorNameFromEnum) as usize
                    - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationsErrorNameFromEnum)
            )
        );
    }
    test_field_GetApplicationsErrorNameFromEnum();
    fn test_field_GetApplicationPropertyString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationPropertyString) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationPropertyString)
            )
        );
    }
    test_field_GetApplicationPropertyString();
    fn test_field_GetApplicationPropertyBool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationPropertyBool) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationPropertyBool)
            )
        );
    }
    test_field_GetApplicationPropertyBool();
    fn test_field_GetApplicationPropertyUint64() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationPropertyUint64) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationPropertyUint64)
            )
        );
    }
    test_field_GetApplicationPropertyUint64();
    fn test_field_SetApplicationAutoLaunch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetApplicationAutoLaunch) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(SetApplicationAutoLaunch)
            )
        );
    }
    test_field_SetApplicationAutoLaunch();
    fn test_field_GetApplicationAutoLaunch() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationAutoLaunch) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationAutoLaunch)
            )
        );
    }
    test_field_GetApplicationAutoLaunch();
    fn test_field_SetDefaultApplicationForMimeType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetDefaultApplicationForMimeType) as usize
                    - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(SetDefaultApplicationForMimeType)
            )
        );
    }
    test_field_SetDefaultApplicationForMimeType();
    fn test_field_GetDefaultApplicationForMimeType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDefaultApplicationForMimeType) as usize
                    - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetDefaultApplicationForMimeType)
            )
        );
    }
    test_field_GetDefaultApplicationForMimeType();
    fn test_field_GetApplicationSupportedMimeTypes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationSupportedMimeTypes) as usize
                    - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationSupportedMimeTypes)
            )
        );
    }
    test_field_GetApplicationSupportedMimeTypes();
    fn test_field_GetApplicationsThatSupportMimeType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationsThatSupportMimeType) as usize
                    - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationsThatSupportMimeType)
            )
        );
    }
    test_field_GetApplicationsThatSupportMimeType();
    fn test_field_GetApplicationLaunchArguments() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationLaunchArguments) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationLaunchArguments)
            )
        );
    }
    test_field_GetApplicationLaunchArguments();
    fn test_field_GetStartingApplication() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetStartingApplication) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetStartingApplication)
            )
        );
    }
    test_field_GetStartingApplication();
    fn test_field_GetTransitionState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTransitionState) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetTransitionState)
            )
        );
    }
    test_field_GetTransitionState();
    fn test_field_PerformApplicationPrelaunchCheck() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PerformApplicationPrelaunchCheck) as usize
                    - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(PerformApplicationPrelaunchCheck)
            )
        );
    }
    test_field_PerformApplicationPrelaunchCheck();
    fn test_field_GetApplicationsTransitionStateNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetApplicationsTransitionStateNameFromEnum) as usize
                    - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetApplicationsTransitionStateNameFromEnum)
            )
        );
    }
    test_field_GetApplicationsTransitionStateNameFromEnum();
    fn test_field_IsQuitUserPromptRequested() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsQuitUserPromptRequested) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(IsQuitUserPromptRequested)
            )
        );
    }
    test_field_IsQuitUserPromptRequested();
    fn test_field_LaunchInternalProcess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LaunchInternalProcess) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(LaunchInternalProcess)
            )
        );
    }
    test_field_LaunchInternalProcess();
    fn test_field_GetCurrentSceneProcessId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRApplications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentSceneProcessId) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRApplications_FnTable),
                "::",
                stringify!(GetCurrentSceneProcessId)
            )
        );
    }
    test_field_GetCurrentSceneProcessId();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRChaperone_FnTable {
    pub GetCalibrationState:
        ::std::option::Option<unsafe extern "C" fn() -> ChaperoneCalibrationState>,
    pub GetPlayAreaSize:
        ::std::option::Option<unsafe extern "C" fn(pSizeX: *mut f32, pSizeZ: *mut f32) -> bool>,
    pub GetPlayAreaRect: ::std::option::Option<unsafe extern "C" fn(rect: *mut HmdQuad_t) -> bool>,
    pub ReloadInfo: ::std::option::Option<unsafe extern "C" fn()>,
    pub SetSceneColor: ::std::option::Option<unsafe extern "C" fn(color: HmdColor_t)>,
    pub GetBoundsColor: ::std::option::Option<
        unsafe extern "C" fn(
            pOutputColorArray: *mut HmdColor_t,
            nNumOutputColors: ::std::os::raw::c_int,
            flCollisionBoundsFadeDistance: f32,
            pOutputCameraColor: *mut HmdColor_t,
        ),
    >,
    pub AreBoundsVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ForceBoundsVisible: ::std::option::Option<unsafe extern "C" fn(bForce: bool)>,
}
#[test]
fn bindgen_test_layout_VR_IVRChaperone_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRChaperone_FnTable>(),
        64usize,
        concat!("Size of: ", stringify!(VR_IVRChaperone_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRChaperone_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRChaperone_FnTable))
    );
    fn test_field_GetCalibrationState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperone_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCalibrationState) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperone_FnTable),
                "::",
                stringify!(GetCalibrationState)
            )
        );
    }
    test_field_GetCalibrationState();
    fn test_field_GetPlayAreaSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperone_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPlayAreaSize) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperone_FnTable),
                "::",
                stringify!(GetPlayAreaSize)
            )
        );
    }
    test_field_GetPlayAreaSize();
    fn test_field_GetPlayAreaRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperone_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPlayAreaRect) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperone_FnTable),
                "::",
                stringify!(GetPlayAreaRect)
            )
        );
    }
    test_field_GetPlayAreaRect();
    fn test_field_ReloadInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperone_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReloadInfo) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperone_FnTable),
                "::",
                stringify!(ReloadInfo)
            )
        );
    }
    test_field_ReloadInfo();
    fn test_field_SetSceneColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperone_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSceneColor) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperone_FnTable),
                "::",
                stringify!(SetSceneColor)
            )
        );
    }
    test_field_SetSceneColor();
    fn test_field_GetBoundsColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperone_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoundsColor) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperone_FnTable),
                "::",
                stringify!(GetBoundsColor)
            )
        );
    }
    test_field_GetBoundsColor();
    fn test_field_AreBoundsVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperone_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AreBoundsVisible) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperone_FnTable),
                "::",
                stringify!(AreBoundsVisible)
            )
        );
    }
    test_field_AreBoundsVisible();
    fn test_field_ForceBoundsVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperone_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceBoundsVisible) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperone_FnTable),
                "::",
                stringify!(ForceBoundsVisible)
            )
        );
    }
    test_field_ForceBoundsVisible();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRChaperoneSetup_FnTable {
    pub CommitWorkingCopy:
        ::std::option::Option<unsafe extern "C" fn(configFile: EChaperoneConfigFile) -> bool>,
    pub RevertWorkingCopy: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetWorkingPlayAreaSize:
        ::std::option::Option<unsafe extern "C" fn(pSizeX: *mut f32, pSizeZ: *mut f32) -> bool>,
    pub GetWorkingPlayAreaRect:
        ::std::option::Option<unsafe extern "C" fn(rect: *mut HmdQuad_t) -> bool>,
    pub GetWorkingCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, punQuadsCount: *mut u32) -> bool,
    >,
    pub GetLiveCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, punQuadsCount: *mut u32) -> bool,
    >,
    pub GetWorkingSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub GetWorkingStandingZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatStandingZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub SetWorkingPlayAreaSize: ::std::option::Option<unsafe extern "C" fn(sizeX: f32, sizeZ: f32)>,
    pub SetWorkingCollisionBoundsInfo: ::std::option::Option<
        unsafe extern "C" fn(pQuadsBuffer: *mut HmdQuad_t, unQuadsCount: u32),
    >,
    pub SetWorkingPerimeter: ::std::option::Option<
        unsafe extern "C" fn(pPointBuffer: *mut HmdVector2_t, unPointCount: u32),
    >,
    pub SetWorkingSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pMatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t),
    >,
    pub SetWorkingStandingZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pMatStandingZeroPoseToRawTrackingPose: *mut HmdMatrix34_t),
    >,
    pub ReloadFromDisk:
        ::std::option::Option<unsafe extern "C" fn(configFile: EChaperoneConfigFile)>,
    pub GetLiveSeatedZeroPoseToRawTrackingPose: ::std::option::Option<
        unsafe extern "C" fn(pmatSeatedZeroPoseToRawTrackingPose: *mut HmdMatrix34_t) -> bool,
    >,
    pub ExportLiveToBuffer: ::std::option::Option<
        unsafe extern "C" fn(
            pBuffer: *mut ::std::os::raw::c_char,
            pnBufferLength: *mut u32,
        ) -> bool,
    >,
    pub ImportFromBufferToWorking: ::std::option::Option<
        unsafe extern "C" fn(pBuffer: *mut ::std::os::raw::c_char, nImportFlags: u32) -> bool,
    >,
    pub ShowWorkingSetPreview: ::std::option::Option<unsafe extern "C" fn()>,
    pub HideWorkingSetPreview: ::std::option::Option<unsafe extern "C" fn()>,
    pub RoomSetupStarting: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_VR_IVRChaperoneSetup_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRChaperoneSetup_FnTable>(),
        160usize,
        concat!("Size of: ", stringify!(VR_IVRChaperoneSetup_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRChaperoneSetup_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRChaperoneSetup_FnTable))
    );
    fn test_field_CommitWorkingCopy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CommitWorkingCopy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(CommitWorkingCopy)
            )
        );
    }
    test_field_CommitWorkingCopy();
    fn test_field_RevertWorkingCopy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RevertWorkingCopy) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(RevertWorkingCopy)
            )
        );
    }
    test_field_RevertWorkingCopy();
    fn test_field_GetWorkingPlayAreaSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetWorkingPlayAreaSize) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(GetWorkingPlayAreaSize)
            )
        );
    }
    test_field_GetWorkingPlayAreaSize();
    fn test_field_GetWorkingPlayAreaRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetWorkingPlayAreaRect) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(GetWorkingPlayAreaRect)
            )
        );
    }
    test_field_GetWorkingPlayAreaRect();
    fn test_field_GetWorkingCollisionBoundsInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetWorkingCollisionBoundsInfo) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(GetWorkingCollisionBoundsInfo)
            )
        );
    }
    test_field_GetWorkingCollisionBoundsInfo();
    fn test_field_GetLiveCollisionBoundsInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLiveCollisionBoundsInfo) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(GetLiveCollisionBoundsInfo)
            )
        );
    }
    test_field_GetLiveCollisionBoundsInfo();
    fn test_field_GetWorkingSeatedZeroPoseToRawTrackingPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetWorkingSeatedZeroPoseToRawTrackingPose) as usize
                    - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(GetWorkingSeatedZeroPoseToRawTrackingPose)
            )
        );
    }
    test_field_GetWorkingSeatedZeroPoseToRawTrackingPose();
    fn test_field_GetWorkingStandingZeroPoseToRawTrackingPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetWorkingStandingZeroPoseToRawTrackingPose) as usize
                    - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(GetWorkingStandingZeroPoseToRawTrackingPose)
            )
        );
    }
    test_field_GetWorkingStandingZeroPoseToRawTrackingPose();
    fn test_field_SetWorkingPlayAreaSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetWorkingPlayAreaSize) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(SetWorkingPlayAreaSize)
            )
        );
    }
    test_field_SetWorkingPlayAreaSize();
    fn test_field_SetWorkingCollisionBoundsInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetWorkingCollisionBoundsInfo) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(SetWorkingCollisionBoundsInfo)
            )
        );
    }
    test_field_SetWorkingCollisionBoundsInfo();
    fn test_field_SetWorkingPerimeter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetWorkingPerimeter) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(SetWorkingPerimeter)
            )
        );
    }
    test_field_SetWorkingPerimeter();
    fn test_field_SetWorkingSeatedZeroPoseToRawTrackingPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetWorkingSeatedZeroPoseToRawTrackingPose) as usize
                    - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(SetWorkingSeatedZeroPoseToRawTrackingPose)
            )
        );
    }
    test_field_SetWorkingSeatedZeroPoseToRawTrackingPose();
    fn test_field_SetWorkingStandingZeroPoseToRawTrackingPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetWorkingStandingZeroPoseToRawTrackingPose) as usize
                    - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(SetWorkingStandingZeroPoseToRawTrackingPose)
            )
        );
    }
    test_field_SetWorkingStandingZeroPoseToRawTrackingPose();
    fn test_field_ReloadFromDisk() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReloadFromDisk) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(ReloadFromDisk)
            )
        );
    }
    test_field_ReloadFromDisk();
    fn test_field_GetLiveSeatedZeroPoseToRawTrackingPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLiveSeatedZeroPoseToRawTrackingPose) as usize
                    - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(GetLiveSeatedZeroPoseToRawTrackingPose)
            )
        );
    }
    test_field_GetLiveSeatedZeroPoseToRawTrackingPose();
    fn test_field_ExportLiveToBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ExportLiveToBuffer) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(ExportLiveToBuffer)
            )
        );
    }
    test_field_ExportLiveToBuffer();
    fn test_field_ImportFromBufferToWorking() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ImportFromBufferToWorking) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(ImportFromBufferToWorking)
            )
        );
    }
    test_field_ImportFromBufferToWorking();
    fn test_field_ShowWorkingSetPreview() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowWorkingSetPreview) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(ShowWorkingSetPreview)
            )
        );
    }
    test_field_ShowWorkingSetPreview();
    fn test_field_HideWorkingSetPreview() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HideWorkingSetPreview) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(HideWorkingSetPreview)
            )
        );
    }
    test_field_HideWorkingSetPreview();
    fn test_field_RoomSetupStarting() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRChaperoneSetup_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RoomSetupStarting) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRChaperoneSetup_FnTable),
                "::",
                stringify!(RoomSetupStarting)
            )
        );
    }
    test_field_RoomSetupStarting();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRCompositor_FnTable {
    pub SetTrackingSpace:
        ::std::option::Option<unsafe extern "C" fn(eOrigin: ETrackingUniverseOrigin)>,
    pub GetTrackingSpace: ::std::option::Option<unsafe extern "C" fn() -> ETrackingUniverseOrigin>,
    pub WaitGetPoses: ::std::option::Option<
        unsafe extern "C" fn(
            pRenderPoseArray: *mut TrackedDevicePose_t,
            unRenderPoseArrayCount: u32,
            pGamePoseArray: *mut TrackedDevicePose_t,
            unGamePoseArrayCount: u32,
        ) -> EVRCompositorError,
    >,
    pub GetLastPoses: ::std::option::Option<
        unsafe extern "C" fn(
            pRenderPoseArray: *mut TrackedDevicePose_t,
            unRenderPoseArrayCount: u32,
            pGamePoseArray: *mut TrackedDevicePose_t,
            unGamePoseArrayCount: u32,
        ) -> EVRCompositorError,
    >,
    pub GetLastPoseForTrackedDeviceIndex: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            pOutputPose: *mut TrackedDevicePose_t,
            pOutputGamePose: *mut TrackedDevicePose_t,
        ) -> EVRCompositorError,
    >,
    pub Submit: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pTexture: *mut Texture_t,
            pBounds: *mut VRTextureBounds_t,
            nSubmitFlags: EVRSubmitFlags,
        ) -> EVRCompositorError,
    >,
    pub ClearLastSubmittedFrame: ::std::option::Option<unsafe extern "C" fn()>,
    pub PostPresentHandoff: ::std::option::Option<unsafe extern "C" fn()>,
    pub GetFrameTiming: ::std::option::Option<
        unsafe extern "C" fn(pTiming: *mut Compositor_FrameTiming, unFramesAgo: u32) -> bool,
    >,
    pub GetFrameTimings: ::std::option::Option<
        unsafe extern "C" fn(pTiming: *mut Compositor_FrameTiming, nFrames: u32) -> u32,
    >,
    pub GetFrameTimeRemaining: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub GetCumulativeStats: ::std::option::Option<
        unsafe extern "C" fn(pStats: *mut Compositor_CumulativeStats, nStatsSizeInBytes: u32),
    >,
    pub FadeToColor: ::std::option::Option<
        unsafe extern "C" fn(
            fSeconds: f32,
            fRed: f32,
            fGreen: f32,
            fBlue: f32,
            fAlpha: f32,
            bBackground: bool,
        ),
    >,
    pub GetCurrentFadeColor:
        ::std::option::Option<unsafe extern "C" fn(bBackground: bool) -> HmdColor_t>,
    pub FadeGrid: ::std::option::Option<unsafe extern "C" fn(fSeconds: f32, bFadeIn: bool)>,
    pub GetCurrentGridAlpha: ::std::option::Option<unsafe extern "C" fn() -> f32>,
    pub SetSkyboxOverride: ::std::option::Option<
        unsafe extern "C" fn(pTextures: *mut Texture_t, unTextureCount: u32) -> EVRCompositorError,
    >,
    pub ClearSkyboxOverride: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorBringToFront: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorGoToBack: ::std::option::Option<unsafe extern "C" fn()>,
    pub CompositorQuit: ::std::option::Option<unsafe extern "C" fn()>,
    pub IsFullscreen: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub GetCurrentSceneFocusProcess: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetLastFrameRenderer: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub CanRenderScene: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ShowMirrorWindow: ::std::option::Option<unsafe extern "C" fn()>,
    pub HideMirrorWindow: ::std::option::Option<unsafe extern "C" fn()>,
    pub IsMirrorWindowVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub CompositorDumpImages: ::std::option::Option<unsafe extern "C" fn()>,
    pub ShouldAppRenderWithLowResources: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub ForceInterleavedReprojectionOn:
        ::std::option::Option<unsafe extern "C" fn(bOverride: bool)>,
    pub ForceReconnectProcess: ::std::option::Option<unsafe extern "C" fn()>,
    pub SuspendRendering: ::std::option::Option<unsafe extern "C" fn(bSuspend: bool)>,
    pub GetMirrorTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pD3D11DeviceOrResource: *mut ::std::os::raw::c_void,
            ppD3D11ShaderResourceView: *mut *mut ::std::os::raw::c_void,
        ) -> EVRCompositorError,
    >,
    pub ReleaseMirrorTextureD3D11: ::std::option::Option<
        unsafe extern "C" fn(pD3D11ShaderResourceView: *mut ::std::os::raw::c_void),
    >,
    pub GetMirrorTextureGL: ::std::option::Option<
        unsafe extern "C" fn(
            eEye: EVREye,
            pglTextureId: *mut glUInt_t,
            pglSharedTextureHandle: *mut glSharedTextureHandle_t,
        ) -> EVRCompositorError,
    >,
    pub ReleaseSharedGLTexture: ::std::option::Option<
        unsafe extern "C" fn(
            glTextureId: glUInt_t,
            glSharedTextureHandle: glSharedTextureHandle_t,
        ) -> bool,
    >,
    pub LockGLSharedTextureForAccess:
        ::std::option::Option<unsafe extern "C" fn(glSharedTextureHandle: glSharedTextureHandle_t)>,
    pub UnlockGLSharedTextureForAccess:
        ::std::option::Option<unsafe extern "C" fn(glSharedTextureHandle: glSharedTextureHandle_t)>,
    pub GetVulkanInstanceExtensionsRequired: ::std::option::Option<
        unsafe extern "C" fn(pchValue: *mut ::std::os::raw::c_char, unBufferSize: u32) -> u32,
    >,
    pub GetVulkanDeviceExtensionsRequired: ::std::option::Option<
        unsafe extern "C" fn(
            pPhysicalDevice: *mut VkPhysicalDevice_T,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
        ) -> u32,
    >,
    pub SetExplicitTimingMode:
        ::std::option::Option<unsafe extern "C" fn(eTimingMode: EVRCompositorTimingMode)>,
    pub SubmitExplicitTimingData:
        ::std::option::Option<unsafe extern "C" fn() -> EVRCompositorError>,
    pub IsMotionSmoothingEnabled: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsMotionSmoothingSupported: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsCurrentSceneFocusAppLoading: ::std::option::Option<unsafe extern "C" fn() -> bool>,
}
#[test]
fn bindgen_test_layout_VR_IVRCompositor_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRCompositor_FnTable>(),
        368usize,
        concat!("Size of: ", stringify!(VR_IVRCompositor_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRCompositor_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRCompositor_FnTable))
    );
    fn test_field_SetTrackingSpace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetTrackingSpace) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(SetTrackingSpace)
            )
        );
    }
    test_field_SetTrackingSpace();
    fn test_field_GetTrackingSpace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTrackingSpace) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetTrackingSpace)
            )
        );
    }
    test_field_GetTrackingSpace();
    fn test_field_WaitGetPoses() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WaitGetPoses) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(WaitGetPoses)
            )
        );
    }
    test_field_WaitGetPoses();
    fn test_field_GetLastPoses() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLastPoses) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetLastPoses)
            )
        );
    }
    test_field_GetLastPoses();
    fn test_field_GetLastPoseForTrackedDeviceIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLastPoseForTrackedDeviceIndex) as usize
                    - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetLastPoseForTrackedDeviceIndex)
            )
        );
    }
    test_field_GetLastPoseForTrackedDeviceIndex();
    fn test_field_Submit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Submit) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(Submit)
            )
        );
    }
    test_field_Submit();
    fn test_field_ClearLastSubmittedFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearLastSubmittedFrame) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(ClearLastSubmittedFrame)
            )
        );
    }
    test_field_ClearLastSubmittedFrame();
    fn test_field_PostPresentHandoff() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PostPresentHandoff) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(PostPresentHandoff)
            )
        );
    }
    test_field_PostPresentHandoff();
    fn test_field_GetFrameTiming() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFrameTiming) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetFrameTiming)
            )
        );
    }
    test_field_GetFrameTiming();
    fn test_field_GetFrameTimings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFrameTimings) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetFrameTimings)
            )
        );
    }
    test_field_GetFrameTimings();
    fn test_field_GetFrameTimeRemaining() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFrameTimeRemaining) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetFrameTimeRemaining)
            )
        );
    }
    test_field_GetFrameTimeRemaining();
    fn test_field_GetCumulativeStats() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCumulativeStats) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetCumulativeStats)
            )
        );
    }
    test_field_GetCumulativeStats();
    fn test_field_FadeToColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FadeToColor) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(FadeToColor)
            )
        );
    }
    test_field_FadeToColor();
    fn test_field_GetCurrentFadeColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentFadeColor) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetCurrentFadeColor)
            )
        );
    }
    test_field_GetCurrentFadeColor();
    fn test_field_FadeGrid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FadeGrid) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(FadeGrid)
            )
        );
    }
    test_field_FadeGrid();
    fn test_field_GetCurrentGridAlpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentGridAlpha) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetCurrentGridAlpha)
            )
        );
    }
    test_field_GetCurrentGridAlpha();
    fn test_field_SetSkyboxOverride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetSkyboxOverride) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(SetSkyboxOverride)
            )
        );
    }
    test_field_SetSkyboxOverride();
    fn test_field_ClearSkyboxOverride() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearSkyboxOverride) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(ClearSkyboxOverride)
            )
        );
    }
    test_field_ClearSkyboxOverride();
    fn test_field_CompositorBringToFront() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompositorBringToFront) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(CompositorBringToFront)
            )
        );
    }
    test_field_CompositorBringToFront();
    fn test_field_CompositorGoToBack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompositorGoToBack) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(CompositorGoToBack)
            )
        );
    }
    test_field_CompositorGoToBack();
    fn test_field_CompositorQuit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompositorQuit) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(CompositorQuit)
            )
        );
    }
    test_field_CompositorQuit();
    fn test_field_IsFullscreen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsFullscreen) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(IsFullscreen)
            )
        );
    }
    test_field_IsFullscreen();
    fn test_field_GetCurrentSceneFocusProcess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetCurrentSceneFocusProcess) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetCurrentSceneFocusProcess)
            )
        );
    }
    test_field_GetCurrentSceneFocusProcess();
    fn test_field_GetLastFrameRenderer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetLastFrameRenderer) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetLastFrameRenderer)
            )
        );
    }
    test_field_GetLastFrameRenderer();
    fn test_field_CanRenderScene() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CanRenderScene) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(CanRenderScene)
            )
        );
    }
    test_field_CanRenderScene();
    fn test_field_ShowMirrorWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowMirrorWindow) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(ShowMirrorWindow)
            )
        );
    }
    test_field_ShowMirrorWindow();
    fn test_field_HideMirrorWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HideMirrorWindow) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(HideMirrorWindow)
            )
        );
    }
    test_field_HideMirrorWindow();
    fn test_field_IsMirrorWindowVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsMirrorWindowVisible) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(IsMirrorWindowVisible)
            )
        );
    }
    test_field_IsMirrorWindowVisible();
    fn test_field_CompositorDumpImages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CompositorDumpImages) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(CompositorDumpImages)
            )
        );
    }
    test_field_CompositorDumpImages();
    fn test_field_ShouldAppRenderWithLowResources() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShouldAppRenderWithLowResources) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(ShouldAppRenderWithLowResources)
            )
        );
    }
    test_field_ShouldAppRenderWithLowResources();
    fn test_field_ForceInterleavedReprojectionOn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceInterleavedReprojectionOn) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(ForceInterleavedReprojectionOn)
            )
        );
    }
    test_field_ForceInterleavedReprojectionOn();
    fn test_field_ForceReconnectProcess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ForceReconnectProcess) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(ForceReconnectProcess)
            )
        );
    }
    test_field_ForceReconnectProcess();
    fn test_field_SuspendRendering() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SuspendRendering) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(SuspendRendering)
            )
        );
    }
    test_field_SuspendRendering();
    fn test_field_GetMirrorTextureD3D11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMirrorTextureD3D11) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetMirrorTextureD3D11)
            )
        );
    }
    test_field_GetMirrorTextureD3D11();
    fn test_field_ReleaseMirrorTextureD3D11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseMirrorTextureD3D11) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(ReleaseMirrorTextureD3D11)
            )
        );
    }
    test_field_ReleaseMirrorTextureD3D11();
    fn test_field_GetMirrorTextureGL() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetMirrorTextureGL) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetMirrorTextureGL)
            )
        );
    }
    test_field_GetMirrorTextureGL();
    fn test_field_ReleaseSharedGLTexture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseSharedGLTexture) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(ReleaseSharedGLTexture)
            )
        );
    }
    test_field_ReleaseSharedGLTexture();
    fn test_field_LockGLSharedTextureForAccess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LockGLSharedTextureForAccess) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(LockGLSharedTextureForAccess)
            )
        );
    }
    test_field_LockGLSharedTextureForAccess();
    fn test_field_UnlockGLSharedTextureForAccess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UnlockGLSharedTextureForAccess) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(UnlockGLSharedTextureForAccess)
            )
        );
    }
    test_field_UnlockGLSharedTextureForAccess();
    fn test_field_GetVulkanInstanceExtensionsRequired() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVulkanInstanceExtensionsRequired) as usize
                    - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetVulkanInstanceExtensionsRequired)
            )
        );
    }
    test_field_GetVulkanInstanceExtensionsRequired();
    fn test_field_GetVulkanDeviceExtensionsRequired() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetVulkanDeviceExtensionsRequired) as usize
                    - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(GetVulkanDeviceExtensionsRequired)
            )
        );
    }
    test_field_GetVulkanDeviceExtensionsRequired();
    fn test_field_SetExplicitTimingMode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetExplicitTimingMode) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(SetExplicitTimingMode)
            )
        );
    }
    test_field_SetExplicitTimingMode();
    fn test_field_SubmitExplicitTimingData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SubmitExplicitTimingData) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(SubmitExplicitTimingData)
            )
        );
    }
    test_field_SubmitExplicitTimingData();
    fn test_field_IsMotionSmoothingEnabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsMotionSmoothingEnabled) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(IsMotionSmoothingEnabled)
            )
        );
    }
    test_field_IsMotionSmoothingEnabled();
    fn test_field_IsMotionSmoothingSupported() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsMotionSmoothingSupported) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(IsMotionSmoothingSupported)
            )
        );
    }
    test_field_IsMotionSmoothingSupported();
    fn test_field_IsCurrentSceneFocusAppLoading() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRCompositor_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsCurrentSceneFocusAppLoading) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRCompositor_FnTable),
                "::",
                stringify!(IsCurrentSceneFocusAppLoading)
            )
        );
    }
    test_field_IsCurrentSceneFocusAppLoading();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVROverlay_FnTable {
    pub FindOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pOverlayHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub CreateOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pchOverlayName: *mut ::std::os::raw::c_char,
            pOverlayHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub DestroyOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub SetHighQualityOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub GetHighQualityOverlay: ::std::option::Option<unsafe extern "C" fn() -> VROverlayHandle_t>,
    pub GetOverlayKey: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut EVROverlayError,
        ) -> u32,
    >,
    pub GetOverlayName: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pError: *mut EVROverlayError,
        ) -> u32,
    >,
    pub SetOverlayName: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchName: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayImageData: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvBuffer: *mut ::std::os::raw::c_void,
            unBufferSize: u32,
            punWidth: *mut u32,
            punHeight: *mut u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVROverlayError) -> *mut ::std::os::raw::c_char,
    >,
    pub SetOverlayRenderingPid: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, unPID: u32) -> EVROverlayError,
    >,
    pub GetOverlayRenderingPid:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> u32>,
    pub SetOverlayFlag: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eOverlayFlag: VROverlayFlags,
            bEnabled: bool,
        ) -> EVROverlayError,
    >,
    pub GetOverlayFlag: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eOverlayFlag: VROverlayFlags,
            pbEnabled: *mut bool,
        ) -> EVROverlayError,
    >,
    pub SetOverlayColor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fRed: f32,
            fGreen: f32,
            fBlue: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayColor: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfRed: *mut f32,
            pfGreen: *mut f32,
            pfBlue: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayAlpha: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, fAlpha: f32) -> EVROverlayError,
    >,
    pub GetOverlayAlpha: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfAlpha: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTexelAspect: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fTexelAspect: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTexelAspect: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfTexelAspect: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlaySortOrder: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unSortOrder: u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlaySortOrder: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punSortOrder: *mut u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayWidthInMeters: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fWidthInMeters: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayWidthInMeters: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfWidthInMeters: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayAutoCurveDistanceRangeInMeters: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            fMinDistanceInMeters: f32,
            fMaxDistanceInMeters: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayAutoCurveDistanceRangeInMeters: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pfMinDistanceInMeters: *mut f32,
            pfMaxDistanceInMeters: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTextureColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTextureColorSpace: EColorSpace,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureColorSpace: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTextureColorSpace: *mut EColorSpace,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTextureBounds: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pOverlayTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureBounds: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pOverlayTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayRenderModel: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
            pColor: *mut HmdColor_t,
            pError: *mut EVROverlayError,
        ) -> u32,
    >,
    pub SetOverlayRenderModel: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchRenderModel: *mut ::std::os::raw::c_char,
            pColor: *mut HmdColor_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformType: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTransformType: *mut VROverlayTransformType,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTrackingOrigin: ETrackingUniverseOrigin,
            pmatTrackingOriginToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peTrackingOrigin: *mut ETrackingUniverseOrigin,
            pmatTrackingOriginToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformTrackedDeviceRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unTrackedDevice: TrackedDeviceIndex_t,
            pmatTrackedDeviceToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformTrackedDeviceRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punTrackedDevice: *mut TrackedDeviceIndex_t,
            pmatTrackedDeviceToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformTrackedDeviceComponent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unDeviceIndex: TrackedDeviceIndex_t,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformTrackedDeviceComponent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punDeviceIndex: *mut TrackedDeviceIndex_t,
            pchComponentName: *mut ::std::os::raw::c_char,
            unComponentNameSize: u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTransformOverlayRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulOverlayHandleParent: *mut VROverlayHandle_t,
            pmatParentOverlayToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTransformOverlayRelative: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulOverlayHandleParent: VROverlayHandle_t,
            pmatParentOverlayToOverlayTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub ShowOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub HideOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub IsOverlayVisible:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub GetTransformForOverlayCoordinates: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eTrackingOrigin: ETrackingUniverseOrigin,
            coordinatesInOverlay: HmdVector2_t,
            pmatTransform: *mut HmdMatrix34_t,
        ) -> EVROverlayError,
    >,
    pub PollNextOverlayEvent: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pEvent: *mut VREvent_t,
            uncbVREvent: u32,
        ) -> bool,
    >,
    pub GetOverlayInputMethod: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            peInputMethod: *mut VROverlayInputMethod,
        ) -> EVROverlayError,
    >,
    pub SetOverlayInputMethod: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eInputMethod: VROverlayInputMethod,
        ) -> EVROverlayError,
    >,
    pub GetOverlayMouseScale: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvecMouseScale: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayMouseScale: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvecMouseScale: *mut HmdVector2_t,
        ) -> EVROverlayError,
    >,
    pub ComputeOverlayIntersection: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pParams: *mut VROverlayIntersectionParams_t,
            pResults: *mut VROverlayIntersectionResults_t,
        ) -> bool,
    >,
    pub IsHoverTargetOverlay:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub GetGamepadFocusOverlay: ::std::option::Option<unsafe extern "C" fn() -> VROverlayHandle_t>,
    pub SetGamepadFocusOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulNewFocusOverlay: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub SetOverlayNeighbor: ::std::option::Option<
        unsafe extern "C" fn(
            eDirection: EOverlayDirection,
            ulFrom: VROverlayHandle_t,
            ulTo: VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub MoveGamepadFocusToNeighbor: ::std::option::Option<
        unsafe extern "C" fn(
            eDirection: EOverlayDirection,
            ulFrom: VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub SetOverlayDualAnalogTransform: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlay: VROverlayHandle_t,
            eWhich: EDualAnalogWhich,
            pvCenter: *mut HmdVector2_t,
            fRadius: f32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayDualAnalogTransform: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlay: VROverlayHandle_t,
            eWhich: EDualAnalogWhich,
            pvCenter: *mut HmdVector2_t,
            pfRadius: *mut f32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pTexture: *mut Texture_t,
        ) -> EVROverlayError,
    >,
    pub ClearOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> EVROverlayError,
    >,
    pub SetOverlayRaw: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pvBuffer: *mut ::std::os::raw::c_void,
            unWidth: u32,
            unHeight: u32,
            unDepth: u32,
        ) -> EVROverlayError,
    >,
    pub SetOverlayFromFile: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pchFilePath: *mut ::std::os::raw::c_char,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTexture: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pNativeTextureHandle: *mut *mut ::std::os::raw::c_void,
            pNativeTextureRef: *mut ::std::os::raw::c_void,
            pWidth: *mut u32,
            pHeight: *mut u32,
            pNativeFormat: *mut u32,
            pAPIType: *mut ETextureType,
            pColorSpace: *mut EColorSpace,
            pTextureBounds: *mut VRTextureBounds_t,
        ) -> EVROverlayError,
    >,
    pub ReleaseNativeOverlayHandle: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pNativeTextureHandle: *mut ::std::os::raw::c_void,
        ) -> EVROverlayError,
    >,
    pub GetOverlayTextureSize: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pWidth: *mut u32,
            pHeight: *mut u32,
        ) -> EVROverlayError,
    >,
    pub CreateDashboardOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchOverlayKey: *mut ::std::os::raw::c_char,
            pchOverlayFriendlyName: *mut ::std::os::raw::c_char,
            pMainHandle: *mut VROverlayHandle_t,
            pThumbnailHandle: *mut VROverlayHandle_t,
        ) -> EVROverlayError,
    >,
    pub IsDashboardVisible: ::std::option::Option<unsafe extern "C" fn() -> bool>,
    pub IsActiveDashboardOverlay:
        ::std::option::Option<unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t) -> bool>,
    pub SetDashboardOverlaySceneProcess: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            unProcessId: u32,
        ) -> EVROverlayError,
    >,
    pub GetDashboardOverlaySceneProcess: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            punProcessId: *mut u32,
        ) -> EVROverlayError,
    >,
    pub ShowDashboard:
        ::std::option::Option<unsafe extern "C" fn(pchOverlayToShow: *mut ::std::os::raw::c_char)>,
    pub GetPrimaryDashboardDevice:
        ::std::option::Option<unsafe extern "C" fn() -> TrackedDeviceIndex_t>,
    pub ShowKeyboard: ::std::option::Option<
        unsafe extern "C" fn(
            eInputMode: EGamepadTextInputMode,
            eLineInputMode: EGamepadTextInputLineMode,
            pchDescription: *mut ::std::os::raw::c_char,
            unCharMax: u32,
            pchExistingText: *mut ::std::os::raw::c_char,
            bUseMinimalMode: bool,
            uUserValue: u64,
        ) -> EVROverlayError,
    >,
    pub ShowKeyboardForOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            eInputMode: EGamepadTextInputMode,
            eLineInputMode: EGamepadTextInputLineMode,
            pchDescription: *mut ::std::os::raw::c_char,
            unCharMax: u32,
            pchExistingText: *mut ::std::os::raw::c_char,
            bUseMinimalMode: bool,
            uUserValue: u64,
        ) -> EVROverlayError,
    >,
    pub GetKeyboardText: ::std::option::Option<
        unsafe extern "C" fn(pchText: *mut ::std::os::raw::c_char, cchText: u32) -> u32,
    >,
    pub HideKeyboard: ::std::option::Option<unsafe extern "C" fn()>,
    pub SetKeyboardTransformAbsolute: ::std::option::Option<
        unsafe extern "C" fn(
            eTrackingOrigin: ETrackingUniverseOrigin,
            pmatTrackingOriginToKeyboardTransform: *mut HmdMatrix34_t,
        ),
    >,
    pub SetKeyboardPositionForOverlay: ::std::option::Option<
        unsafe extern "C" fn(ulOverlayHandle: VROverlayHandle_t, avoidRect: HmdRect2_t),
    >,
    pub SetOverlayIntersectionMask: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pMaskPrimitives: *mut VROverlayIntersectionMaskPrimitive_t,
            unNumMaskPrimitives: u32,
            unPrimitiveSize: u32,
        ) -> EVROverlayError,
    >,
    pub GetOverlayFlags: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            pFlags: *mut u32,
        ) -> EVROverlayError,
    >,
    pub ShowMessageOverlay: ::std::option::Option<
        unsafe extern "C" fn(
            pchText: *mut ::std::os::raw::c_char,
            pchCaption: *mut ::std::os::raw::c_char,
            pchButton0Text: *mut ::std::os::raw::c_char,
            pchButton1Text: *mut ::std::os::raw::c_char,
            pchButton2Text: *mut ::std::os::raw::c_char,
            pchButton3Text: *mut ::std::os::raw::c_char,
        ) -> VRMessageOverlayResponse,
    >,
    pub CloseMessageOverlay: ::std::option::Option<unsafe extern "C" fn()>,
}
#[test]
fn bindgen_test_layout_VR_IVROverlay_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVROverlay_FnTable>(),
        656usize,
        concat!("Size of: ", stringify!(VR_IVROverlay_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVROverlay_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVROverlay_FnTable))
    );
    fn test_field_FindOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FindOverlay) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(FindOverlay)
            )
        );
    }
    test_field_FindOverlay();
    fn test_field_CreateOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateOverlay) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(CreateOverlay)
            )
        );
    }
    test_field_CreateOverlay();
    fn test_field_DestroyOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DestroyOverlay) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(DestroyOverlay)
            )
        );
    }
    test_field_DestroyOverlay();
    fn test_field_SetHighQualityOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetHighQualityOverlay) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetHighQualityOverlay)
            )
        );
    }
    test_field_SetHighQualityOverlay();
    fn test_field_GetHighQualityOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetHighQualityOverlay) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetHighQualityOverlay)
            )
        );
    }
    test_field_GetHighQualityOverlay();
    fn test_field_GetOverlayKey() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayKey) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayKey)
            )
        );
    }
    test_field_GetOverlayKey();
    fn test_field_GetOverlayName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayName) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayName)
            )
        );
    }
    test_field_GetOverlayName();
    fn test_field_SetOverlayName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayName) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayName)
            )
        );
    }
    test_field_SetOverlayName();
    fn test_field_GetOverlayImageData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayImageData) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayImageData)
            )
        );
    }
    test_field_GetOverlayImageData();
    fn test_field_GetOverlayErrorNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayErrorNameFromEnum) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayErrorNameFromEnum)
            )
        );
    }
    test_field_GetOverlayErrorNameFromEnum();
    fn test_field_SetOverlayRenderingPid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayRenderingPid) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayRenderingPid)
            )
        );
    }
    test_field_SetOverlayRenderingPid();
    fn test_field_GetOverlayRenderingPid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayRenderingPid) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayRenderingPid)
            )
        );
    }
    test_field_GetOverlayRenderingPid();
    fn test_field_SetOverlayFlag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayFlag) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayFlag)
            )
        );
    }
    test_field_SetOverlayFlag();
    fn test_field_GetOverlayFlag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayFlag) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayFlag)
            )
        );
    }
    test_field_GetOverlayFlag();
    fn test_field_SetOverlayColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayColor) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayColor)
            )
        );
    }
    test_field_SetOverlayColor();
    fn test_field_GetOverlayColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayColor) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayColor)
            )
        );
    }
    test_field_GetOverlayColor();
    fn test_field_SetOverlayAlpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayAlpha) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayAlpha)
            )
        );
    }
    test_field_SetOverlayAlpha();
    fn test_field_GetOverlayAlpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayAlpha) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayAlpha)
            )
        );
    }
    test_field_GetOverlayAlpha();
    fn test_field_SetOverlayTexelAspect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayTexelAspect) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayTexelAspect)
            )
        );
    }
    test_field_SetOverlayTexelAspect();
    fn test_field_GetOverlayTexelAspect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTexelAspect) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTexelAspect)
            )
        );
    }
    test_field_GetOverlayTexelAspect();
    fn test_field_SetOverlaySortOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlaySortOrder) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlaySortOrder)
            )
        );
    }
    test_field_SetOverlaySortOrder();
    fn test_field_GetOverlaySortOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlaySortOrder) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlaySortOrder)
            )
        );
    }
    test_field_GetOverlaySortOrder();
    fn test_field_SetOverlayWidthInMeters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayWidthInMeters) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayWidthInMeters)
            )
        );
    }
    test_field_SetOverlayWidthInMeters();
    fn test_field_GetOverlayWidthInMeters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayWidthInMeters) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayWidthInMeters)
            )
        );
    }
    test_field_GetOverlayWidthInMeters();
    fn test_field_SetOverlayAutoCurveDistanceRangeInMeters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayAutoCurveDistanceRangeInMeters) as usize
                    - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayAutoCurveDistanceRangeInMeters)
            )
        );
    }
    test_field_SetOverlayAutoCurveDistanceRangeInMeters();
    fn test_field_GetOverlayAutoCurveDistanceRangeInMeters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayAutoCurveDistanceRangeInMeters) as usize
                    - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayAutoCurveDistanceRangeInMeters)
            )
        );
    }
    test_field_GetOverlayAutoCurveDistanceRangeInMeters();
    fn test_field_SetOverlayTextureColorSpace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayTextureColorSpace) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayTextureColorSpace)
            )
        );
    }
    test_field_SetOverlayTextureColorSpace();
    fn test_field_GetOverlayTextureColorSpace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTextureColorSpace) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTextureColorSpace)
            )
        );
    }
    test_field_GetOverlayTextureColorSpace();
    fn test_field_SetOverlayTextureBounds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayTextureBounds) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayTextureBounds)
            )
        );
    }
    test_field_SetOverlayTextureBounds();
    fn test_field_GetOverlayTextureBounds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTextureBounds) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTextureBounds)
            )
        );
    }
    test_field_GetOverlayTextureBounds();
    fn test_field_GetOverlayRenderModel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayRenderModel) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayRenderModel)
            )
        );
    }
    test_field_GetOverlayRenderModel();
    fn test_field_SetOverlayRenderModel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayRenderModel) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayRenderModel)
            )
        );
    }
    test_field_SetOverlayRenderModel();
    fn test_field_GetOverlayTransformType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTransformType) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTransformType)
            )
        );
    }
    test_field_GetOverlayTransformType();
    fn test_field_SetOverlayTransformAbsolute() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayTransformAbsolute) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayTransformAbsolute)
            )
        );
    }
    test_field_SetOverlayTransformAbsolute();
    fn test_field_GetOverlayTransformAbsolute() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTransformAbsolute) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTransformAbsolute)
            )
        );
    }
    test_field_GetOverlayTransformAbsolute();
    fn test_field_SetOverlayTransformTrackedDeviceRelative() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayTransformTrackedDeviceRelative) as usize
                    - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayTransformTrackedDeviceRelative)
            )
        );
    }
    test_field_SetOverlayTransformTrackedDeviceRelative();
    fn test_field_GetOverlayTransformTrackedDeviceRelative() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTransformTrackedDeviceRelative) as usize
                    - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTransformTrackedDeviceRelative)
            )
        );
    }
    test_field_GetOverlayTransformTrackedDeviceRelative();
    fn test_field_SetOverlayTransformTrackedDeviceComponent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayTransformTrackedDeviceComponent) as usize
                    - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayTransformTrackedDeviceComponent)
            )
        );
    }
    test_field_SetOverlayTransformTrackedDeviceComponent();
    fn test_field_GetOverlayTransformTrackedDeviceComponent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTransformTrackedDeviceComponent) as usize
                    - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTransformTrackedDeviceComponent)
            )
        );
    }
    test_field_GetOverlayTransformTrackedDeviceComponent();
    fn test_field_GetOverlayTransformOverlayRelative() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTransformOverlayRelative) as usize
                    - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTransformOverlayRelative)
            )
        );
    }
    test_field_GetOverlayTransformOverlayRelative();
    fn test_field_SetOverlayTransformOverlayRelative() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayTransformOverlayRelative) as usize
                    - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayTransformOverlayRelative)
            )
        );
    }
    test_field_SetOverlayTransformOverlayRelative();
    fn test_field_ShowOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowOverlay) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(ShowOverlay)
            )
        );
    }
    test_field_ShowOverlay();
    fn test_field_HideOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HideOverlay) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(HideOverlay)
            )
        );
    }
    test_field_HideOverlay();
    fn test_field_IsOverlayVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsOverlayVisible) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(IsOverlayVisible)
            )
        );
    }
    test_field_IsOverlayVisible();
    fn test_field_GetTransformForOverlayCoordinates() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetTransformForOverlayCoordinates) as usize
                    - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetTransformForOverlayCoordinates)
            )
        );
    }
    test_field_GetTransformForOverlayCoordinates();
    fn test_field_PollNextOverlayEvent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PollNextOverlayEvent) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(PollNextOverlayEvent)
            )
        );
    }
    test_field_PollNextOverlayEvent();
    fn test_field_GetOverlayInputMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayInputMethod) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayInputMethod)
            )
        );
    }
    test_field_GetOverlayInputMethod();
    fn test_field_SetOverlayInputMethod() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayInputMethod) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayInputMethod)
            )
        );
    }
    test_field_SetOverlayInputMethod();
    fn test_field_GetOverlayMouseScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayMouseScale) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayMouseScale)
            )
        );
    }
    test_field_GetOverlayMouseScale();
    fn test_field_SetOverlayMouseScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayMouseScale) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayMouseScale)
            )
        );
    }
    test_field_SetOverlayMouseScale();
    fn test_field_ComputeOverlayIntersection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ComputeOverlayIntersection) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(ComputeOverlayIntersection)
            )
        );
    }
    test_field_ComputeOverlayIntersection();
    fn test_field_IsHoverTargetOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsHoverTargetOverlay) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(IsHoverTargetOverlay)
            )
        );
    }
    test_field_IsHoverTargetOverlay();
    fn test_field_GetGamepadFocusOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetGamepadFocusOverlay) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetGamepadFocusOverlay)
            )
        );
    }
    test_field_GetGamepadFocusOverlay();
    fn test_field_SetGamepadFocusOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetGamepadFocusOverlay) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetGamepadFocusOverlay)
            )
        );
    }
    test_field_SetGamepadFocusOverlay();
    fn test_field_SetOverlayNeighbor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayNeighbor) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayNeighbor)
            )
        );
    }
    test_field_SetOverlayNeighbor();
    fn test_field_MoveGamepadFocusToNeighbor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MoveGamepadFocusToNeighbor) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(MoveGamepadFocusToNeighbor)
            )
        );
    }
    test_field_MoveGamepadFocusToNeighbor();
    fn test_field_SetOverlayDualAnalogTransform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayDualAnalogTransform) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayDualAnalogTransform)
            )
        );
    }
    test_field_SetOverlayDualAnalogTransform();
    fn test_field_GetOverlayDualAnalogTransform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayDualAnalogTransform) as usize - ptr as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayDualAnalogTransform)
            )
        );
    }
    test_field_GetOverlayDualAnalogTransform();
    fn test_field_SetOverlayTexture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayTexture) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayTexture)
            )
        );
    }
    test_field_SetOverlayTexture();
    fn test_field_ClearOverlayTexture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearOverlayTexture) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(ClearOverlayTexture)
            )
        );
    }
    test_field_ClearOverlayTexture();
    fn test_field_SetOverlayRaw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayRaw) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayRaw)
            )
        );
    }
    test_field_SetOverlayRaw();
    fn test_field_SetOverlayFromFile() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayFromFile) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayFromFile)
            )
        );
    }
    test_field_SetOverlayFromFile();
    fn test_field_GetOverlayTexture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTexture) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTexture)
            )
        );
    }
    test_field_GetOverlayTexture();
    fn test_field_ReleaseNativeOverlayHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReleaseNativeOverlayHandle) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(ReleaseNativeOverlayHandle)
            )
        );
    }
    test_field_ReleaseNativeOverlayHandle();
    fn test_field_GetOverlayTextureSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayTextureSize) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayTextureSize)
            )
        );
    }
    test_field_GetOverlayTextureSize();
    fn test_field_CreateDashboardOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateDashboardOverlay) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(CreateDashboardOverlay)
            )
        );
    }
    test_field_CreateDashboardOverlay();
    fn test_field_IsDashboardVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsDashboardVisible) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(IsDashboardVisible)
            )
        );
    }
    test_field_IsDashboardVisible();
    fn test_field_IsActiveDashboardOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsActiveDashboardOverlay) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(IsActiveDashboardOverlay)
            )
        );
    }
    test_field_IsActiveDashboardOverlay();
    fn test_field_SetDashboardOverlaySceneProcess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetDashboardOverlaySceneProcess) as usize - ptr as usize
            },
            544usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetDashboardOverlaySceneProcess)
            )
        );
    }
    test_field_SetDashboardOverlaySceneProcess();
    fn test_field_GetDashboardOverlaySceneProcess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDashboardOverlaySceneProcess) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetDashboardOverlaySceneProcess)
            )
        );
    }
    test_field_GetDashboardOverlaySceneProcess();
    fn test_field_ShowDashboard() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowDashboard) as usize - ptr as usize
            },
            560usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(ShowDashboard)
            )
        );
    }
    test_field_ShowDashboard();
    fn test_field_GetPrimaryDashboardDevice() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPrimaryDashboardDevice) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetPrimaryDashboardDevice)
            )
        );
    }
    test_field_GetPrimaryDashboardDevice();
    fn test_field_ShowKeyboard() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowKeyboard) as usize - ptr as usize
            },
            576usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(ShowKeyboard)
            )
        );
    }
    test_field_ShowKeyboard();
    fn test_field_ShowKeyboardForOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowKeyboardForOverlay) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(ShowKeyboardForOverlay)
            )
        );
    }
    test_field_ShowKeyboardForOverlay();
    fn test_field_GetKeyboardText() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetKeyboardText) as usize - ptr as usize
            },
            592usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetKeyboardText)
            )
        );
    }
    test_field_GetKeyboardText();
    fn test_field_HideKeyboard() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HideKeyboard) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(HideKeyboard)
            )
        );
    }
    test_field_HideKeyboard();
    fn test_field_SetKeyboardTransformAbsolute() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetKeyboardTransformAbsolute) as usize - ptr as usize
            },
            608usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetKeyboardTransformAbsolute)
            )
        );
    }
    test_field_SetKeyboardTransformAbsolute();
    fn test_field_SetKeyboardPositionForOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetKeyboardPositionForOverlay) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetKeyboardPositionForOverlay)
            )
        );
    }
    test_field_SetKeyboardPositionForOverlay();
    fn test_field_SetOverlayIntersectionMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetOverlayIntersectionMask) as usize - ptr as usize
            },
            624usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(SetOverlayIntersectionMask)
            )
        );
    }
    test_field_SetOverlayIntersectionMask();
    fn test_field_GetOverlayFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOverlayFlags) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(GetOverlayFlags)
            )
        );
    }
    test_field_GetOverlayFlags();
    fn test_field_ShowMessageOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowMessageOverlay) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(ShowMessageOverlay)
            )
        );
    }
    test_field_ShowMessageOverlay();
    fn test_field_CloseMessageOverlay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVROverlay_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CloseMessageOverlay) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVROverlay_FnTable),
                "::",
                stringify!(CloseMessageOverlay)
            )
        );
    }
    test_field_CloseMessageOverlay();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRRenderModels_FnTable {
    pub LoadRenderModel_Async: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            ppRenderModel: *mut *mut RenderModel_t,
        ) -> EVRRenderModelError,
    >,
    pub FreeRenderModel:
        ::std::option::Option<unsafe extern "C" fn(pRenderModel: *mut RenderModel_t)>,
    pub LoadTexture_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            ppTexture: *mut *mut RenderModel_TextureMap_t,
        ) -> EVRRenderModelError,
    >,
    pub FreeTexture:
        ::std::option::Option<unsafe extern "C" fn(pTexture: *mut RenderModel_TextureMap_t)>,
    pub LoadTextureD3D11_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            pD3D11Device: *mut ::std::os::raw::c_void,
            ppD3D11Texture2D: *mut *mut ::std::os::raw::c_void,
        ) -> EVRRenderModelError,
    >,
    pub LoadIntoTextureD3D11_Async: ::std::option::Option<
        unsafe extern "C" fn(
            textureId: TextureID_t,
            pDstTexture: *mut ::std::os::raw::c_void,
        ) -> EVRRenderModelError,
    >,
    pub FreeTextureD3D11:
        ::std::option::Option<unsafe extern "C" fn(pD3D11Texture2D: *mut ::std::os::raw::c_void)>,
    pub GetRenderModelName: ::std::option::Option<
        unsafe extern "C" fn(
            unRenderModelIndex: u32,
            pchRenderModelName: *mut ::std::os::raw::c_char,
            unRenderModelNameLen: u32,
        ) -> u32,
    >,
    pub GetRenderModelCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetComponentCount: ::std::option::Option<
        unsafe extern "C" fn(pchRenderModelName: *mut ::std::os::raw::c_char) -> u32,
    >,
    pub GetComponentName: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            unComponentIndex: u32,
            pchComponentName: *mut ::std::os::raw::c_char,
            unComponentNameLen: u32,
        ) -> u32,
    >,
    pub GetComponentButtonMask: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> u64,
    >,
    pub GetComponentRenderModelName: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            pchComponentRenderModelName: *mut ::std::os::raw::c_char,
            unComponentRenderModelNameLen: u32,
        ) -> u32,
    >,
    pub GetComponentStateForDevicePath: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            devicePath: VRInputValueHandle_t,
            pState: *mut RenderModel_ControllerMode_State_t,
            pComponentState: *mut RenderModel_ComponentState_t,
        ) -> bool,
    >,
    pub GetComponentState: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
            pControllerState: *mut VRControllerState_t,
            pState: *mut RenderModel_ControllerMode_State_t,
            pComponentState: *mut RenderModel_ComponentState_t,
        ) -> bool,
    >,
    pub RenderModelHasComponent: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchComponentName: *mut ::std::os::raw::c_char,
        ) -> bool,
    >,
    pub GetRenderModelThumbnailURL: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchThumbnailURL: *mut ::std::os::raw::c_char,
            unThumbnailURLLen: u32,
            peError: *mut EVRRenderModelError,
        ) -> u32,
    >,
    pub GetRenderModelOriginalPath: ::std::option::Option<
        unsafe extern "C" fn(
            pchRenderModelName: *mut ::std::os::raw::c_char,
            pchOriginalPath: *mut ::std::os::raw::c_char,
            unOriginalPathLen: u32,
            peError: *mut EVRRenderModelError,
        ) -> u32,
    >,
    pub GetRenderModelErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(error: EVRRenderModelError) -> *mut ::std::os::raw::c_char,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRRenderModels_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRRenderModels_FnTable>(),
        152usize,
        concat!("Size of: ", stringify!(VR_IVRRenderModels_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRRenderModels_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRRenderModels_FnTable))
    );
    fn test_field_LoadRenderModel_Async() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LoadRenderModel_Async) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(LoadRenderModel_Async)
            )
        );
    }
    test_field_LoadRenderModel_Async();
    fn test_field_FreeRenderModel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreeRenderModel) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(FreeRenderModel)
            )
        );
    }
    test_field_FreeRenderModel();
    fn test_field_LoadTexture_Async() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LoadTexture_Async) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(LoadTexture_Async)
            )
        );
    }
    test_field_LoadTexture_Async();
    fn test_field_FreeTexture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreeTexture) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(FreeTexture)
            )
        );
    }
    test_field_FreeTexture();
    fn test_field_LoadTextureD3D11_Async() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LoadTextureD3D11_Async) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(LoadTextureD3D11_Async)
            )
        );
    }
    test_field_LoadTextureD3D11_Async();
    fn test_field_LoadIntoTextureD3D11_Async() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LoadIntoTextureD3D11_Async) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(LoadIntoTextureD3D11_Async)
            )
        );
    }
    test_field_LoadIntoTextureD3D11_Async();
    fn test_field_FreeTextureD3D11() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreeTextureD3D11) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(FreeTextureD3D11)
            )
        );
    }
    test_field_FreeTextureD3D11();
    fn test_field_GetRenderModelName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetRenderModelName) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetRenderModelName)
            )
        );
    }
    test_field_GetRenderModelName();
    fn test_field_GetRenderModelCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetRenderModelCount) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetRenderModelCount)
            )
        );
    }
    test_field_GetRenderModelCount();
    fn test_field_GetComponentCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetComponentCount) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetComponentCount)
            )
        );
    }
    test_field_GetComponentCount();
    fn test_field_GetComponentName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetComponentName) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetComponentName)
            )
        );
    }
    test_field_GetComponentName();
    fn test_field_GetComponentButtonMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetComponentButtonMask) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetComponentButtonMask)
            )
        );
    }
    test_field_GetComponentButtonMask();
    fn test_field_GetComponentRenderModelName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetComponentRenderModelName) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetComponentRenderModelName)
            )
        );
    }
    test_field_GetComponentRenderModelName();
    fn test_field_GetComponentStateForDevicePath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetComponentStateForDevicePath) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetComponentStateForDevicePath)
            )
        );
    }
    test_field_GetComponentStateForDevicePath();
    fn test_field_GetComponentState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetComponentState) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetComponentState)
            )
        );
    }
    test_field_GetComponentState();
    fn test_field_RenderModelHasComponent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RenderModelHasComponent) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(RenderModelHasComponent)
            )
        );
    }
    test_field_RenderModelHasComponent();
    fn test_field_GetRenderModelThumbnailURL() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetRenderModelThumbnailURL) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetRenderModelThumbnailURL)
            )
        );
    }
    test_field_GetRenderModelThumbnailURL();
    fn test_field_GetRenderModelOriginalPath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetRenderModelOriginalPath) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetRenderModelOriginalPath)
            )
        );
    }
    test_field_GetRenderModelOriginalPath();
    fn test_field_GetRenderModelErrorNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRRenderModels_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetRenderModelErrorNameFromEnum) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRRenderModels_FnTable),
                "::",
                stringify!(GetRenderModelErrorNameFromEnum)
            )
        );
    }
    test_field_GetRenderModelErrorNameFromEnum();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRNotifications_FnTable {
    pub CreateNotification: ::std::option::Option<
        unsafe extern "C" fn(
            ulOverlayHandle: VROverlayHandle_t,
            ulUserValue: u64,
            type_: EVRNotificationType,
            pchText: *mut ::std::os::raw::c_char,
            style: EVRNotificationStyle,
            pImage: *mut NotificationBitmap_t,
            pNotificationId: *mut VRNotificationId,
        ) -> EVRNotificationError,
    >,
    pub RemoveNotification: ::std::option::Option<
        unsafe extern "C" fn(notificationId: VRNotificationId) -> EVRNotificationError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRNotifications_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRNotifications_FnTable>(),
        16usize,
        concat!("Size of: ", stringify!(VR_IVRNotifications_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRNotifications_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRNotifications_FnTable))
    );
    fn test_field_CreateNotification() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRNotifications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateNotification) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRNotifications_FnTable),
                "::",
                stringify!(CreateNotification)
            )
        );
    }
    test_field_CreateNotification();
    fn test_field_RemoveNotification() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRNotifications_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RemoveNotification) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRNotifications_FnTable),
                "::",
                stringify!(RemoveNotification)
            )
        );
    }
    test_field_RemoveNotification();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSettings_FnTable {
    pub GetSettingsErrorNameFromEnum: ::std::option::Option<
        unsafe extern "C" fn(eError: EVRSettingsError) -> *mut ::std::os::raw::c_char,
    >,
    pub Sync: ::std::option::Option<
        unsafe extern "C" fn(bForce: bool, peError: *mut EVRSettingsError) -> bool,
    >,
    pub SetBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            bValue: bool,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetInt32: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            nValue: i32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetFloat: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            flValue: f32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub SetString: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            pchValue: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub GetBool: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> bool,
    >,
    pub GetInt32: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> i32,
    >,
    pub GetFloat: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ) -> f32,
    >,
    pub GetString: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            pchValue: *mut ::std::os::raw::c_char,
            unValueLen: u32,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub RemoveSection: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
    pub RemoveKeyInSection: ::std::option::Option<
        unsafe extern "C" fn(
            pchSection: *mut ::std::os::raw::c_char,
            pchSettingsKey: *mut ::std::os::raw::c_char,
            peError: *mut EVRSettingsError,
        ),
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRSettings_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRSettings_FnTable>(),
        96usize,
        concat!("Size of: ", stringify!(VR_IVRSettings_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRSettings_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRSettings_FnTable))
    );
    fn test_field_GetSettingsErrorNameFromEnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSettingsErrorNameFromEnum) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(GetSettingsErrorNameFromEnum)
            )
        );
    }
    test_field_GetSettingsErrorNameFromEnum();
    fn test_field_Sync() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Sync) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(Sync)
            )
        );
    }
    test_field_Sync();
    fn test_field_SetBool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetBool) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(SetBool)
            )
        );
    }
    test_field_SetBool();
    fn test_field_SetInt32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetInt32) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(SetInt32)
            )
        );
    }
    test_field_SetInt32();
    fn test_field_SetFloat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetFloat) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(SetFloat)
            )
        );
    }
    test_field_SetFloat();
    fn test_field_SetString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetString) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(SetString)
            )
        );
    }
    test_field_SetString();
    fn test_field_GetBool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBool) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(GetBool)
            )
        );
    }
    test_field_GetBool();
    fn test_field_GetInt32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInt32) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(GetInt32)
            )
        );
    }
    test_field_GetInt32();
    fn test_field_GetFloat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetFloat) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(GetFloat)
            )
        );
    }
    test_field_GetFloat();
    fn test_field_GetString() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetString) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(GetString)
            )
        );
    }
    test_field_GetString();
    fn test_field_RemoveSection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RemoveSection) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(RemoveSection)
            )
        );
    }
    test_field_RemoveSection();
    fn test_field_RemoveKeyInSection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSettings_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RemoveKeyInSection) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSettings_FnTable),
                "::",
                stringify!(RemoveKeyInSection)
            )
        );
    }
    test_field_RemoveKeyInSection();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRScreenshots_FnTable {
    pub RequestScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pOutScreenshotHandle: *mut ScreenshotHandle_t,
            type_: EVRScreenshotType,
            pchPreviewFilename: *mut ::std::os::raw::c_char,
            pchVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
    pub HookScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pSupportedTypes: *mut EVRScreenshotType,
            numTypes: ::std::os::raw::c_int,
        ) -> EVRScreenshotError,
    >,
    pub GetScreenshotPropertyType: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            pError: *mut EVRScreenshotError,
        ) -> EVRScreenshotType,
    >,
    pub GetScreenshotPropertyFilename: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            filenameType: EVRScreenshotPropertyFilenames,
            pchFilename: *mut ::std::os::raw::c_char,
            cchFilename: u32,
            pError: *mut EVRScreenshotError,
        ) -> u32,
    >,
    pub UpdateScreenshotProgress: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            flProgress: f32,
        ) -> EVRScreenshotError,
    >,
    pub TakeStereoScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            pOutScreenshotHandle: *mut ScreenshotHandle_t,
            pchPreviewFilename: *mut ::std::os::raw::c_char,
            pchVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
    pub SubmitScreenshot: ::std::option::Option<
        unsafe extern "C" fn(
            screenshotHandle: ScreenshotHandle_t,
            type_: EVRScreenshotType,
            pchSourcePreviewFilename: *mut ::std::os::raw::c_char,
            pchSourceVRFilename: *mut ::std::os::raw::c_char,
        ) -> EVRScreenshotError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRScreenshots_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRScreenshots_FnTable>(),
        56usize,
        concat!("Size of: ", stringify!(VR_IVRScreenshots_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRScreenshots_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRScreenshots_FnTable))
    );
    fn test_field_RequestScreenshot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRScreenshots_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RequestScreenshot) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRScreenshots_FnTable),
                "::",
                stringify!(RequestScreenshot)
            )
        );
    }
    test_field_RequestScreenshot();
    fn test_field_HookScreenshot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRScreenshots_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HookScreenshot) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRScreenshots_FnTable),
                "::",
                stringify!(HookScreenshot)
            )
        );
    }
    test_field_HookScreenshot();
    fn test_field_GetScreenshotPropertyType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRScreenshots_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetScreenshotPropertyType) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRScreenshots_FnTable),
                "::",
                stringify!(GetScreenshotPropertyType)
            )
        );
    }
    test_field_GetScreenshotPropertyType();
    fn test_field_GetScreenshotPropertyFilename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRScreenshots_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetScreenshotPropertyFilename) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRScreenshots_FnTable),
                "::",
                stringify!(GetScreenshotPropertyFilename)
            )
        );
    }
    test_field_GetScreenshotPropertyFilename();
    fn test_field_UpdateScreenshotProgress() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRScreenshots_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateScreenshotProgress) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRScreenshots_FnTable),
                "::",
                stringify!(UpdateScreenshotProgress)
            )
        );
    }
    test_field_UpdateScreenshotProgress();
    fn test_field_TakeStereoScreenshot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRScreenshots_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TakeStereoScreenshot) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRScreenshots_FnTable),
                "::",
                stringify!(TakeStereoScreenshot)
            )
        );
    }
    test_field_TakeStereoScreenshot();
    fn test_field_SubmitScreenshot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRScreenshots_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SubmitScreenshot) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRScreenshots_FnTable),
                "::",
                stringify!(SubmitScreenshot)
            )
        );
    }
    test_field_SubmitScreenshot();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRResources_FnTable {
    pub LoadSharedResource: ::std::option::Option<
        unsafe extern "C" fn(
            pchResourceName: *mut ::std::os::raw::c_char,
            pchBuffer: *mut ::std::os::raw::c_char,
            unBufferLen: u32,
        ) -> u32,
    >,
    pub GetResourceFullPath: ::std::option::Option<
        unsafe extern "C" fn(
            pchResourceName: *mut ::std::os::raw::c_char,
            pchResourceTypeDirectory: *mut ::std::os::raw::c_char,
            pchPathBuffer: *mut ::std::os::raw::c_char,
            unBufferLen: u32,
        ) -> u32,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRResources_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRResources_FnTable>(),
        16usize,
        concat!("Size of: ", stringify!(VR_IVRResources_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRResources_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRResources_FnTable))
    );
    fn test_field_LoadSharedResource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRResources_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LoadSharedResource) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRResources_FnTable),
                "::",
                stringify!(LoadSharedResource)
            )
        );
    }
    test_field_LoadSharedResource();
    fn test_field_GetResourceFullPath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRResources_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetResourceFullPath) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRResources_FnTable),
                "::",
                stringify!(GetResourceFullPath)
            )
        );
    }
    test_field_GetResourceFullPath();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRDriverManager_FnTable {
    pub GetDriverCount: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub GetDriverName: ::std::option::Option<
        unsafe extern "C" fn(
            nDriver: DriverId_t,
            pchValue: *mut ::std::os::raw::c_char,
            unBufferSize: u32,
        ) -> u32,
    >,
    pub GetDriverHandle: ::std::option::Option<
        unsafe extern "C" fn(pchDriverName: *mut ::std::os::raw::c_char) -> DriverHandle_t,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRDriverManager_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRDriverManager_FnTable>(),
        24usize,
        concat!("Size of: ", stringify!(VR_IVRDriverManager_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRDriverManager_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRDriverManager_FnTable))
    );
    fn test_field_GetDriverCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRDriverManager_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDriverCount) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRDriverManager_FnTable),
                "::",
                stringify!(GetDriverCount)
            )
        );
    }
    test_field_GetDriverCount();
    fn test_field_GetDriverName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRDriverManager_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDriverName) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRDriverManager_FnTable),
                "::",
                stringify!(GetDriverName)
            )
        );
    }
    test_field_GetDriverName();
    fn test_field_GetDriverHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRDriverManager_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDriverHandle) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRDriverManager_FnTable),
                "::",
                stringify!(GetDriverHandle)
            )
        );
    }
    test_field_GetDriverHandle();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRInput_FnTable {
    pub SetActionManifestPath: ::std::option::Option<
        unsafe extern "C" fn(pchActionManifestPath: *mut ::std::os::raw::c_char) -> EVRInputError,
    >,
    pub GetActionSetHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchActionSetName: *mut ::std::os::raw::c_char,
            pHandle: *mut VRActionSetHandle_t,
        ) -> EVRInputError,
    >,
    pub GetActionHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchActionName: *mut ::std::os::raw::c_char,
            pHandle: *mut VRActionHandle_t,
        ) -> EVRInputError,
    >,
    pub GetInputSourceHandle: ::std::option::Option<
        unsafe extern "C" fn(
            pchInputSourcePath: *mut ::std::os::raw::c_char,
            pHandle: *mut VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub UpdateActionState: ::std::option::Option<
        unsafe extern "C" fn(
            pSets: *mut VRActiveActionSet_t,
            unSizeOfVRSelectedActionSet_t: u32,
            unSetCount: u32,
        ) -> EVRInputError,
    >,
    pub GetDigitalActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputDigitalActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetAnalogActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputAnalogActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetPoseActionDataRelativeToNow: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            fPredictedSecondsFromNow: f32,
            pActionData: *mut InputPoseActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetPoseActionDataForNextFrame: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            pActionData: *mut InputPoseActionData_t,
            unActionDataSize: u32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetSkeletalActionData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pActionData: *mut InputSkeletalActionData_t,
            unActionDataSize: u32,
        ) -> EVRInputError,
    >,
    pub GetBoneCount: ::std::option::Option<
        unsafe extern "C" fn(action: VRActionHandle_t, pBoneCount: *mut u32) -> EVRInputError,
    >,
    pub GetBoneHierarchy: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pParentIndices: *mut BoneIndex_t,
            unIndexArayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetBoneName: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            nBoneIndex: BoneIndex_t,
            pchBoneName: *mut ::std::os::raw::c_char,
            unNameBufferSize: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalReferenceTransforms: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eTransformSpace: EVRSkeletalTransformSpace,
            eReferencePose: EVRSkeletalReferencePose,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalTrackingLevel: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            pSkeletalTrackingLevel: *mut EVRSkeletalTrackingLevel,
        ) -> EVRInputError,
    >,
    pub GetSkeletalBoneData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eTransformSpace: EVRSkeletalTransformSpace,
            eMotionRange: EVRSkeletalMotionRange,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub GetSkeletalSummaryData: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eSummaryType: EVRSummaryType,
            pSkeletalSummaryData: *mut VRSkeletalSummaryData_t,
        ) -> EVRInputError,
    >,
    pub GetSkeletalBoneDataCompressed: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            eMotionRange: EVRSkeletalMotionRange,
            pvCompressedData: *mut ::std::os::raw::c_void,
            unCompressedSize: u32,
            punRequiredCompressedSize: *mut u32,
        ) -> EVRInputError,
    >,
    pub DecompressSkeletalBoneData: ::std::option::Option<
        unsafe extern "C" fn(
            pvCompressedBuffer: *mut ::std::os::raw::c_void,
            unCompressedBufferSize: u32,
            eTransformSpace: EVRSkeletalTransformSpace,
            pTransformArray: *mut VRBoneTransform_t,
            unTransformArrayCount: u32,
        ) -> EVRInputError,
    >,
    pub TriggerHapticVibrationAction: ::std::option::Option<
        unsafe extern "C" fn(
            action: VRActionHandle_t,
            fStartSecondsFromNow: f32,
            fDurationSeconds: f32,
            fFrequency: f32,
            fAmplitude: f32,
            ulRestrictToDevice: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub GetActionOrigins: ::std::option::Option<
        unsafe extern "C" fn(
            actionSetHandle: VRActionSetHandle_t,
            digitalActionHandle: VRActionHandle_t,
            originsOut: *mut VRInputValueHandle_t,
            originOutCount: u32,
        ) -> EVRInputError,
    >,
    pub GetOriginLocalizedName: ::std::option::Option<
        unsafe extern "C" fn(
            origin: VRInputValueHandle_t,
            pchNameArray: *mut ::std::os::raw::c_char,
            unNameArraySize: u32,
            unStringSectionsToInclude: i32,
        ) -> EVRInputError,
    >,
    pub GetOriginTrackedDeviceInfo: ::std::option::Option<
        unsafe extern "C" fn(
            origin: VRInputValueHandle_t,
            pOriginInfo: *mut InputOriginInfo_t,
            unOriginInfoSize: u32,
        ) -> EVRInputError,
    >,
    pub ShowActionOrigins: ::std::option::Option<
        unsafe extern "C" fn(
            actionSetHandle: VRActionSetHandle_t,
            ulActionHandle: VRActionHandle_t,
        ) -> EVRInputError,
    >,
    pub ShowBindingsForActionSet: ::std::option::Option<
        unsafe extern "C" fn(
            pSets: *mut VRActiveActionSet_t,
            unSizeOfVRSelectedActionSet_t: u32,
            unSetCount: u32,
            originToHighlight: VRInputValueHandle_t,
        ) -> EVRInputError,
    >,
    pub IsUsingLegacyInput: ::std::option::Option<unsafe extern "C" fn() -> bool>,
}
#[test]
fn bindgen_test_layout_VR_IVRInput_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRInput_FnTable>(),
        208usize,
        concat!("Size of: ", stringify!(VR_IVRInput_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRInput_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRInput_FnTable))
    );
    fn test_field_SetActionManifestPath() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetActionManifestPath) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(SetActionManifestPath)
            )
        );
    }
    test_field_SetActionManifestPath();
    fn test_field_GetActionSetHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetActionSetHandle) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetActionSetHandle)
            )
        );
    }
    test_field_GetActionSetHandle();
    fn test_field_GetActionHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetActionHandle) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetActionHandle)
            )
        );
    }
    test_field_GetActionHandle();
    fn test_field_GetInputSourceHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetInputSourceHandle) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetInputSourceHandle)
            )
        );
    }
    test_field_GetInputSourceHandle();
    fn test_field_UpdateActionState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UpdateActionState) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(UpdateActionState)
            )
        );
    }
    test_field_UpdateActionState();
    fn test_field_GetDigitalActionData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetDigitalActionData) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetDigitalActionData)
            )
        );
    }
    test_field_GetDigitalActionData();
    fn test_field_GetAnalogActionData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetAnalogActionData) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetAnalogActionData)
            )
        );
    }
    test_field_GetAnalogActionData();
    fn test_field_GetPoseActionDataRelativeToNow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPoseActionDataRelativeToNow) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetPoseActionDataRelativeToNow)
            )
        );
    }
    test_field_GetPoseActionDataRelativeToNow();
    fn test_field_GetPoseActionDataForNextFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetPoseActionDataForNextFrame) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetPoseActionDataForNextFrame)
            )
        );
    }
    test_field_GetPoseActionDataForNextFrame();
    fn test_field_GetSkeletalActionData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSkeletalActionData) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetSkeletalActionData)
            )
        );
    }
    test_field_GetSkeletalActionData();
    fn test_field_GetBoneCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoneCount) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetBoneCount)
            )
        );
    }
    test_field_GetBoneCount();
    fn test_field_GetBoneHierarchy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoneHierarchy) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetBoneHierarchy)
            )
        );
    }
    test_field_GetBoneHierarchy();
    fn test_field_GetBoneName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetBoneName) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetBoneName)
            )
        );
    }
    test_field_GetBoneName();
    fn test_field_GetSkeletalReferenceTransforms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSkeletalReferenceTransforms) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetSkeletalReferenceTransforms)
            )
        );
    }
    test_field_GetSkeletalReferenceTransforms();
    fn test_field_GetSkeletalTrackingLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSkeletalTrackingLevel) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetSkeletalTrackingLevel)
            )
        );
    }
    test_field_GetSkeletalTrackingLevel();
    fn test_field_GetSkeletalBoneData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSkeletalBoneData) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetSkeletalBoneData)
            )
        );
    }
    test_field_GetSkeletalBoneData();
    fn test_field_GetSkeletalSummaryData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSkeletalSummaryData) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetSkeletalSummaryData)
            )
        );
    }
    test_field_GetSkeletalSummaryData();
    fn test_field_GetSkeletalBoneDataCompressed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSkeletalBoneDataCompressed) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetSkeletalBoneDataCompressed)
            )
        );
    }
    test_field_GetSkeletalBoneDataCompressed();
    fn test_field_DecompressSkeletalBoneData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DecompressSkeletalBoneData) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(DecompressSkeletalBoneData)
            )
        );
    }
    test_field_DecompressSkeletalBoneData();
    fn test_field_TriggerHapticVibrationAction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TriggerHapticVibrationAction) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(TriggerHapticVibrationAction)
            )
        );
    }
    test_field_TriggerHapticVibrationAction();
    fn test_field_GetActionOrigins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetActionOrigins) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetActionOrigins)
            )
        );
    }
    test_field_GetActionOrigins();
    fn test_field_GetOriginLocalizedName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOriginLocalizedName) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetOriginLocalizedName)
            )
        );
    }
    test_field_GetOriginLocalizedName();
    fn test_field_GetOriginTrackedDeviceInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetOriginTrackedDeviceInfo) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(GetOriginTrackedDeviceInfo)
            )
        );
    }
    test_field_GetOriginTrackedDeviceInfo();
    fn test_field_ShowActionOrigins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowActionOrigins) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(ShowActionOrigins)
            )
        );
    }
    test_field_ShowActionOrigins();
    fn test_field_ShowBindingsForActionSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowBindingsForActionSet) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(ShowBindingsForActionSet)
            )
        );
    }
    test_field_ShowBindingsForActionSet();
    fn test_field_IsUsingLegacyInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRInput_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsUsingLegacyInput) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRInput_FnTable),
                "::",
                stringify!(IsUsingLegacyInput)
            )
        );
    }
    test_field_IsUsingLegacyInput();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRIOBuffer_FnTable {
    pub Open: ::std::option::Option<
        unsafe extern "C" fn(
            pchPath: *mut ::std::os::raw::c_char,
            mode: EIOBufferMode,
            unElementSize: u32,
            unElements: u32,
            pulBuffer: *mut IOBufferHandle_t,
        ) -> EIOBufferError,
    >,
    pub Close:
        ::std::option::Option<unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> EIOBufferError>,
    pub Read: ::std::option::Option<
        unsafe extern "C" fn(
            ulBuffer: IOBufferHandle_t,
            pDst: *mut ::std::os::raw::c_void,
            unBytes: u32,
            punRead: *mut u32,
        ) -> EIOBufferError,
    >,
    pub Write: ::std::option::Option<
        unsafe extern "C" fn(
            ulBuffer: IOBufferHandle_t,
            pSrc: *mut ::std::os::raw::c_void,
            unBytes: u32,
        ) -> EIOBufferError,
    >,
    pub PropertyContainer: ::std::option::Option<
        unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> PropertyContainerHandle_t,
    >,
    pub HasReaders: ::std::option::Option<unsafe extern "C" fn(ulBuffer: IOBufferHandle_t) -> bool>,
}
#[test]
fn bindgen_test_layout_VR_IVRIOBuffer_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRIOBuffer_FnTable>(),
        48usize,
        concat!("Size of: ", stringify!(VR_IVRIOBuffer_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRIOBuffer_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRIOBuffer_FnTable))
    );
    fn test_field_Open() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRIOBuffer_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Open) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRIOBuffer_FnTable),
                "::",
                stringify!(Open)
            )
        );
    }
    test_field_Open();
    fn test_field_Close() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRIOBuffer_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Close) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRIOBuffer_FnTable),
                "::",
                stringify!(Close)
            )
        );
    }
    test_field_Close();
    fn test_field_Read() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRIOBuffer_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Read) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRIOBuffer_FnTable),
                "::",
                stringify!(Read)
            )
        );
    }
    test_field_Read();
    fn test_field_Write() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRIOBuffer_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Write) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRIOBuffer_FnTable),
                "::",
                stringify!(Write)
            )
        );
    }
    test_field_Write();
    fn test_field_PropertyContainer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRIOBuffer_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PropertyContainer) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRIOBuffer_FnTable),
                "::",
                stringify!(PropertyContainer)
            )
        );
    }
    test_field_PropertyContainer();
    fn test_field_HasReaders() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRIOBuffer_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HasReaders) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRIOBuffer_FnTable),
                "::",
                stringify!(HasReaders)
            )
        );
    }
    test_field_HasReaders();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VR_IVRSpatialAnchors_FnTable {
    pub CreateSpatialAnchorFromDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            pchDescriptor: *mut ::std::os::raw::c_char,
            pHandleOut: *mut SpatialAnchorHandle_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub CreateSpatialAnchorFromPose: ::std::option::Option<
        unsafe extern "C" fn(
            unDeviceIndex: TrackedDeviceIndex_t,
            eOrigin: ETrackingUniverseOrigin,
            pPose: *mut SpatialAnchorPose_t,
            pHandleOut: *mut SpatialAnchorHandle_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub GetSpatialAnchorPose: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: SpatialAnchorHandle_t,
            eOrigin: ETrackingUniverseOrigin,
            pPoseOut: *mut SpatialAnchorPose_t,
        ) -> EVRSpatialAnchorError,
    >,
    pub GetSpatialAnchorDescriptor: ::std::option::Option<
        unsafe extern "C" fn(
            unHandle: SpatialAnchorHandle_t,
            pchDescriptorOut: *mut ::std::os::raw::c_char,
            punDescriptorBufferLenInOut: *mut u32,
        ) -> EVRSpatialAnchorError,
    >,
}
#[test]
fn bindgen_test_layout_VR_IVRSpatialAnchors_FnTable() {
    assert_eq!(
        ::std::mem::size_of::<VR_IVRSpatialAnchors_FnTable>(),
        32usize,
        concat!("Size of: ", stringify!(VR_IVRSpatialAnchors_FnTable))
    );
    assert_eq!(
        ::std::mem::align_of::<VR_IVRSpatialAnchors_FnTable>(),
        8usize,
        concat!("Alignment of ", stringify!(VR_IVRSpatialAnchors_FnTable))
    );
    fn test_field_CreateSpatialAnchorFromDescriptor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSpatialAnchors_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSpatialAnchorFromDescriptor) as usize
                    - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSpatialAnchors_FnTable),
                "::",
                stringify!(CreateSpatialAnchorFromDescriptor)
            )
        );
    }
    test_field_CreateSpatialAnchorFromDescriptor();
    fn test_field_CreateSpatialAnchorFromPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSpatialAnchors_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CreateSpatialAnchorFromPose) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSpatialAnchors_FnTable),
                "::",
                stringify!(CreateSpatialAnchorFromPose)
            )
        );
    }
    test_field_CreateSpatialAnchorFromPose();
    fn test_field_GetSpatialAnchorPose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSpatialAnchors_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSpatialAnchorPose) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSpatialAnchors_FnTable),
                "::",
                stringify!(GetSpatialAnchorPose)
            )
        );
    }
    test_field_GetSpatialAnchorPose();
    fn test_field_GetSpatialAnchorDescriptor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VR_IVRSpatialAnchors_FnTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetSpatialAnchorDescriptor) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(VR_IVRSpatialAnchors_FnTable),
                "::",
                stringify!(GetSpatialAnchorDescriptor)
            )
        );
    }
    test_field_GetSpatialAnchorDescriptor();
}
extern "C" {
    pub fn VR_InitInternal(peError: *mut EVRInitError, eType: EVRApplicationType) -> isize;
}
extern "C" {
    pub fn VR_ShutdownInternal();
}
extern "C" {
    pub fn VR_IsHmdPresent() -> bool;
}
extern "C" {
    pub fn VR_GetGenericInterface(
        pchInterfaceVersion: *const ::std::os::raw::c_char,
        peError: *mut EVRInitError,
    ) -> isize;
}
extern "C" {
    pub fn VR_IsRuntimeInstalled() -> bool;
}
extern "C" {
    pub fn VR_GetVRInitErrorAsSymbol(error: EVRInitError) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn VR_GetVRInitErrorAsEnglishDescription(
        error: EVRInitError,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn VR_IsInterfaceVersionValid(pchInterfaceVersion: *const ::std::os::raw::c_char) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VREvent_Keyboard_t_real {
    pub cNewInput: [::std::os::raw::c_char; 8usize],
    pub uUserValue: u64,
}
#[test]
fn bindgen_test_layout_VREvent_Keyboard_t_real() {
    assert_eq!(
        ::std::mem::size_of::<VREvent_Keyboard_t_real>(),
        16usize,
        concat!("Size of: ", stringify!(VREvent_Keyboard_t_real))
    );
    assert_eq!(
        ::std::mem::align_of::<VREvent_Keyboard_t_real>(),
        8usize,
        concat!("Alignment of ", stringify!(VREvent_Keyboard_t_real))
    );
    fn test_field_cNewInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Keyboard_t_real>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cNewInput) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Keyboard_t_real),
                "::",
                stringify!(cNewInput)
            )
        );
    }
    test_field_cNewInput();
    fn test_field_uUserValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VREvent_Keyboard_t_real>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uUserValue) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VREvent_Keyboard_t_real),
                "::",
                stringify!(uUserValue)
            )
        );
    }
    test_field_uUserValue();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRTextureWithPose_t_real {
    pub handle: *mut ::std::os::raw::c_void,
    pub eType: ETextureType,
    pub eColorSpace: EColorSpace,
    pub mDeviceToAbsoluteTracking: HmdMatrix34_t,
}
#[test]
fn bindgen_test_layout_VRTextureWithPose_t_real() {
    assert_eq!(
        ::std::mem::size_of::<VRTextureWithPose_t_real>(),
        64usize,
        concat!("Size of: ", stringify!(VRTextureWithPose_t_real))
    );
    assert_eq!(
        ::std::mem::align_of::<VRTextureWithPose_t_real>(),
        8usize,
        concat!("Alignment of ", stringify!(VRTextureWithPose_t_real))
    );
    fn test_field_handle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureWithPose_t_real>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureWithPose_t_real),
                "::",
                stringify!(handle)
            )
        );
    }
    test_field_handle();
    fn test_field_eType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureWithPose_t_real>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eType) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureWithPose_t_real),
                "::",
                stringify!(eType)
            )
        );
    }
    test_field_eType();
    fn test_field_eColorSpace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureWithPose_t_real>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eColorSpace) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureWithPose_t_real),
                "::",
                stringify!(eColorSpace)
            )
        );
    }
    test_field_eColorSpace();
    fn test_field_mDeviceToAbsoluteTracking() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<VRTextureWithPose_t_real>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mDeviceToAbsoluteTracking) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(VRTextureWithPose_t_real),
                "::",
                stringify!(mDeviceToAbsoluteTracking)
            )
        );
    }
    test_field_mDeviceToAbsoluteTracking();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkDevice_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkPhysicalDevice_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkInstance_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VkQueue_T {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12Resource {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ID3D12CommandQueue {
    pub _address: u8,
}
